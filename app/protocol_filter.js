var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var protocol_filter_exports = {};
__export(protocol_filter_exports, {
  _urlToPath: () => _urlToPath,
  installFileHandler: () => installFileHandler,
  installWebHandler: () => installWebHandler
});
module.exports = __toCommonJS(protocol_filter_exports);
var import_path = require("path");
var import_fs = require("fs");
var import_attachments = require("../ts/util/attachments");
function _eliminateAllAfterCharacter(string, character) {
  const index = string.indexOf(character);
  if (index < 0) {
    return string;
  }
  return string.slice(0, index);
}
function _urlToPath(targetUrl, options) {
  const decoded = decodeURIComponent(targetUrl);
  const withoutScheme = decoded.startsWith("//") ? decoded : decoded.slice(options?.isWindows ? 8 : 7);
  const withoutQuerystring = _eliminateAllAfterCharacter(withoutScheme, "?");
  const withoutHash = _eliminateAllAfterCharacter(withoutQuerystring, "#");
  return withoutHash;
}
function _createFileHandler({
  userDataPath,
  installPath,
  isWindows
}) {
  const allowedRoots = [
    userDataPath,
    installPath,
    (0, import_attachments.getAvatarsPath)(userDataPath),
    (0, import_attachments.getBadgesPath)(userDataPath),
    (0, import_attachments.getDraftPath)(userDataPath),
    (0, import_attachments.getPath)(userDataPath),
    (0, import_attachments.getStickersPath)(userDataPath),
    (0, import_attachments.getTempPath)(userDataPath),
    (0, import_attachments.getUpdateCachePath)(userDataPath)
  ];
  return (request, callback) => {
    let targetPath;
    if (!request.url) {
      callback({ error: -300 });
      return;
    }
    try {
      targetPath = _urlToPath(request.url, { isWindows });
    } catch (err) {
      const errorMessage = err && typeof err.message === "string" ? err.message : "no error message";
      console.log(`Warning: denying request because of an error: ${errorMessage}`);
      callback({ error: -300 });
      return;
    }
    const target = (0, import_path.normalize)(targetPath);
    const realPath = (0, import_fs.existsSync)(target) ? (0, import_fs.realpathSync)(target) : target;
    const properCasing = isWindows ? realPath.toLowerCase() : realPath;
    if (!(0, import_path.isAbsolute)(realPath)) {
      console.log(`Warning: denying request to non-absolute path '${realPath}'`);
      callback({ error: -10 });
      return;
    }
    for (const root of allowedRoots) {
      if (properCasing.startsWith(isWindows ? root.toLowerCase() : root)) {
        callback({ path: realPath });
        return;
      }
    }
    console.log(`Warning: denying request to path '${realPath}' (allowedRoots: '${allowedRoots}')`);
    callback({ error: -10 });
  };
}
function installFileHandler({
  protocol,
  userDataPath,
  installPath,
  isWindows
}) {
  protocol.interceptFileProtocol("file", _createFileHandler({ userDataPath, installPath, isWindows }));
}
function _disabledHandler(_request, callback) {
  callback({ error: -10 });
}
function installWebHandler({
  protocol,
  enableHttp
}) {
  protocol.interceptFileProtocol("about", _disabledHandler);
  protocol.interceptFileProtocol("content", _disabledHandler);
  protocol.interceptFileProtocol("chrome", _disabledHandler);
  protocol.interceptFileProtocol("cid", _disabledHandler);
  protocol.interceptFileProtocol("data", _disabledHandler);
  protocol.interceptFileProtocol("filesystem", _disabledHandler);
  protocol.interceptFileProtocol("ftp", _disabledHandler);
  protocol.interceptFileProtocol("gopher", _disabledHandler);
  protocol.interceptFileProtocol("javascript", _disabledHandler);
  protocol.interceptFileProtocol("mailto", _disabledHandler);
  if (!enableHttp) {
    protocol.interceptFileProtocol("http", _disabledHandler);
    protocol.interceptFileProtocol("https", _disabledHandler);
    protocol.interceptFileProtocol("ws", _disabledHandler);
    protocol.interceptFileProtocol("wss", _disabledHandler);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  _urlToPath,
  installFileHandler,
  installWebHandler
});
//# sourceMappingURL=data:application/json;base64,
