var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var StickerPicker_exports = {};
__export(StickerPicker_exports, {
  StickerPicker: () => StickerPicker
});
module.exports = __toCommonJS(StickerPicker_exports);
var React = __toESM(require("react"));
var import_classnames = __toESM(require("classnames"));
var import_focus_trap_react = __toESM(require("focus-trap-react"));
var import_useRestoreFocus = require("../../hooks/useRestoreFocus");
function useTabs(tabs, initialTab = tabs[0]) {
  const [tab, setTab] = React.useState(initialTab);
  const handlers = React.useMemo(() => tabs.map((t) => () => {
    setTab(t);
  }), [tabs]);
  return [tab, handlers];
}
const PACKS_PAGE_SIZE = 7;
const PACK_ICON_WIDTH = 32;
const PACK_PAGE_WIDTH = PACKS_PAGE_SIZE * PACK_ICON_WIDTH;
function getPacksPageOffset(page, packs) {
  if (page === 0) {
    return 0;
  }
  if (isLastPacksPage(page, packs)) {
    return PACK_PAGE_WIDTH * (Math.floor(packs / PACKS_PAGE_SIZE) - 1) + (packs % PACKS_PAGE_SIZE - 1) * PACK_ICON_WIDTH;
  }
  return page * PACK_ICON_WIDTH * PACKS_PAGE_SIZE;
}
function isLastPacksPage(page, packs) {
  return page === Math.floor(packs / PACKS_PAGE_SIZE);
}
const StickerPicker = React.memo(React.forwardRef(({
  i18n,
  packs,
  recentStickers,
  onClose,
  onClickAddPack,
  onPickSticker,
  showPickerHint,
  style
}, ref) => {
  const tabIds = React.useMemo(() => ["recents", ...packs.map(({ id }) => id)], [packs]);
  const [currentTab, [recentsHandler, ...packsHandlers]] = useTabs(tabIds, tabIds[recentStickers.length > 0 ? 0 : Math.min(1, tabIds.length)]);
  const selectedPack = packs.find(({ id }) => id === currentTab);
  const {
    stickers = recentStickers,
    title: packTitle = "Recent Stickers"
  } = selectedPack || {};
  const [isUsingKeyboard, setIsUsingKeyboard] = React.useState(false);
  const [packsPage, setPacksPage] = React.useState(0);
  const onClickPrevPackPage = React.useCallback(() => {
    setPacksPage((i) => i - 1);
  }, [setPacksPage]);
  const onClickNextPackPage = React.useCallback(() => {
    setPacksPage((i) => i + 1);
  }, [setPacksPage]);
  React.useEffect(() => {
    const handler = /* @__PURE__ */ __name((event) => {
      if (event.key === "Tab") {
        setIsUsingKeyboard(true);
        return;
      }
      if (event.key === "Escape") {
        event.stopPropagation();
        event.preventDefault();
        onClose();
      }
    }, "handler");
    document.addEventListener("keydown", handler);
    return () => {
      document.removeEventListener("keydown", handler);
    };
  }, [onClose]);
  const [focusRef] = (0, import_useRestoreFocus.useRestoreFocus)();
  const isEmpty = stickers.length === 0;
  const addPackRef = isEmpty ? focusRef : void 0;
  const downloadError = selectedPack && selectedPack.status === "error" && selectedPack.stickerCount !== selectedPack.stickers.length;
  const pendingCount = selectedPack && selectedPack.status === "pending" ? selectedPack.stickerCount - stickers.length : 0;
  const hasPacks = packs.length > 0;
  const isRecents = hasPacks && currentTab === "recents";
  const showPendingText = pendingCount > 0;
  const showDownlaodErrorText = downloadError;
  const showEmptyText = !downloadError && isEmpty;
  const showText = showPendingText || showDownlaodErrorText || showEmptyText;
  const showLongText = showPickerHint;
  return /* @__PURE__ */ React.createElement(import_focus_trap_react.default, {
    focusTrapOptions: {
      allowOutsideClick: true
    }
  }, /* @__PURE__ */ React.createElement("div", {
    className: "module-sticker-picker",
    ref,
    style
  }, /* @__PURE__ */ React.createElement("div", {
    className: "module-sticker-picker__header"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "module-sticker-picker__header__packs"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "module-sticker-picker__header__packs__slider",
    style: {
      transform: `translateX(-${getPacksPageOffset(packsPage, packs.length)}px)`
    }
  }, hasPacks ? /* @__PURE__ */ React.createElement("button", {
    type: "button",
    onClick: recentsHandler,
    className: (0, import_classnames.default)({
      "module-sticker-picker__header__button": true,
      "module-sticker-picker__header__button--recents": true,
      "module-sticker-picker__header__button--selected": currentTab === "recents"
    }),
    "aria-label": i18n("stickers--StickerPicker--Recents")
  }) : null, packs.map((pack, i) => /* @__PURE__ */ React.createElement("button", {
    type: "button",
    key: pack.id,
    onClick: packsHandlers[i],
    className: (0, import_classnames.default)("module-sticker-picker__header__button", {
      "module-sticker-picker__header__button--selected": currentTab === pack.id,
      "module-sticker-picker__header__button--error": pack.status === "error"
    })
  }, pack.cover ? /* @__PURE__ */ React.createElement("img", {
    className: "module-sticker-picker__header__button__image",
    src: pack.cover.url,
    alt: pack.title,
    title: pack.title
  }) : /* @__PURE__ */ React.createElement("div", {
    className: "module-sticker-picker__header__button__image-placeholder"
  })))), !isUsingKeyboard && packsPage > 0 ? /* @__PURE__ */ React.createElement("button", {
    type: "button",
    className: (0, import_classnames.default)("module-sticker-picker__header__button", "module-sticker-picker__header__button--prev-page"),
    onClick: onClickPrevPackPage,
    "aria-label": i18n("stickers--StickerPicker--PrevPage")
  }) : null, !isUsingKeyboard && !isLastPacksPage(packsPage, packs.length) ? /* @__PURE__ */ React.createElement("button", {
    type: "button",
    className: (0, import_classnames.default)("module-sticker-picker__header__button", "module-sticker-picker__header__button--next-page"),
    onClick: onClickNextPackPage,
    "aria-label": i18n("stickers--StickerPicker--NextPage")
  }) : null), onClickAddPack && /* @__PURE__ */ React.createElement("button", {
    type: "button",
    ref: addPackRef,
    className: (0, import_classnames.default)("module-sticker-picker__header__button", "module-sticker-picker__header__button--add-pack", {
      "module-sticker-picker__header__button--hint": showPickerHint
    }),
    onClick: onClickAddPack,
    "aria-label": i18n("stickers--StickerPicker--AddPack")
  })), /* @__PURE__ */ React.createElement("div", {
    className: (0, import_classnames.default)("module-sticker-picker__body", {
      "module-sticker-picker__body--empty": isEmpty
    })
  }, showPickerHint ? /* @__PURE__ */ React.createElement("div", {
    className: (0, import_classnames.default)("module-sticker-picker__body__text", "module-sticker-picker__body__text--hint", {
      "module-sticker-picker__body__text--pin": showEmptyText
    })
  }, i18n("stickers--StickerPicker--Hint")) : null, !hasPacks ? /* @__PURE__ */ React.createElement("div", {
    className: "module-sticker-picker__body__text"
  }, i18n("stickers--StickerPicker--NoPacks")) : null, pendingCount > 0 ? /* @__PURE__ */ React.createElement("div", {
    className: "module-sticker-picker__body__text"
  }, i18n("stickers--StickerPicker--DownloadPending")) : null, downloadError ? /* @__PURE__ */ React.createElement("div", {
    className: (0, import_classnames.default)("module-sticker-picker__body__text", "module-sticker-picker__body__text--error")
  }, stickers.length > 0 ? i18n("stickers--StickerPicker--DownloadError") : i18n("stickers--StickerPicker--Empty")) : null, hasPacks && showEmptyText ? /* @__PURE__ */ React.createElement("div", {
    className: (0, import_classnames.default)("module-sticker-picker__body__text", {
      "module-sticker-picker__body__text--error": !isRecents
    })
  }, isRecents ? i18n("stickers--StickerPicker--NoRecents") : i18n("stickers--StickerPicker--Empty")) : null, !isEmpty ? /* @__PURE__ */ React.createElement("div", {
    className: (0, import_classnames.default)("module-sticker-picker__body__content", {
      "module-sticker-picker__body__content--under-text": showText,
      "module-sticker-picker__body__content--under-long-text": showLongText
    })
  }, stickers.map(({ packId, id, url }, index) => {
    const maybeFocusRef = index === 0 ? focusRef : void 0;
    return /* @__PURE__ */ React.createElement("button", {
      type: "button",
      ref: maybeFocusRef,
      key: `${packId}-${id}`,
      className: "module-sticker-picker__body__cell",
      onClick: () => onPickSticker(packId, id, url)
    }, /* @__PURE__ */ React.createElement("img", {
      className: "module-sticker-picker__body__cell__image",
      src: url,
      alt: packTitle
    }));
  }), Array(pendingCount).fill(0).map((_, i) => /* @__PURE__ */ React.createElement("div", {
    key: i,
    className: "module-sticker-picker__body__cell__placeholder",
    role: "presentation"
  }))) : null)));
}));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  StickerPicker
});
//# sourceMappingURL=data:application/json;base64,
