var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var GroupCallRemoteParticipant_exports = {};
__export(GroupCallRemoteParticipant_exports, {
  GroupCallRemoteParticipant: () => GroupCallRemoteParticipant
});
module.exports = __toCommonJS(GroupCallRemoteParticipant_exports);
var import_react = __toESM(require("react"));
var import_classnames = __toESM(require("classnames"));
var import_lodash = require("lodash");
var import_Colors = require("../types/Colors");
var import_CallBackgroundBlur = require("./CallBackgroundBlur");
var import_CallingAudioIndicator = require("./CallingAudioIndicator");
var import_Avatar = require("./Avatar");
var import_ConfirmationDialog = require("./ConfirmationDialog");
var import_Intl = require("./Intl");
var import_ContactName = require("./conversation/ContactName");
var import_useIntersectionObserver = require("../hooks/useIntersectionObserver");
var import_constants = require("../calling/constants");
const MAX_TIME_TO_SHOW_STALE_VIDEO_FRAMES = 5e3;
const MAX_TIME_TO_SHOW_STALE_SCREENSHARE_FRAMES = 6e4;
const GroupCallRemoteParticipant = import_react.default.memo((props) => {
  const {
    getFrameBuffer,
    getGroupCallVideoFrameSource,
    i18n,
    onVisibilityChanged
  } = props;
  const {
    acceptedMessageRequest,
    avatarPath,
    color,
    demuxId,
    hasRemoteAudio,
    hasRemoteVideo,
    isBlocked,
    isMe,
    profileName,
    sharedGroupNames,
    sharingScreen,
    title,
    videoAspectRatio
  } = props.remoteParticipant;
  const [hasReceivedVideoRecently, setHasReceivedVideoRecently] = (0, import_react.useState)(false);
  const [isWide, setIsWide] = (0, import_react.useState)(videoAspectRatio ? videoAspectRatio >= 1 : true);
  const [showBlockInfo, setShowBlockInfo] = (0, import_react.useState)(false);
  const lastReceivedVideoAt = (0, import_react.useRef)(-Infinity);
  const remoteVideoRef = (0, import_react.useRef)(null);
  const canvasContextRef = (0, import_react.useRef)(null);
  const imageDataRef = (0, import_react.useRef)(null);
  const [intersectionRef, intersectionObserverEntry] = (0, import_useIntersectionObserver.useIntersectionObserver)();
  const isVisible = intersectionObserverEntry ? intersectionObserverEntry.isIntersecting : true;
  (0, import_react.useEffect)(() => {
    onVisibilityChanged?.(demuxId, isVisible);
  }, [demuxId, isVisible, onVisibilityChanged]);
  const wantsToShowVideo = hasRemoteVideo && !isBlocked && isVisible;
  const hasVideoToShow = wantsToShowVideo && hasReceivedVideoRecently;
  const videoFrameSource = (0, import_react.useMemo)(() => getGroupCallVideoFrameSource(demuxId), [getGroupCallVideoFrameSource, demuxId]);
  const renderVideoFrame = (0, import_react.useCallback)(() => {
    const frameAge = Date.now() - lastReceivedVideoAt.current;
    const maxFrameAge = sharingScreen ? MAX_TIME_TO_SHOW_STALE_SCREENSHARE_FRAMES : MAX_TIME_TO_SHOW_STALE_VIDEO_FRAMES;
    if (frameAge > maxFrameAge) {
      setHasReceivedVideoRecently(false);
    }
    const canvasEl = remoteVideoRef.current;
    if (!canvasEl) {
      return;
    }
    const canvasContext = canvasContextRef.current;
    if (!canvasContext) {
      return;
    }
    const frameBuffer = getFrameBuffer();
    const frameDimensions = videoFrameSource.receiveVideoFrame(frameBuffer);
    if (!frameDimensions) {
      return;
    }
    const [frameWidth, frameHeight] = frameDimensions;
    if (frameWidth < 2 || frameHeight < 2 || frameWidth > import_constants.MAX_FRAME_WIDTH || frameHeight > import_constants.MAX_FRAME_HEIGHT) {
      return;
    }
    canvasEl.width = frameWidth;
    canvasEl.height = frameHeight;
    let imageData = imageDataRef.current;
    if (imageData?.width !== frameWidth || imageData?.height !== frameHeight) {
      imageData = new ImageData(frameWidth, frameHeight);
      imageDataRef.current = imageData;
    }
    imageData.data.set(frameBuffer.subarray(0, frameWidth * frameHeight * 4));
    canvasContext.putImageData(imageData, 0, 0);
    lastReceivedVideoAt.current = Date.now();
    setHasReceivedVideoRecently(true);
    setIsWide(frameWidth > frameHeight);
  }, [getFrameBuffer, videoFrameSource, sharingScreen]);
  (0, import_react.useEffect)(() => {
    if (!hasRemoteVideo) {
      setHasReceivedVideoRecently(false);
    }
  }, [hasRemoteVideo]);
  (0, import_react.useEffect)(() => {
    if (!hasRemoteVideo || !isVisible) {
      return import_lodash.noop;
    }
    let rafId = requestAnimationFrame(tick);
    function tick() {
      renderVideoFrame();
      rafId = requestAnimationFrame(tick);
    }
    return () => {
      cancelAnimationFrame(rafId);
    };
  }, [hasRemoteVideo, isVisible, renderVideoFrame, videoFrameSource]);
  let canvasStyles;
  let containerStyles;
  if (isWide) {
    canvasStyles = { width: "100%" };
  } else {
    canvasStyles = { height: "100%" };
  }
  let avatarSize;
  if (props.isInPip) {
    containerStyles = canvasStyles;
    avatarSize = import_Avatar.AvatarSize.FIFTY_TWO;
  } else {
    const { width, height } = props;
    const shorterDimension = Math.min(width, height);
    if (shorterDimension >= 240) {
      avatarSize = import_Avatar.AvatarSize.ONE_HUNDRED_TWELVE;
    } else if (shorterDimension >= 180) {
      avatarSize = import_Avatar.AvatarSize.EIGHTY;
    } else {
      avatarSize = import_Avatar.AvatarSize.FIFTY_TWO;
    }
    containerStyles = {
      height,
      width
    };
    if ("top" in props) {
      containerStyles.position = "absolute";
      containerStyles.top = props.top;
      containerStyles.left = props.left;
    }
  }
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, showBlockInfo && /* @__PURE__ */ import_react.default.createElement(import_ConfirmationDialog.ConfirmationDialog, {
    cancelText: i18n("ok"),
    i18n,
    onClose: () => {
      setShowBlockInfo(false);
    },
    title: /* @__PURE__ */ import_react.default.createElement("div", {
      className: "module-ongoing-call__group-call-remote-participant__blocked--modal-title"
    }, /* @__PURE__ */ import_react.default.createElement(import_Intl.Intl, {
      i18n,
      id: "calling__you-have-blocked",
      components: [/* @__PURE__ */ import_react.default.createElement(import_ContactName.ContactName, {
        key: "name",
        title
      })]
    }))
  }, i18n("calling__block-info")), /* @__PURE__ */ import_react.default.createElement("div", {
    className: "module-ongoing-call__group-call-remote-participant",
    ref: intersectionRef,
    style: containerStyles
  }, !props.isInPip && /* @__PURE__ */ import_react.default.createElement("div", {
    className: (0, import_classnames.default)("module-ongoing-call__group-call-remote-participant__info")
  }, /* @__PURE__ */ import_react.default.createElement(import_ContactName.ContactName, {
    module: "module-ongoing-call__group-call-remote-participant__info__contact-name",
    title
  }), /* @__PURE__ */ import_react.default.createElement(import_CallingAudioIndicator.CallingAudioIndicator, {
    hasAudio: hasRemoteAudio,
    audioLevel: props.audioLevel
  })), wantsToShowVideo && /* @__PURE__ */ import_react.default.createElement("canvas", {
    className: "module-ongoing-call__group-call-remote-participant__remote-video",
    style: {
      ...canvasStyles,
      ...hasVideoToShow ? {} : { display: "none" }
    },
    ref: (canvasEl) => {
      remoteVideoRef.current = canvasEl;
      if (canvasEl) {
        canvasContextRef.current = canvasEl.getContext("2d", {
          alpha: false,
          desynchronized: true,
          storage: "discardable"
        });
      } else {
        canvasContextRef.current = null;
      }
    }
  }), !hasVideoToShow && /* @__PURE__ */ import_react.default.createElement(import_CallBackgroundBlur.CallBackgroundBlur, {
    avatarPath,
    color
  }, isBlocked ? /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("i", {
    className: "module-ongoing-call__group-call-remote-participant__blocked"
  }), /* @__PURE__ */ import_react.default.createElement("button", {
    type: "button",
    className: "module-ongoing-call__group-call-remote-participant__blocked--info",
    onClick: () => {
      setShowBlockInfo(true);
    }
  }, i18n("moreInfo"))) : /* @__PURE__ */ import_react.default.createElement(import_Avatar.Avatar, {
    acceptedMessageRequest,
    avatarPath,
    badge: void 0,
    color: color || import_Colors.AvatarColors[0],
    noteToSelf: false,
    conversationType: "direct",
    i18n,
    isMe,
    profileName,
    title,
    sharedGroupNames,
    size: avatarSize
  }))));
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GroupCallRemoteParticipant
});
//# sourceMappingURL=data:application/json;base64,
