var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CallManager_exports = {};
__export(CallManager_exports, {
  CallManager: () => CallManager
});
module.exports = __toCommonJS(CallManager_exports);
var import_react = __toESM(require("react"));
var import_lodash = require("lodash");
var import_CallNeedPermissionScreen = require("./CallNeedPermissionScreen");
var import_CallScreen = require("./CallScreen");
var import_CallingLobby = require("./CallingLobby");
var import_CallingParticipantsList = require("./CallingParticipantsList");
var import_CallingSelectPresentingSourcesModal = require("./CallingSelectPresentingSourcesModal");
var import_CallingPip = require("./CallingPip");
var import_IncomingCallBar = require("./IncomingCallBar");
var import_SafetyNumberChangeDialog = require("./SafetyNumberChangeDialog");
var import_Calling = require("../types/Calling");
var import_missingCaseError = require("../util/missingCaseError");
const GROUP_CALL_RING_DURATION = 60 * 1e3;
const ActiveCallManager = /* @__PURE__ */ __name(({
  activeCall,
  availableCameras,
  cancelCall,
  closeNeedPermissionScreen,
  hangUpActiveCall,
  i18n,
  isGroupCallOutboundRingEnabled,
  keyChangeOk,
  getGroupCallVideoFrameSource,
  getPreferredBadge,
  getPresentingSources,
  me,
  openSystemPreferencesAction,
  renderDeviceSelection,
  renderSafetyNumberViewer,
  setGroupCallVideoRequest,
  setLocalAudio,
  setLocalPreview,
  setLocalVideo,
  setPresenting,
  setRendererCanvas,
  setOutgoingRing,
  startCall,
  switchToPresentationView,
  switchFromPresentationView,
  theme,
  toggleParticipants,
  togglePip,
  toggleScreenRecordingPermissionsDialog,
  toggleSettings,
  toggleSpeakerView
}) => {
  const {
    conversation,
    hasLocalAudio,
    hasLocalVideo,
    joinedAt,
    peekedParticipants,
    pip,
    presentingSourcesAvailable,
    settingsDialogOpen,
    showParticipantsList,
    outgoingRing
  } = activeCall;
  const cancelActiveCall = (0, import_react.useCallback)(() => {
    cancelCall({ conversationId: conversation.id });
  }, [cancelCall, conversation.id]);
  const joinActiveCall = (0, import_react.useCallback)(() => {
    startCall({
      callMode: activeCall.callMode,
      conversationId: conversation.id,
      hasLocalAudio,
      hasLocalVideo
    });
  }, [
    startCall,
    activeCall.callMode,
    conversation.id,
    hasLocalAudio,
    hasLocalVideo
  ]);
  const getGroupCallVideoFrameSourceForActiveCall = (0, import_react.useCallback)((demuxId) => {
    return getGroupCallVideoFrameSource(conversation.id, demuxId);
  }, [getGroupCallVideoFrameSource, conversation.id]);
  const setGroupCallVideoRequestForConversation = (0, import_react.useCallback)((resolutions) => {
    setGroupCallVideoRequest({
      conversationId: conversation.id,
      resolutions
    });
  }, [setGroupCallVideoRequest, conversation.id]);
  let isCallFull;
  let showCallLobby;
  let groupMembers;
  switch (activeCall.callMode) {
    case import_Calling.CallMode.Direct: {
      const { callState, callEndedReason } = activeCall;
      const ended = callState === import_Calling.CallState.Ended;
      if (ended && callEndedReason === import_Calling.CallEndedReason.RemoteHangupNeedPermission) {
        return /* @__PURE__ */ import_react.default.createElement(import_CallNeedPermissionScreen.CallNeedPermissionScreen, {
          close: closeNeedPermissionScreen,
          conversation,
          i18n
        });
      }
      showCallLobby = !callState;
      isCallFull = false;
      groupMembers = void 0;
      break;
    }
    case import_Calling.CallMode.Group: {
      showCallLobby = activeCall.joinState !== import_Calling.GroupCallJoinState.Joined;
      isCallFull = activeCall.deviceCount >= activeCall.maxDevices;
      ({ groupMembers } = activeCall);
      break;
    }
    default:
      throw (0, import_missingCaseError.missingCaseError)(activeCall);
  }
  if (showCallLobby) {
    return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement(import_CallingLobby.CallingLobby, {
      availableCameras,
      conversation,
      groupMembers,
      hasLocalAudio,
      hasLocalVideo,
      i18n,
      isGroupCall: activeCall.callMode === import_Calling.CallMode.Group,
      isGroupCallOutboundRingEnabled,
      isCallFull,
      me,
      onCallCanceled: cancelActiveCall,
      onJoinCall: joinActiveCall,
      outgoingRing,
      peekedParticipants,
      setLocalPreview,
      setLocalAudio,
      setLocalVideo,
      setOutgoingRing,
      showParticipantsList,
      toggleParticipants,
      toggleSettings
    }), settingsDialogOpen && renderDeviceSelection(), showParticipantsList && activeCall.callMode === import_Calling.CallMode.Group ? /* @__PURE__ */ import_react.default.createElement(import_CallingParticipantsList.CallingParticipantsList, {
      i18n,
      onClose: toggleParticipants,
      ourUuid: me.uuid,
      participants: peekedParticipants
    }) : null);
  }
  if (pip) {
    return /* @__PURE__ */ import_react.default.createElement(import_CallingPip.CallingPip, {
      activeCall,
      getGroupCallVideoFrameSource: getGroupCallVideoFrameSourceForActiveCall,
      hangUpActiveCall,
      hasLocalVideo,
      i18n,
      setGroupCallVideoRequest: setGroupCallVideoRequestForConversation,
      setLocalPreview,
      setRendererCanvas,
      switchToPresentationView,
      switchFromPresentationView,
      togglePip
    });
  }
  const groupCallParticipantsForParticipantsList = activeCall.callMode === import_Calling.CallMode.Group ? [
    ...activeCall.remoteParticipants.map((participant) => ({
      ...participant,
      hasRemoteAudio: participant.hasRemoteAudio,
      hasRemoteVideo: participant.hasRemoteVideo,
      presenting: participant.presenting
    })),
    {
      ...me,
      hasRemoteAudio: hasLocalAudio,
      hasRemoteVideo: hasLocalVideo,
      presenting: Boolean(activeCall.presentingSource)
    }
  ] : [];
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement(import_CallScreen.CallScreen, {
    activeCall,
    getPresentingSources,
    getGroupCallVideoFrameSource: getGroupCallVideoFrameSourceForActiveCall,
    groupMembers,
    hangUpActiveCall,
    i18n,
    joinedAt,
    me,
    openSystemPreferencesAction,
    setGroupCallVideoRequest: setGroupCallVideoRequestForConversation,
    setLocalPreview,
    setRendererCanvas,
    setLocalAudio,
    setLocalVideo,
    setPresenting,
    stickyControls: showParticipantsList,
    switchToPresentationView,
    switchFromPresentationView,
    toggleScreenRecordingPermissionsDialog,
    toggleParticipants,
    togglePip,
    toggleSettings,
    toggleSpeakerView
  }), presentingSourcesAvailable && presentingSourcesAvailable.length ? /* @__PURE__ */ import_react.default.createElement(import_CallingSelectPresentingSourcesModal.CallingSelectPresentingSourcesModal, {
    i18n,
    presentingSourcesAvailable,
    setPresenting
  }) : null, settingsDialogOpen && renderDeviceSelection(), showParticipantsList && activeCall.callMode === import_Calling.CallMode.Group ? /* @__PURE__ */ import_react.default.createElement(import_CallingParticipantsList.CallingParticipantsList, {
    i18n,
    onClose: toggleParticipants,
    ourUuid: me.uuid,
    participants: groupCallParticipantsForParticipantsList
  }) : null, activeCall.callMode === import_Calling.CallMode.Group && activeCall.conversationsWithSafetyNumberChanges.length ? /* @__PURE__ */ import_react.default.createElement(import_SafetyNumberChangeDialog.SafetyNumberChangeDialog, {
    confirmText: i18n("continueCall"),
    contacts: activeCall.conversationsWithSafetyNumberChanges,
    getPreferredBadge,
    i18n,
    onCancel: hangUpActiveCall,
    onConfirm: () => {
      keyChangeOk({ conversationId: activeCall.conversation.id });
    },
    renderSafetyNumber: renderSafetyNumberViewer,
    theme
  }) : null);
}, "ActiveCallManager");
const CallManager = /* @__PURE__ */ __name((props) => {
  const {
    acceptCall,
    activeCall,
    bounceAppIconStart,
    bounceAppIconStop,
    declineCall,
    i18n,
    incomingCall,
    notifyForCall,
    playRingtone,
    stopRingtone,
    setIsCallActive,
    setOutgoingRing
  } = props;
  const isCallActive = Boolean(activeCall);
  (0, import_react.useEffect)(() => {
    setIsCallActive(isCallActive);
  }, [isCallActive, setIsCallActive]);
  const shouldRing = getShouldRing(props);
  (0, import_react.useEffect)(() => {
    if (shouldRing) {
      playRingtone();
      return () => {
        stopRingtone();
      };
    }
    stopRingtone();
    return import_lodash.noop;
  }, [shouldRing, playRingtone, stopRingtone]);
  const mightBeRingingOutgoingGroupCall = activeCall?.callMode === import_Calling.CallMode.Group && activeCall.outgoingRing && activeCall.joinState !== import_Calling.GroupCallJoinState.NotJoined;
  (0, import_react.useEffect)(() => {
    if (!mightBeRingingOutgoingGroupCall) {
      return import_lodash.noop;
    }
    const timeout = setTimeout(() => {
      setOutgoingRing(false);
    }, GROUP_CALL_RING_DURATION);
    return () => {
      clearTimeout(timeout);
    };
  }, [mightBeRingingOutgoingGroupCall, setOutgoingRing]);
  if (activeCall) {
    return /* @__PURE__ */ import_react.default.createElement(ActiveCallManager, {
      ...props,
      activeCall
    });
  }
  if (incomingCall) {
    return /* @__PURE__ */ import_react.default.createElement(import_IncomingCallBar.IncomingCallBar, {
      acceptCall,
      bounceAppIconStart,
      bounceAppIconStop,
      declineCall,
      i18n,
      notifyForCall,
      ...incomingCall
    });
  }
  return null;
}, "CallManager");
function getShouldRing({
  activeCall,
  incomingCall
}) {
  if (incomingCall) {
    return !activeCall;
  }
  if (!activeCall) {
    return false;
  }
  switch (activeCall.callMode) {
    case import_Calling.CallMode.Direct:
      return activeCall.callState === import_Calling.CallState.Prering || activeCall.callState === import_Calling.CallState.Ringing;
    case import_Calling.CallMode.Group:
      return activeCall.outgoingRing && (activeCall.connectionState === import_Calling.GroupCallConnectionState.Connecting || activeCall.connectionState === import_Calling.GroupCallConnectionState.Connected) && activeCall.joinState !== import_Calling.GroupCallJoinState.NotJoined && !activeCall.remoteParticipants.length && (activeCall.conversation.sortedGroupMembers || []).length >= 2;
    default:
      throw (0, import_missingCaseError.missingCaseError)(activeCall);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CallManager
});
//# sourceMappingURL=data:application/json;base64,
