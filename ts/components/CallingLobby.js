var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CallingLobby_exports = {};
__export(CallingLobby_exports, {
  CallingLobby: () => CallingLobby
});
module.exports = __toCommonJS(CallingLobby_exports);
var import_react = __toESM(require("react"));
var import_focus_trap_react = __toESM(require("focus-trap-react"));
var import_classnames = __toESM(require("classnames"));
var import_CallingButton = require("./CallingButton");
var import_Tooltip = require("./Tooltip");
var import_CallBackgroundBlur = require("./CallBackgroundBlur");
var import_CallingHeader = require("./CallingHeader");
var import_CallingToast = require("./CallingToast");
var import_CallingPreCallInfo = require("./CallingPreCallInfo");
var import_CallingLobbyJoinButton = require("./CallingLobbyJoinButton");
var import_useIsOnline = require("../hooks/useIsOnline");
var KeyboardLayout = __toESM(require("../services/keyboardLayout"));
var import_isConversationTooBigToRing = require("../conversations/isConversationTooBigToRing");
const CallingLobby = /* @__PURE__ */ __name(({
  availableCameras,
  conversation,
  groupMembers,
  hasLocalAudio,
  hasLocalVideo,
  i18n,
  isGroupCall = false,
  isGroupCallOutboundRingEnabled,
  isCallFull = false,
  me,
  onCallCanceled,
  onJoinCall,
  peekedParticipants,
  setLocalAudio,
  setLocalPreview,
  setLocalVideo,
  setOutgoingRing,
  showParticipantsList,
  toggleParticipants,
  toggleSettings,
  outgoingRing
}) => {
  const [isMutedToastVisible, setIsMutedToastVisible] = import_react.default.useState(!hasLocalAudio);
  import_react.default.useEffect(() => {
    if (!isMutedToastVisible) {
      return;
    }
    const timeout = setTimeout(() => {
      setIsMutedToastVisible(false);
    }, import_CallingToast.DEFAULT_LIFETIME);
    return () => {
      clearTimeout(timeout);
    };
  }, [isMutedToastVisible]);
  const localVideoRef = import_react.default.useRef(null);
  const shouldShowLocalVideo = hasLocalVideo && availableCameras.length > 0;
  const toggleAudio = import_react.default.useCallback(() => {
    setLocalAudio({ enabled: !hasLocalAudio });
  }, [hasLocalAudio, setLocalAudio]);
  const toggleVideo = import_react.default.useCallback(() => {
    setLocalVideo({ enabled: !hasLocalVideo });
  }, [hasLocalVideo, setLocalVideo]);
  const toggleOutgoingRing = import_react.default.useCallback(() => {
    setOutgoingRing(!outgoingRing);
  }, [outgoingRing, setOutgoingRing]);
  import_react.default.useEffect(() => {
    setLocalPreview({ element: localVideoRef });
    return () => {
      setLocalPreview({ element: void 0 });
    };
  }, [setLocalPreview]);
  import_react.default.useEffect(() => {
    function handleKeyDown(event) {
      let eventHandled = false;
      const key = KeyboardLayout.lookup(event);
      if (event.shiftKey && (key === "V" || key === "v")) {
        toggleVideo();
        eventHandled = true;
      } else if (event.shiftKey && (key === "M" || key === "m")) {
        toggleAudio();
        eventHandled = true;
      }
      if (eventHandled) {
        event.preventDefault();
        event.stopPropagation();
      }
    }
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [toggleVideo, toggleAudio]);
  const isOnline = (0, import_useIsOnline.useIsOnline)();
  const [isCallConnecting, setIsCallConnecting] = import_react.default.useState(false);
  const videoButtonType = hasLocalVideo ? import_CallingButton.CallingButtonType.VIDEO_ON : availableCameras.length === 0 ? import_CallingButton.CallingButtonType.VIDEO_DISABLED : import_CallingButton.CallingButtonType.VIDEO_OFF;
  const audioButtonType = hasLocalAudio ? import_CallingButton.CallingButtonType.AUDIO_ON : import_CallingButton.CallingButtonType.AUDIO_OFF;
  const isGroupTooLargeToRing = (0, import_isConversationTooBigToRing.isConversationTooBigToRing)(conversation);
  const isRingButtonVisible = isGroupCall && isGroupCallOutboundRingEnabled && peekedParticipants.length === 0 && (groupMembers || []).length > 1;
  let preCallInfoRingMode;
  if (isGroupCall) {
    preCallInfoRingMode = outgoingRing && !isGroupTooLargeToRing ? import_CallingPreCallInfo.RingMode.WillRing : import_CallingPreCallInfo.RingMode.WillNotRing;
  } else {
    preCallInfoRingMode = import_CallingPreCallInfo.RingMode.WillRing;
  }
  let ringButtonType;
  if (isRingButtonVisible) {
    if (isGroupTooLargeToRing) {
      ringButtonType = import_CallingButton.CallingButtonType.RING_DISABLED;
    } else if (outgoingRing) {
      ringButtonType = import_CallingButton.CallingButtonType.RING_ON;
    } else {
      ringButtonType = import_CallingButton.CallingButtonType.RING_OFF;
    }
  } else {
    ringButtonType = import_CallingButton.CallingButtonType.RING_DISABLED;
  }
  const canJoin = !isCallFull && !isCallConnecting && isOnline;
  let callingLobbyJoinButtonVariant;
  if (isCallFull) {
    callingLobbyJoinButtonVariant = import_CallingLobbyJoinButton.CallingLobbyJoinButtonVariant.CallIsFull;
  } else if (isCallConnecting) {
    callingLobbyJoinButtonVariant = import_CallingLobbyJoinButton.CallingLobbyJoinButtonVariant.Loading;
  } else if (peekedParticipants.length) {
    callingLobbyJoinButtonVariant = import_CallingLobbyJoinButton.CallingLobbyJoinButtonVariant.Join;
  } else {
    callingLobbyJoinButtonVariant = import_CallingLobbyJoinButton.CallingLobbyJoinButtonVariant.Start;
  }
  return /* @__PURE__ */ import_react.default.createElement(import_focus_trap_react.default, null, /* @__PURE__ */ import_react.default.createElement("div", {
    className: "module-calling__container"
  }, shouldShowLocalVideo ? /* @__PURE__ */ import_react.default.createElement("video", {
    className: "module-CallingLobby__local-preview module-CallingLobby__local-preview--camera-is-on",
    ref: localVideoRef,
    autoPlay: true
  }) : /* @__PURE__ */ import_react.default.createElement(import_CallBackgroundBlur.CallBackgroundBlur, {
    className: "module-CallingLobby__local-preview module-CallingLobby__local-preview--camera-is-off",
    avatarPath: me.avatarPath,
    color: me.color
  }), /* @__PURE__ */ import_react.default.createElement(import_CallingToast.CallingToast, {
    isVisible: isMutedToastVisible,
    onClick: () => setIsMutedToastVisible(false)
  }, i18n("calling__lobby-automatically-muted-because-there-are-a-lot-of-people")), /* @__PURE__ */ import_react.default.createElement(import_CallingHeader.CallingHeader, {
    i18n,
    isGroupCall,
    participantCount: peekedParticipants.length,
    showParticipantsList,
    toggleParticipants,
    toggleSettings,
    onCancel: onCallCanceled
  }), /* @__PURE__ */ import_react.default.createElement(import_CallingPreCallInfo.CallingPreCallInfo, {
    conversation,
    groupMembers,
    i18n,
    isCallFull,
    me,
    peekedParticipants,
    ringMode: preCallInfoRingMode
  }), /* @__PURE__ */ import_react.default.createElement("div", {
    className: (0, import_classnames.default)("module-CallingLobby__camera-is-off", `module-CallingLobby__camera-is-off--${shouldShowLocalVideo ? "invisible" : "visible"}`)
  }, i18n("calling__your-video-is-off")), /* @__PURE__ */ import_react.default.createElement("div", {
    className: "module-calling__buttons module-calling__buttons--inline"
  }, /* @__PURE__ */ import_react.default.createElement(import_CallingButton.CallingButton, {
    buttonType: videoButtonType,
    i18n,
    onClick: toggleVideo,
    tooltipDirection: import_Tooltip.TooltipPlacement.Top
  }), /* @__PURE__ */ import_react.default.createElement(import_CallingButton.CallingButton, {
    buttonType: audioButtonType,
    i18n,
    onClick: toggleAudio,
    tooltipDirection: import_Tooltip.TooltipPlacement.Top
  }), /* @__PURE__ */ import_react.default.createElement(import_CallingButton.CallingButton, {
    buttonType: ringButtonType,
    i18n,
    isVisible: isRingButtonVisible,
    onClick: toggleOutgoingRing,
    tooltipDirection: import_Tooltip.TooltipPlacement.Top
  })), /* @__PURE__ */ import_react.default.createElement(import_CallingLobbyJoinButton.CallingLobbyJoinButton, {
    disabled: !canJoin,
    i18n,
    onClick: () => {
      setIsCallConnecting(true);
      onJoinCall();
    },
    variant: callingLobbyJoinButtonVariant
  })));
}, "CallingLobby");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CallingLobby
});
//# sourceMappingURL=data:application/json;base64,
