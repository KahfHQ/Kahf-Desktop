var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LeftPaneChooseGroupMembersHelper_exports = {};
__export(LeftPaneChooseGroupMembersHelper_exports, {
  LeftPaneChooseGroupMembersHelper: () => LeftPaneChooseGroupMembersHelper
});
module.exports = __toCommonJS(LeftPaneChooseGroupMembersHelper_exports);
var import_react = __toESM(require("react"));
var import_LeftPaneHelper = require("./LeftPaneHelper");
var import_ConversationList = require("../ConversationList");
var import_ContactCheckbox = require("../conversationList/ContactCheckbox");
var import_ContactPills = require("../ContactPills");
var import_ContactPill = require("../ContactPill");
var import_SearchInput = require("../SearchInput");
var import_AddGroupMemberErrorDialog = require("../AddGroupMemberErrorDialog");
var import_Button = require("../Button");
var import_Username = require("../../types/Username");
var import_libphonenumberInstance = require("../../util/libphonenumberInstance");
var import_uuidFetchState = require("../../util/uuidFetchState");
var import_limits = require("../../groups/limits");
class LeftPaneChooseGroupMembersHelper extends import_LeftPaneHelper.LeftPaneHelper {
  constructor({
    candidateContacts,
    isShowingMaximumGroupSizeModal,
    isShowingRecommendedGroupSizeModal,
    isUsernamesEnabled,
    searchTerm,
    regionCode,
    selectedContacts,
    uuidFetchState
  }) {
    super();
    this.uuidFetchState = uuidFetchState;
    this.candidateContacts = candidateContacts;
    this.isShowingMaximumGroupSizeModal = isShowingMaximumGroupSizeModal;
    this.isShowingRecommendedGroupSizeModal = isShowingRecommendedGroupSizeModal;
    this.searchTerm = searchTerm;
    const phoneNumber = (0, import_libphonenumberInstance.parseAndFormatPhoneNumber)(searchTerm, regionCode);
    if (phoneNumber) {
      this.isPhoneNumberChecked = phoneNumber.isValid && selectedContacts.some((contact) => contact.e164 === phoneNumber.e164);
      const isVisible = this.candidateContacts.every((contact) => contact.e164 !== phoneNumber.e164);
      if (isVisible) {
        this.phoneNumber = phoneNumber;
      }
    } else {
      this.isPhoneNumberChecked = false;
    }
    if (!this.phoneNumber && isUsernamesEnabled) {
      const username = (0, import_Username.getUsernameFromSearch)(searchTerm);
      const isVisible = this.candidateContacts.every((contact) => contact.username !== username);
      if (isVisible) {
        this.username = username;
      }
      this.isUsernameChecked = selectedContacts.some((contact) => contact.username === this.username);
    } else {
      this.isUsernameChecked = false;
    }
    this.selectedContacts = selectedContacts;
    this.selectedConversationIdsSet = new Set(selectedContacts.map((contact) => contact.id));
  }
  getHeaderContents({
    i18n,
    startComposing
  }) {
    const backButtonLabel = i18n("chooseGroupMembers__back-button");
    return /* @__PURE__ */ import_react.default.createElement("div", {
      className: "module-left-pane__header__contents"
    }, /* @__PURE__ */ import_react.default.createElement("button", {
      "aria-label": backButtonLabel,
      className: "module-left-pane__header__contents__back-button",
      onClick: this.getBackAction({ startComposing }),
      title: backButtonLabel,
      type: "button"
    }), /* @__PURE__ */ import_react.default.createElement("div", {
      className: "module-left-pane__header__contents__text"
    }, i18n("chooseGroupMembers__title")));
  }
  getBackAction({
    startComposing
  }) {
    return startComposing;
  }
  getSearchInput({
    i18n,
    onChangeComposeSearchTerm
  }) {
    return /* @__PURE__ */ import_react.default.createElement(import_SearchInput.SearchInput, {
      i18n,
      moduleClassName: "module-left-pane__compose-search-form",
      onChange: onChangeComposeSearchTerm,
      placeholder: i18n("contactSearchPlaceholder"),
      ref: focusRef,
      value: this.searchTerm
    });
  }
  getPreRowsNode({
    closeMaximumGroupSizeModal,
    closeRecommendedGroupSizeModal,
    i18n,
    removeSelectedContact
  }) {
    let modalNode;
    if (this.isShowingMaximumGroupSizeModal) {
      modalNode = /* @__PURE__ */ import_react.default.createElement(import_AddGroupMemberErrorDialog.AddGroupMemberErrorDialog, {
        i18n,
        maximumNumberOfContacts: this.getMaximumNumberOfContacts(),
        mode: import_AddGroupMemberErrorDialog.AddGroupMemberErrorDialogMode.MaximumGroupSize,
        onClose: closeMaximumGroupSizeModal
      });
    } else if (this.isShowingRecommendedGroupSizeModal) {
      modalNode = /* @__PURE__ */ import_react.default.createElement(import_AddGroupMemberErrorDialog.AddGroupMemberErrorDialog, {
        i18n,
        recommendedMaximumNumberOfContacts: this.getRecommendedMaximumNumberOfContacts(),
        mode: import_AddGroupMemberErrorDialog.AddGroupMemberErrorDialogMode.RecommendedMaximumGroupSize,
        onClose: closeRecommendedGroupSizeModal
      });
    }
    return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, Boolean(this.selectedContacts.length) && /* @__PURE__ */ import_react.default.createElement(import_ContactPills.ContactPills, null, this.selectedContacts.map((contact) => /* @__PURE__ */ import_react.default.createElement(import_ContactPill.ContactPill, {
      key: contact.id,
      acceptedMessageRequest: contact.acceptedMessageRequest,
      avatarPath: contact.avatarPath,
      color: contact.color,
      firstName: contact.firstName,
      i18n,
      id: contact.id,
      isMe: contact.isMe,
      name: contact.name,
      phoneNumber: contact.phoneNumber,
      profileName: contact.profileName,
      sharedGroupNames: contact.sharedGroupNames,
      title: contact.title,
      onClickRemove: removeSelectedContact
    }))), this.getRowCount() ? null : /* @__PURE__ */ import_react.default.createElement("div", {
      className: "module-left-pane__compose-no-contacts"
    }, i18n("noContactsFound")), modalNode);
  }
  getFooterContents({
    i18n,
    startSettingGroupMetadata
  }) {
    return /* @__PURE__ */ import_react.default.createElement(import_Button.Button, {
      disabled: this.hasExceededMaximumNumberOfContacts(),
      onClick: startSettingGroupMetadata
    }, this.selectedContacts.length ? i18n("chooseGroupMembers__next") : i18n("chooseGroupMembers__skip"));
  }
  getRowCount() {
    let rowCount = 0;
    if (this.phoneNumber) {
      rowCount += 2;
    }
    if (this.username) {
      rowCount += 2;
    }
    if (this.candidateContacts.length) {
      rowCount += 1 + this.candidateContacts.length;
    }
    if (rowCount > 0) {
      rowCount += 1;
    }
    return rowCount;
  }
  getRow(actualRowIndex) {
    if (!this.candidateContacts.length && !this.phoneNumber && !this.username) {
      return void 0;
    }
    const rowCount = this.getRowCount();
    if (actualRowIndex === rowCount - 1) {
      return { type: import_ConversationList.RowType.Blank };
    }
    let virtualRowIndex = actualRowIndex;
    if (this.candidateContacts.length) {
      if (virtualRowIndex === 0) {
        return {
          type: import_ConversationList.RowType.Header,
          i18nKey: "contactsHeader"
        };
      }
      if (virtualRowIndex <= this.candidateContacts.length) {
        const contact = this.candidateContacts[virtualRowIndex - 1];
        const isChecked = this.selectedConversationIdsSet.has(contact.id);
        const disabledReason = !isChecked && this.hasSelectedMaximumNumberOfContacts() ? import_ContactCheckbox.ContactCheckboxDisabledReason.MaximumContactsSelected : void 0;
        return {
          type: import_ConversationList.RowType.ContactCheckbox,
          contact,
          isChecked,
          disabledReason
        };
      }
      virtualRowIndex -= 1 + this.candidateContacts.length;
    }
    if (this.phoneNumber) {
      if (virtualRowIndex === 0) {
        return {
          type: import_ConversationList.RowType.Header,
          i18nKey: "findByPhoneNumberHeader"
        };
      }
      if (virtualRowIndex === 1) {
        return {
          type: import_ConversationList.RowType.PhoneNumberCheckbox,
          isChecked: this.isPhoneNumberChecked,
          isFetching: (0, import_uuidFetchState.isFetchingByE164)(this.uuidFetchState, this.phoneNumber.e164),
          phoneNumber: this.phoneNumber
        };
      }
      virtualRowIndex -= 2;
    }
    if (this.username) {
      if (virtualRowIndex === 0) {
        return {
          type: import_ConversationList.RowType.Header,
          i18nKey: "findByUsernameHeader"
        };
      }
      if (virtualRowIndex === 1) {
        return {
          type: import_ConversationList.RowType.UsernameCheckbox,
          isChecked: this.isUsernameChecked,
          isFetching: (0, import_uuidFetchState.isFetchingByUsername)(this.uuidFetchState, this.username),
          username: this.username
        };
      }
      virtualRowIndex -= 2;
    }
    return void 0;
  }
  getConversationAndMessageAtIndex(..._args) {
    return void 0;
  }
  getConversationAndMessageInDirection(..._args) {
    return void 0;
  }
  shouldRecomputeRowHeights(_old) {
    return false;
  }
  hasSelectedMaximumNumberOfContacts() {
    return this.selectedContacts.length >= this.getMaximumNumberOfContacts();
  }
  hasExceededMaximumNumberOfContacts() {
    return this.selectedContacts.length > this.getMaximumNumberOfContacts();
  }
  getRecommendedMaximumNumberOfContacts() {
    return (0, import_limits.getGroupSizeRecommendedLimit)(151) - 1;
  }
  getMaximumNumberOfContacts() {
    return (0, import_limits.getGroupSizeHardLimit)(1001) - 1;
  }
}
function focusRef(el) {
  if (el) {
    el.focus();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LeftPaneChooseGroupMembersHelper
});
//# sourceMappingURL=data:application/json;base64,
