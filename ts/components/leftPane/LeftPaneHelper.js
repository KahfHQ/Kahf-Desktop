var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LeftPaneHelper_exports = {};
__export(LeftPaneHelper_exports, {
  FindDirection: () => FindDirection,
  LeftPaneHelper: () => LeftPaneHelper
});
module.exports = __toCommonJS(LeftPaneHelper_exports);
var FindDirection = /* @__PURE__ */ ((FindDirection2) => {
  FindDirection2[FindDirection2["Up"] = 0] = "Up";
  FindDirection2[FindDirection2["Down"] = 1] = "Down";
  return FindDirection2;
})(FindDirection || {});
class LeftPaneHelper {
  getHeaderContents(_) {
    return null;
  }
  getSearchInput(_) {
    return null;
  }
  getBackAction(_) {
    return void 0;
  }
  getPreRowsNode(_) {
    return null;
  }
  getFooterContents(_) {
    return null;
  }
  getRowIndexToScrollTo(_selectedConversationId) {
    return void 0;
  }
  isScrollable() {
    return true;
  }
  requiresFullWidth() {
    return true;
  }
  onKeyDown(_event, _options) {
    return void 0;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FindDirection,
  LeftPaneHelper
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiTGVmdFBhbmVIZWxwZXIudHN4Il0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIyIFNpZ25hbCBNZXNzZW5nZXIsIExMQ1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFHUEwtMy4wLW9ubHlcblxuaW1wb3J0IHR5cGUgeyBDaGFuZ2VFdmVudCwgUmVhY3RDaGlsZCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHR5cGUgeyBSb3cgfSBmcm9tICcuLi9Db252ZXJzYXRpb25MaXN0JztcbmltcG9ydCB0eXBlIHsgTG9jYWxpemVyVHlwZSB9IGZyb20gJy4uLy4uL3R5cGVzL1V0aWwnO1xuaW1wb3J0IHR5cGUge1xuICBEZWxldGVBdmF0YXJGcm9tRGlza0FjdGlvblR5cGUsXG4gIFJlcGxhY2VBdmF0YXJBY3Rpb25UeXBlLFxuICBTYXZlQXZhdGFyVG9EaXNrQWN0aW9uVHlwZSxcbn0gZnJvbSAnLi4vLi4vdHlwZXMvQXZhdGFyJztcbmltcG9ydCB0eXBlIHsgU2hvd0NvbnZlcnNhdGlvblR5cGUgfSBmcm9tICcuLi8uLi9zdGF0ZS9kdWNrcy9jb252ZXJzYXRpb25zJztcblxuZXhwb3J0IGVudW0gRmluZERpcmVjdGlvbiB7XG4gIFVwLFxuICBEb3duLFxufVxuXG5leHBvcnQgdHlwZSBUb0ZpbmRUeXBlID0ge1xuICBkaXJlY3Rpb246IEZpbmREaXJlY3Rpb247XG4gIHVucmVhZE9ubHk6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTGVmdFBhbmVIZWxwZXI8VD4ge1xuICBnZXRIZWFkZXJDb250ZW50cyhcbiAgICBfOiBSZWFkb25seTx7XG4gICAgICBpMThuOiBMb2NhbGl6ZXJUeXBlO1xuICAgICAgc2hvd0luYm94OiAoKSA9PiB2b2lkO1xuICAgICAgc3RhcnRDb21wb3Npbmc6ICgpID0+IHZvaWQ7XG4gICAgICBzaG93Q2hvb3NlR3JvdXBNZW1iZXJzOiAoKSA9PiB2b2lkO1xuICAgIH0+XG4gICk6IG51bGwgfCBSZWFjdENoaWxkIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdldFNlYXJjaElucHV0KFxuICAgIF86IFJlYWRvbmx5PHtcbiAgICAgIGNsZWFyQ29udmVyc2F0aW9uU2VhcmNoOiAoKSA9PiB1bmtub3duO1xuICAgICAgY2xlYXJTZWFyY2g6ICgpID0+IHVua25vd247XG4gICAgICBpMThuOiBMb2NhbGl6ZXJUeXBlO1xuICAgICAgb25DaGFuZ2VDb21wb3NlU2VhcmNoVGVybTogKFxuICAgICAgICBldmVudDogQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD5cbiAgICAgICkgPT4gdW5rbm93bjtcbiAgICAgIHVwZGF0ZVNlYXJjaFRlcm06IChzZWFyY2hUZXJtOiBzdHJpbmcpID0+IHVua25vd247XG4gICAgICBzaG93Q29udmVyc2F0aW9uOiBTaG93Q29udmVyc2F0aW9uVHlwZTtcbiAgICB9PlxuICApOiBudWxsIHwgUmVhY3RDaGlsZCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXRCYWNrQWN0aW9uKFxuICAgIF86IFJlYWRvbmx5PHtcbiAgICAgIHNob3dJbmJveDogKCkgPT4gdm9pZDtcbiAgICAgIHN0YXJ0Q29tcG9zaW5nOiAoKSA9PiB2b2lkO1xuICAgICAgc2hvd0Nob29zZUdyb3VwTWVtYmVyczogKCkgPT4gdm9pZDtcbiAgICB9PlxuICApOiB1bmRlZmluZWQgfCAoKCkgPT4gdm9pZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBnZXRQcmVSb3dzTm9kZShcbiAgICBfOiBSZWFkb25seTx7XG4gICAgICBjbGVhckNvbnZlcnNhdGlvblNlYXJjaDogKCkgPT4gdW5rbm93bjtcbiAgICAgIGNsZWFyR3JvdXBDcmVhdGlvbkVycm9yOiAoKSA9PiB2b2lkO1xuICAgICAgY2xlYXJTZWFyY2g6ICgpID0+IHVua25vd247XG4gICAgICBjbG9zZU1heGltdW1Hcm91cFNpemVNb2RhbDogKCkgPT4gdW5rbm93bjtcbiAgICAgIGNsb3NlUmVjb21tZW5kZWRHcm91cFNpemVNb2RhbDogKCkgPT4gdW5rbm93bjtcbiAgICAgIGNvbXBvc2VEZWxldGVBdmF0YXJGcm9tRGlzazogRGVsZXRlQXZhdGFyRnJvbURpc2tBY3Rpb25UeXBlO1xuICAgICAgY29tcG9zZVJlcGxhY2VBdmF0YXI6IFJlcGxhY2VBdmF0YXJBY3Rpb25UeXBlO1xuICAgICAgY29tcG9zZVNhdmVBdmF0YXJUb0Rpc2s6IFNhdmVBdmF0YXJUb0Rpc2tBY3Rpb25UeXBlO1xuICAgICAgY3JlYXRlR3JvdXA6ICgpID0+IHVua25vd247XG4gICAgICBpMThuOiBMb2NhbGl6ZXJUeXBlO1xuICAgICAgcmVtb3ZlU2VsZWN0ZWRDb250YWN0OiAoXzogc3RyaW5nKSA9PiB1bmtub3duO1xuICAgICAgc2V0Q29tcG9zZUdyb3VwQXZhdGFyOiAoXzogdW5kZWZpbmVkIHwgVWludDhBcnJheSkgPT4gdW5rbm93bjtcbiAgICAgIHNldENvbXBvc2VHcm91cEV4cGlyZVRpbWVyOiAoXzogbnVtYmVyKSA9PiB2b2lkO1xuICAgICAgc2V0Q29tcG9zZUdyb3VwTmFtZTogKF86IHN0cmluZykgPT4gdW5rbm93bjtcbiAgICAgIHRvZ2dsZUNvbXBvc2VFZGl0aW5nQXZhdGFyOiAoKSA9PiB1bmtub3duO1xuICAgIH0+XG4gICk6IG51bGwgfCBSZWFjdENoaWxkIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdldEZvb3RlckNvbnRlbnRzKFxuICAgIF86IFJlYWRvbmx5PHtcbiAgICAgIGkxOG46IExvY2FsaXplclR5cGU7XG4gICAgICBzdGFydFNldHRpbmdHcm91cE1ldGFkYXRhOiAoKSA9PiB2b2lkO1xuICAgICAgY3JlYXRlR3JvdXA6ICgpID0+IHVua25vd247XG4gICAgfT5cbiAgKTogbnVsbCB8IFJlYWN0Q2hpbGQge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgYWJzdHJhY3QgZ2V0Um93Q291bnQoKTogbnVtYmVyO1xuXG4gIGFic3RyYWN0IGdldFJvdyhyb3dJbmRleDogbnVtYmVyKTogdW5kZWZpbmVkIHwgUm93O1xuXG4gIGdldFJvd0luZGV4VG9TY3JvbGxUbyhcbiAgICBfc2VsZWN0ZWRDb252ZXJzYXRpb25JZDogdW5kZWZpbmVkIHwgc3RyaW5nXG4gICk6IHVuZGVmaW5lZCB8IG51bWJlciB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlzU2Nyb2xsYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJlcXVpcmVzRnVsbFdpZHRoKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgb25LZXlEb3duKFxuICAgIF9ldmVudDogS2V5Ym9hcmRFdmVudCxcbiAgICBfb3B0aW9uczogUmVhZG9ubHk8e1xuICAgICAgc2VhcmNoSW5Db252ZXJzYXRpb246IChjb252ZXJzYXRpb25JZDogc3RyaW5nKSA9PiB1bmtub3duO1xuICAgICAgc2VsZWN0ZWRDb252ZXJzYXRpb25JZDogdW5kZWZpbmVkIHwgc3RyaW5nO1xuICAgICAgc3RhcnRTZWFyY2g6ICgpID0+IHVua25vd247XG4gICAgfT5cbiAgKTogdm9pZCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGFic3RyYWN0IGdldENvbnZlcnNhdGlvbkFuZE1lc3NhZ2VBdEluZGV4KFxuICAgIGNvbnZlcnNhdGlvbkluZGV4OiBudW1iZXJcbiAgKTogdW5kZWZpbmVkIHwgeyBjb252ZXJzYXRpb25JZDogc3RyaW5nOyBtZXNzYWdlSWQ/OiBzdHJpbmcgfTtcblxuICBhYnN0cmFjdCBnZXRDb252ZXJzYXRpb25BbmRNZXNzYWdlSW5EaXJlY3Rpb24oXG4gICAgdG9GaW5kOiBSZWFkb25seTxUb0ZpbmRUeXBlPixcbiAgICBzZWxlY3RlZENvbnZlcnNhdGlvbklkOiB1bmRlZmluZWQgfCBzdHJpbmcsXG4gICAgc2VsZWN0ZWRNZXNzYWdlSWQ6IHVuZGVmaW5lZCB8IHN0cmluZ1xuICApOiB1bmRlZmluZWQgfCB7IGNvbnZlcnNhdGlvbklkOiBzdHJpbmc7IG1lc3NhZ2VJZD86IHN0cmluZyB9O1xuXG4gIGFic3RyYWN0IHNob3VsZFJlY29tcHV0ZVJvd0hlaWdodHMob2xkOiBSZWFkb25seTxUPik6IGJvb2xlYW47XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFjTyxJQUFLLGdCQUFMLGtCQUFLLG1CQUFMO0FBQ0w7QUFDQTtBQUZVO0FBQUE7QUFVTCxNQUFlLGVBQWtCO0FBQUEsRUFDdEMsa0JBQ0UsR0FNbUI7QUFDbkIsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLGVBQ0UsR0FVbUI7QUFDbkIsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLGNBQ0UsR0FLMEI7QUFDMUIsV0FBTztBQUFBLEVBQ1Q7QUFBQSxFQUVBLGVBQ0UsR0FpQm1CO0FBQ25CLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxrQkFDRSxHQUttQjtBQUNuQixXQUFPO0FBQUEsRUFDVDtBQUFBLEVBTUEsc0JBQ0UseUJBQ29CO0FBQ3BCLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxlQUF3QjtBQUN0QixXQUFPO0FBQUEsRUFDVDtBQUFBLEVBRUEsb0JBQTZCO0FBQzNCLFdBQU87QUFBQSxFQUNUO0FBQUEsRUFFQSxVQUNFLFFBQ0EsVUFLTTtBQUNOLFdBQU87QUFBQSxFQUNUO0FBYUY7QUE3R08iLAogICJuYW1lcyI6IFtdCn0K
