var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LeftPaneArchiveHelper_exports = {};
__export(LeftPaneArchiveHelper_exports, {
  LeftPaneArchiveHelper: () => LeftPaneArchiveHelper
});
module.exports = __toCommonJS(LeftPaneArchiveHelper_exports);
var import_react = __toESM(require("react"));
var import_lodash = require("lodash");
var import_LeftPaneHelper = require("./LeftPaneHelper");
var import_getConversationInDirection = require("./getConversationInDirection");
var import_ConversationList = require("../ConversationList");
var import_LeftPaneSearchInput = require("../LeftPaneSearchInput");
var import_LeftPaneSearchHelper = require("./LeftPaneSearchHelper");
var KeyboardLayout = __toESM(require("../../services/keyboardLayout"));
class LeftPaneArchiveHelper extends import_LeftPaneHelper.LeftPaneHelper {
  constructor(props) {
    super();
    this.archivedConversations = props.archivedConversations;
    this.searchConversation = props.searchConversation;
    this.searchTerm = props.searchTerm;
    this.startSearchCounter = props.startSearchCounter;
    if ("conversationResults" in props) {
      this.searchHelper = new import_LeftPaneSearchHelper.LeftPaneSearchHelper(props);
    }
  }
  getHeaderContents({
    i18n,
    showInbox
  }) {
    return /* @__PURE__ */ import_react.default.createElement("div", {
      className: "module-left-pane__header__contents"
    }, /* @__PURE__ */ import_react.default.createElement("button", {
      onClick: this.getBackAction({ showInbox }),
      className: "module-left-pane__header__contents__back-button",
      title: i18n("backToInbox"),
      "aria-label": i18n("backToInbox"),
      type: "button"
    }), /* @__PURE__ */ import_react.default.createElement("div", {
      className: "module-left-pane__header__contents__text"
    }, i18n("archivedConversations")));
  }
  getSearchInput({
    clearConversationSearch,
    clearSearch,
    i18n,
    updateSearchTerm,
    showConversation
  }) {
    if (!this.searchConversation) {
      return null;
    }
    return /* @__PURE__ */ import_react.default.createElement(import_LeftPaneSearchInput.LeftPaneSearchInput, {
      clearConversationSearch,
      clearSearch,
      i18n,
      searchConversation: this.searchConversation,
      searchTerm: this.searchTerm,
      showConversation,
      startSearchCounter: this.startSearchCounter,
      updateSearchTerm
    });
  }
  getBackAction({ showInbox }) {
    return showInbox;
  }
  getPreRowsNode({
    i18n
  }) {
    if (this.searchHelper) {
      return this.searchHelper.getPreRowsNode({ i18n });
    }
    return /* @__PURE__ */ import_react.default.createElement("div", {
      className: "module-left-pane__archive-helper-text"
    }, this.getRowCount() > 0 ? i18n("archiveHelperText") : i18n("noArchivedConversations"));
  }
  getRowCount() {
    return this.searchHelper?.getRowCount() ?? this.archivedConversations.length;
  }
  getRow(rowIndex) {
    if (this.searchHelper) {
      return this.searchHelper.getRow(rowIndex);
    }
    const conversation = this.archivedConversations[rowIndex];
    return conversation ? {
      type: import_ConversationList.RowType.Conversation,
      conversation
    } : void 0;
  }
  getRowIndexToScrollTo(selectedConversationId) {
    if (this.searchHelper) {
      return this.searchHelper.getRowIndexToScrollTo(selectedConversationId);
    }
    if (!selectedConversationId) {
      return void 0;
    }
    const result = this.archivedConversations.findIndex((conversation) => conversation.id === selectedConversationId);
    return result === -1 ? void 0 : result;
  }
  getConversationAndMessageAtIndex(conversationIndex) {
    const { archivedConversations, searchHelper } = this;
    if (searchHelper) {
      return searchHelper.getConversationAndMessageAtIndex(conversationIndex);
    }
    const conversation = archivedConversations[conversationIndex] || (0, import_lodash.last)(archivedConversations);
    return conversation ? { conversationId: conversation.id } : void 0;
  }
  getConversationAndMessageInDirection(toFind, selectedConversationId, selectedMessageId) {
    if (this.searchHelper) {
      return this.searchHelper.getConversationAndMessageInDirection(toFind, selectedConversationId, selectedMessageId);
    }
    return (0, import_getConversationInDirection.getConversationInDirection)(this.archivedConversations, toFind, selectedConversationId);
  }
  shouldRecomputeRowHeights(old) {
    const hasSearchingChanged = "conversationResults" in old !== Boolean(this.searchHelper);
    if (hasSearchingChanged) {
      return true;
    }
    if ("conversationResults" in old && this.searchHelper) {
      return this.searchHelper.shouldRecomputeRowHeights(old);
    }
    return false;
  }
  onKeyDown(event, {
    searchInConversation,
    selectedConversationId
  }) {
    if (!selectedConversationId) {
      return;
    }
    const { ctrlKey, metaKey, shiftKey } = event;
    const commandKey = window.platform === "darwin" && metaKey;
    const controlKey = window.platform !== "darwin" && ctrlKey;
    const commandOrCtrl = commandKey || controlKey;
    const commandAndCtrl = commandKey && ctrlKey;
    const key = KeyboardLayout.lookup(event);
    if (commandOrCtrl && !commandAndCtrl && shiftKey && (key === "f" || key === "F") && this.archivedConversations.some(({ id }) => id === selectedConversationId)) {
      searchInConversation(selectedConversationId);
      event.preventDefault();
      event.stopPropagation();
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LeftPaneArchiveHelper
});
//# sourceMappingURL=data:application/json;base64,
