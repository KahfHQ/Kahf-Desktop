var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LeftPaneSearchHelper_exports = {};
__export(LeftPaneSearchHelper_exports, {
  LeftPaneSearchHelper: () => LeftPaneSearchHelper
});
module.exports = __toCommonJS(LeftPaneSearchHelper_exports);
var import_react = __toESM(require("react"));
var import_LeftPaneHelper = require("./LeftPaneHelper");
var import_ConversationList = require("../ConversationList");
var import_handleKeydownForSearch = require("./handleKeydownForSearch");
var import_LeftPaneSearchInput = require("../LeftPaneSearchInput");
var import_Intl = require("../Intl");
var import_Emojify = require("../conversation/Emojify");
var import_assert = require("../../util/assert");
const SEARCH_RESULTS_FAKE_ROW_COUNT = 99;
const searchResultKeys = ["conversationResults", "contactResults", "messageResults"];
class LeftPaneSearchHelper extends import_LeftPaneHelper.LeftPaneHelper {
  constructor({
    contactResults,
    conversationResults,
    messageResults,
    primarySendsSms,
    searchConversation,
    searchConversationName,
    searchDisabled,
    searchTerm,
    startSearchCounter
  }) {
    super();
    this.contactResults = contactResults;
    this.conversationResults = conversationResults;
    this.messageResults = messageResults;
    this.primarySendsSms = primarySendsSms;
    this.searchConversation = searchConversation;
    this.searchConversationName = searchConversationName;
    this.searchDisabled = searchDisabled;
    this.searchTerm = searchTerm;
    this.startSearchCounter = startSearchCounter;
    this.onEnterKeyDown = this.onEnterKeyDown.bind(this);
  }
  getSearchInput({
    clearConversationSearch,
    clearSearch,
    i18n,
    showConversation,
    updateSearchTerm
  }) {
    return /* @__PURE__ */ import_react.default.createElement(import_LeftPaneSearchInput.LeftPaneSearchInput, {
      clearConversationSearch,
      clearSearch,
      disabled: this.searchDisabled,
      i18n,
      onEnterKeyDown: this.onEnterKeyDown,
      searchConversation: this.searchConversation,
      searchTerm: this.searchTerm,
      showConversation,
      startSearchCounter: this.startSearchCounter,
      updateSearchTerm
    });
  }
  getPreRowsNode({
    i18n
  }) {
    const mightHaveSearchResults = this.allResults().some((searchResult) => searchResult.isLoading || searchResult.results.length);
    if (mightHaveSearchResults) {
      return null;
    }
    const { searchConversationName, primarySendsSms, searchTerm } = this;
    let noResults;
    if (searchConversationName) {
      noResults = /* @__PURE__ */ import_react.default.createElement(import_Intl.Intl, {
        id: "noSearchResultsInConversation",
        i18n,
        components: {
          searchTerm,
          conversationName: /* @__PURE__ */ import_react.default.createElement(import_Emojify.Emojify, {
            key: "item-1",
            text: searchConversationName
          })
        }
      });
    } else {
      noResults = /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("div", null, i18n("noSearchResults", [searchTerm])), primarySendsSms && /* @__PURE__ */ import_react.default.createElement("div", {
        className: "module-left-pane__no-search-results__sms-only"
      }, i18n("noSearchResults--sms-only")));
    }
    return !searchConversationName || searchTerm ? /* @__PURE__ */ import_react.default.createElement("div", {
      tabIndex: -1,
      className: "module-left-pane__no-search-results",
      key: searchTerm
    }, noResults) : null;
  }
  getRowCount() {
    if (this.isLoading()) {
      return 1 + SEARCH_RESULTS_FAKE_ROW_COUNT;
    }
    return this.allResults().reduce((result, searchResults) => result + getRowCountForLoadedSearchResults(searchResults), 0);
  }
  getRowIndexToScrollTo(_selectedConversationId) {
    return void 0;
  }
  getRow(rowIndex) {
    const { conversationResults, contactResults, messageResults } = this;
    if (this.isLoading()) {
      if (rowIndex === 0) {
        return { type: import_ConversationList.RowType.SearchResultsLoadingFakeHeader };
      }
      if (rowIndex + 1 <= SEARCH_RESULTS_FAKE_ROW_COUNT) {
        return { type: import_ConversationList.RowType.SearchResultsLoadingFakeRow };
      }
      return void 0;
    }
    const conversationRowCount = getRowCountForLoadedSearchResults(conversationResults);
    const contactRowCount = getRowCountForLoadedSearchResults(contactResults);
    const messageRowCount = getRowCountForLoadedSearchResults(messageResults);
    if (rowIndex < conversationRowCount) {
      if (rowIndex === 0) {
        return {
          type: import_ConversationList.RowType.Header,
          i18nKey: "conversationsHeader"
        };
      }
      (0, import_assert.assert)(!conversationResults.isLoading, "We shouldn't get here with conversation results still loading");
      const conversation = conversationResults.results[rowIndex - 1];
      return conversation ? {
        type: import_ConversationList.RowType.Conversation,
        conversation
      } : void 0;
    }
    if (rowIndex < conversationRowCount + contactRowCount) {
      const localIndex2 = rowIndex - conversationRowCount;
      if (localIndex2 === 0) {
        return {
          type: import_ConversationList.RowType.Header,
          i18nKey: "contactsHeader"
        };
      }
      (0, import_assert.assert)(!contactResults.isLoading, "We shouldn't get here with contact results still loading");
      const conversation = contactResults.results[localIndex2 - 1];
      return conversation ? {
        type: import_ConversationList.RowType.Conversation,
        conversation
      } : void 0;
    }
    if (rowIndex >= conversationRowCount + contactRowCount + messageRowCount) {
      return void 0;
    }
    const localIndex = rowIndex - conversationRowCount - contactRowCount;
    if (localIndex === 0) {
      return {
        type: import_ConversationList.RowType.Header,
        i18nKey: "messagesHeader"
      };
    }
    (0, import_assert.assert)(!messageResults.isLoading, "We shouldn't get here with message results still loading");
    const message = messageResults.results[localIndex - 1];
    return message ? {
      type: import_ConversationList.RowType.MessageSearchResult,
      messageId: message.id
    } : void 0;
  }
  isScrollable() {
    return !this.isLoading();
  }
  shouldRecomputeRowHeights(old) {
    const oldIsLoading = new LeftPaneSearchHelper(old).isLoading();
    const newIsLoading = this.isLoading();
    if (oldIsLoading && newIsLoading) {
      return false;
    }
    if (oldIsLoading !== newIsLoading) {
      return true;
    }
    return searchResultKeys.some((key) => getRowCountForLoadedSearchResults(old[key]) !== getRowCountForLoadedSearchResults(this[key]));
  }
  getConversationAndMessageAtIndex(conversationIndex) {
    if (conversationIndex < 0) {
      return void 0;
    }
    let pointer = conversationIndex;
    for (const list of this.allResults()) {
      if (list.isLoading) {
        continue;
      }
      if (pointer < list.results.length) {
        const result = list.results[pointer];
        return result.type === "incoming" || result.type === "outgoing" ? {
          conversationId: result.conversationId,
          messageId: result.id
        } : { conversationId: result.id };
      }
      pointer -= list.results.length;
    }
    return void 0;
  }
  getConversationAndMessageInDirection(_toFind, _selectedConversationId, _selectedMessageId) {
    return void 0;
  }
  onKeyDown(event, options) {
    (0, import_handleKeydownForSearch.handleKeydownForSearch)(event, options);
  }
  allResults() {
    return [this.conversationResults, this.contactResults, this.messageResults];
  }
  isLoading() {
    return this.allResults().some((results) => results.isLoading);
  }
  onEnterKeyDown(clearSearch, showConversation) {
    const conversation = this.getConversationAndMessageAtIndex(0);
    if (!conversation) {
      return;
    }
    showConversation(conversation);
    clearSearch();
  }
}
function getRowCountForLoadedSearchResults(searchResults) {
  if (searchResults.isLoading) {
    (0, import_assert.assert)(false, "getRowCountForLoadedSearchResults: Expected this to be called with loaded search results. Returning 0");
    return 0;
  }
  const resultRows = searchResults.results.length;
  const hasHeader = Boolean(resultRows);
  return (hasHeader ? 1 : 0) + resultRows;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LeftPaneSearchHelper
});
//# sourceMappingURL=data:application/json;base64,
