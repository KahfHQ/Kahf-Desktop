var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var MessageSearchResult_exports = {};
__export(MessageSearchResult_exports, {
  MessageSearchResult: () => MessageSearchResult
});
module.exports = __toCommonJS(MessageSearchResult_exports);
var import_react = __toESM(require("react"));
var import_lodash = require("lodash");
var import_MessageBodyHighlight = require("./MessageBodyHighlight");
var import_ContactName = require("../conversation/ContactName");
var import_assert = require("../../util/assert");
var import_BaseConversationListItem = require("./BaseConversationListItem");
const renderPerson = /* @__PURE__ */ __name((i18n, person) => person.isMe ? i18n("you") : /* @__PURE__ */ import_react.default.createElement(import_ContactName.ContactName, {
  title: person.title
}), "renderPerson");
function getFilteredBodyRanges(snippet, body, bodyRanges) {
  if (!bodyRanges.length) {
    return [];
  }
  const stripped = snippet.replace(/<<left>>/g, "").replace(/<<right>>/g, "").replace(/^.../, "").replace(/...$/, "");
  const rx = new RegExp((0, import_lodash.escapeRegExp)(stripped));
  const match = rx.exec(body);
  (0, import_assert.assert)(Boolean(match), `No match found for "${snippet}" inside "${body}"`);
  const delta = match ? match.index + snippet.length : 0;
  const filteredBodyRanges = bodyRanges.filter((bodyRange) => {
    return bodyRange.start < delta;
  });
  const snippetBodyRanges = [];
  const MENTIONS_REGEX = /\uFFFC/g;
  let bodyRangeMatch = MENTIONS_REGEX.exec(snippet);
  let i = 0;
  while (bodyRangeMatch) {
    const bodyRange = filteredBodyRanges[i];
    if (bodyRange) {
      snippetBodyRanges.push({
        ...bodyRange,
        start: bodyRangeMatch.index
      });
    } else {
      (0, import_assert.assert)(false, `Body range does not exist? Count: ${i}, Length: ${filteredBodyRanges.length}`);
    }
    bodyRangeMatch = MENTIONS_REGEX.exec(snippet);
    i += 1;
  }
  return snippetBodyRanges;
}
const MessageSearchResult = import_react.default.memo(/* @__PURE__ */ __name(function MessageSearchResult2({
  body,
  bodyRanges,
  conversationId,
  from,
  getPreferredBadge,
  i18n,
  id,
  sentAt,
  showConversation,
  snippet,
  theme,
  to
}) {
  const onClickItem = (0, import_react.useCallback)(() => {
    showConversation({ conversationId, messageId: id });
  }, [showConversation, conversationId, id]);
  if (!from || !to) {
    return /* @__PURE__ */ import_react.default.createElement("div", null);
  }
  const isNoteToSelf = from.isMe && to.isMe;
  let headerName;
  if (isNoteToSelf) {
    headerName = i18n("noteToSelf");
  } else {
    headerName = /* @__PURE__ */ import_react.default.createElement("span", null, renderPerson(i18n, from), " ", i18n("toJoiner"), " ", renderPerson(i18n, to));
  }
  const snippetBodyRanges = getFilteredBodyRanges(snippet, body, bodyRanges);
  const messageText = /* @__PURE__ */ import_react.default.createElement(import_MessageBodyHighlight.MessageBodyHighlight, {
    text: snippet,
    bodyRanges: snippetBodyRanges,
    i18n
  });
  return /* @__PURE__ */ import_react.default.createElement(import_BaseConversationListItem.BaseConversationListItem, {
    acceptedMessageRequest: from.acceptedMessageRequest,
    avatarPath: from.avatarPath,
    badge: getPreferredBadge(from.badges),
    color: from.color,
    conversationType: "direct",
    headerDate: sentAt,
    headerName,
    i18n,
    id,
    isNoteToSelf,
    isMe: from.isMe,
    isSelected: false,
    messageText,
    name: from.name,
    onClick: onClickItem,
    phoneNumber: from.phoneNumber,
    profileName: from.profileName,
    sharedGroupNames: from.sharedGroupNames,
    theme,
    title: from.title,
    unblurredAvatarPath: from.unblurredAvatarPath
  });
}, "MessageSearchResult"));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MessageSearchResult
});
//# sourceMappingURL=data:application/json;base64,
