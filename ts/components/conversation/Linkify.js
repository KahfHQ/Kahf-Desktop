var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Linkify_exports = {};
__export(Linkify_exports, {
  Linkify: () => Linkify
});
module.exports = __toCommonJS(Linkify_exports);
var import_react = __toESM(require("react"));
var import_linkify_it = __toESM(require("linkify-it"));
var import_LinkPreview = require("../../types/LinkPreview");
var import_emoji = require("../../util/emoji");
var import_missingCaseError = require("../../util/missingCaseError");
const linkify = (0, import_linkify_it.default)().tlds([
  "ac",
  "ad",
  "ae",
  "aero",
  "af",
  "ag",
  "ai",
  "al",
  "am",
  "an",
  "ao",
  "aq",
  "ar",
  "arpa",
  "as",
  "asia",
  "at",
  "au",
  "aw",
  "ax",
  "az",
  "ba",
  "bb",
  "bd",
  "be",
  "bf",
  "bg",
  "bh",
  "bi",
  "biz",
  "bj",
  "bl",
  "bm",
  "bn",
  "bo",
  "bq",
  "br",
  "bs",
  "bt",
  "bv",
  "bw",
  "by",
  "bz",
  "ca",
  "cat",
  "cc",
  "cd",
  "cf",
  "cg",
  "ch",
  "ci",
  "ck",
  "cl",
  "cm",
  "cn",
  "co",
  "com",
  "coop",
  "cr",
  "cu",
  "cv",
  "cw",
  "cx",
  "cy",
  "cz",
  "de",
  "dj",
  "dk",
  "dm",
  "do",
  "dz",
  "ec",
  "edu",
  "ee",
  "eg",
  "er",
  "es",
  "et",
  "eu",
  "fi",
  "fj",
  "fk",
  "fm",
  "fo",
  "fr",
  "ga",
  "gb",
  "gd",
  "ge",
  "gf",
  "gg",
  "gh",
  "gi",
  "gl",
  "gm",
  "gn",
  "gov",
  "gp",
  "gq",
  "gr",
  "gs",
  "gt",
  "gu",
  "gw",
  "gy",
  "hk",
  "hm",
  "hn",
  "hr",
  "ht",
  "hu",
  "id",
  "ie",
  "il",
  "im",
  "in",
  "info",
  "int",
  "io",
  "iq",
  "ir",
  "is",
  "it",
  "je",
  "jm",
  "jo",
  "jobs",
  "jp",
  "ke",
  "kg",
  "kh",
  "ki",
  "km",
  "kn",
  "kp",
  "kr",
  "kw",
  "ky",
  "kz",
  "la",
  "lb",
  "lc",
  "li",
  "lk",
  "lr",
  "ls",
  "lt",
  "lu",
  "lv",
  "ly",
  "ma",
  "mc",
  "md",
  "me",
  "mf",
  "mg",
  "mh",
  "mil",
  "mk",
  "ml",
  "mm",
  "mn",
  "mo",
  "mobi",
  "mp",
  "mq",
  "mr",
  "ms",
  "mt",
  "mu",
  "museum",
  "mv",
  "mw",
  "mx",
  "my",
  "mz",
  "na",
  "name",
  "nc",
  "ne",
  "net",
  "nf",
  "ng",
  "ni",
  "nl",
  "no",
  "np",
  "nr",
  "nu",
  "nz",
  "om",
  "org",
  "pa",
  "pe",
  "pf",
  "pg",
  "ph",
  "pk",
  "pl",
  "pm",
  "pn",
  "pr",
  "pro",
  "ps",
  "pt",
  "pw",
  "py",
  "qa",
  "re",
  "ro",
  "rs",
  "ru",
  "rw",
  "sa",
  "sb",
  "sc",
  "sd",
  "se",
  "sg",
  "sh",
  "si",
  "sj",
  "sk",
  "sl",
  "sm",
  "sn",
  "so",
  "sr",
  "st",
  "su",
  "sv",
  "sx",
  "sy",
  "sz",
  "tc",
  "td",
  "tel",
  "tf",
  "tg",
  "th",
  "tj",
  "tk",
  "tl",
  "tm",
  "tn",
  "to",
  "tp",
  "tr",
  "travel",
  "tt",
  "tv",
  "tw",
  "tz",
  "ua",
  "ug",
  "uk",
  "um",
  "us",
  "uy",
  "uz",
  "va",
  "vc",
  "ve",
  "vg",
  "vi",
  "vn",
  "vu",
  "wf",
  "ws",
  "\u4E2D\u56FD",
  "\u4E2D\u570B",
  "\u0DBD\u0D82\u0D9A\u0DCF",
  "\u9999\u6E2F",
  "\u53F0\u6E7E",
  "\u53F0\u7063",
  "\u0627\u0645\u0627\u0631\u0627\u062A",
  "\u0627\u0644\u0627\u0631\u062F\u0646",
  "\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629",
  "\u0E44\u0E17\u0E22",
  "\u0440\u0444",
  "\u062A\u0648\u0646\u0633",
  "\u0645\u0635\u0631",
  "\u0642\u0637\u0631",
  "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8",
  "\u0641\u0644\u0633\u0637\u064A\u0646",
  "ye",
  "yt",
  "za",
  "zm",
  "zw"
]);
const SUPPORTED_PROTOCOLS = /^(http|https):/i;
class Linkify extends import_react.default.Component {
  render() {
    const { text, renderNonLink } = this.props;
    if (!(0, import_LinkPreview.shouldLinkifyMessage)(text)) {
      return text;
    }
    if (!renderNonLink) {
      return null;
    }
    const chunkData = (0, import_emoji.splitByEmoji)(text).map(({ type, value: chunk }) => {
      if (type === "text") {
        return { chunk, matchData: linkify.match(chunk) || [] };
      }
      if (type === "emoji") {
        return { chunk, matchData: [] };
      }
      throw (0, import_missingCaseError.missingCaseError)(type);
    });
    const results = [];
    let count = 1;
    chunkData.forEach(({ chunk, matchData }) => {
      if (matchData.length === 0) {
        count += 1;
        results.push(renderNonLink({ text: chunk, key: count }));
        return;
      }
      let chunkLastIndex = 0;
      matchData.forEach((match) => {
        if (chunkLastIndex < match.index) {
          const textWithNoLink = chunk.slice(chunkLastIndex, match.index);
          count += 1;
          results.push(renderNonLink({ text: textWithNoLink, key: count }));
        }
        const { url, text: originalText } = match;
        count += 1;
        if (SUPPORTED_PROTOCOLS.test(url) && !(0, import_LinkPreview.isLinkSneaky)(url)) {
          results.push(/* @__PURE__ */ import_react.default.createElement("a", {
            key: count,
            href: url
          }, originalText));
        } else {
          results.push(renderNonLink({ text: originalText, key: count }));
        }
        chunkLastIndex = match.lastIndex;
      });
      if (chunkLastIndex < chunk.length) {
        count += 1;
        results.push(renderNonLink({
          text: chunk.slice(chunkLastIndex),
          key: count
        }));
      }
    });
    return results;
  }
}
Linkify.defaultProps = {
  renderNonLink: ({ text }) => text
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Linkify
});
//# sourceMappingURL=data:application/json;base64,
