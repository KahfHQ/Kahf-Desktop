var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Timeline_exports = {};
__export(Timeline_exports, {
  SmartTimeline: () => SmartTimeline
});
module.exports = __toCommonJS(Timeline_exports);
var import_lodash = require("lodash");
var import_react = __toESM(require("react"));
var import_react_redux = require("react-redux");
var import_actions = require("../actions");
var import_Timeline = require("../../components/conversation/Timeline");
var import_user = require("../selectors/user");
var import_conversations = require("../selectors/conversations");
var import_TimelineItem = require("./TimelineItem");
var import_ContactSpoofingReviewDialog = require("./ContactSpoofingReviewDialog");
var import_TypingBubble = require("./TypingBubble");
var import_HeroRow = require("./HeroRow");
var import_renderAudioAttachment = require("./renderAudioAttachment");
var import_renderEmojiPicker = require("./renderEmojiPicker");
var import_renderReactionPicker = require("./renderReactionPicker");
var import_getOwn = require("../../util/getOwn");
var import_assert = require("../../util/assert");
var import_missingCaseError = require("../../util/missingCaseError");
var import_getGroupMemberships = require("../../util/getGroupMemberships");
var import_groupMemberNameCollisions = require("../../util/groupMemberNameCollisions");
var import_contactSpoofing = require("../../util/contactSpoofing");
var import_badges = require("../selectors/badges");
function renderItem({
  actionProps,
  containerElementRef,
  containerWidthBreakpoint,
  conversationId,
  isOldestTimelineItem,
  messageId,
  nextMessageId,
  previousMessageId,
  unreadIndicatorPlacement
}) {
  return /* @__PURE__ */ import_react.default.createElement(import_TimelineItem.SmartTimelineItem, {
    ...actionProps,
    containerElementRef,
    containerWidthBreakpoint,
    conversationId,
    isOldestTimelineItem,
    messageId,
    previousMessageId,
    nextMessageId,
    renderEmojiPicker: import_renderEmojiPicker.renderEmojiPicker,
    renderReactionPicker: import_renderReactionPicker.renderReactionPicker,
    renderAudioAttachment: import_renderAudioAttachment.renderAudioAttachment,
    unreadIndicatorPlacement
  });
}
function renderContactSpoofingReviewDialog(props) {
  return /* @__PURE__ */ import_react.default.createElement(import_ContactSpoofingReviewDialog.SmartContactSpoofingReviewDialog, {
    ...props
  });
}
function renderHeroRow(id, unblurAvatar, updateSharedGroups) {
  return /* @__PURE__ */ import_react.default.createElement(import_HeroRow.SmartHeroRow, {
    id,
    unblurAvatar,
    updateSharedGroups
  });
}
function renderTypingBubble(id) {
  return /* @__PURE__ */ import_react.default.createElement(import_TypingBubble.SmartTypingBubble, {
    id
  });
}
const getWarning = /* @__PURE__ */ __name((conversation, state) => {
  switch (conversation.type) {
    case "direct":
      if (!conversation.acceptedMessageRequest && !conversation.isBlocked) {
        const getConversationsWithTitle = (0, import_conversations.getConversationsByTitleSelector)(state);
        const conversationsWithSameTitle = getConversationsWithTitle(conversation.title);
        (0, import_assert.assert)(conversationsWithSameTitle.length, "Expected at least 1 conversation with the same title (this one)");
        const safeConversation = conversationsWithSameTitle.find((otherConversation) => otherConversation.acceptedMessageRequest && otherConversation.type === "direct" && otherConversation.id !== conversation.id);
        if (safeConversation) {
          return {
            type: import_contactSpoofing.ContactSpoofingType.DirectConversationWithSameTitle,
            safeConversation
          };
        }
      }
      return void 0;
    case "group": {
      if (conversation.left || conversation.groupVersion !== 2) {
        return void 0;
      }
      const getConversationByUuid = (0, import_conversations.getConversationByUuidSelector)(state);
      const { memberships } = (0, import_getGroupMemberships.getGroupMemberships)(conversation, getConversationByUuid);
      const groupNameCollisions = (0, import_groupMemberNameCollisions.getCollisionsFromMemberships)(memberships);
      const hasGroupMembersWithSameName = !(0, import_lodash.isEmpty)(groupNameCollisions);
      if (hasGroupMembersWithSameName) {
        return {
          type: import_contactSpoofing.ContactSpoofingType.MultipleGroupMembersWithSameTitle,
          acknowledgedGroupNameCollisions: conversation.acknowledgedGroupNameCollisions || {},
          groupNameCollisions: (0, import_groupMemberNameCollisions.dehydrateCollisionsWithConversations)(groupNameCollisions)
        };
      }
      return void 0;
    }
    default:
      throw (0, import_missingCaseError.missingCaseError)(conversation.type);
  }
}, "getWarning");
const getContactSpoofingReview = /* @__PURE__ */ __name((selectedConversationId, state) => {
  const { contactSpoofingReview } = state.conversations;
  if (!contactSpoofingReview) {
    return void 0;
  }
  const conversationSelector = (0, import_conversations.getConversationSelector)(state);
  const getConversationByUuid = (0, import_conversations.getConversationByUuidSelector)(state);
  const currentConversation = conversationSelector(selectedConversationId);
  switch (contactSpoofingReview.type) {
    case import_contactSpoofing.ContactSpoofingType.DirectConversationWithSameTitle:
      return {
        type: import_contactSpoofing.ContactSpoofingType.DirectConversationWithSameTitle,
        possiblyUnsafeConversation: currentConversation,
        safeConversation: conversationSelector(contactSpoofingReview.safeConversationId)
      };
    case import_contactSpoofing.ContactSpoofingType.MultipleGroupMembersWithSameTitle: {
      const { memberships } = (0, import_getGroupMemberships.getGroupMemberships)(currentConversation, getConversationByUuid);
      const groupNameCollisions = (0, import_groupMemberNameCollisions.getCollisionsFromMemberships)(memberships);
      const previouslyAcknowledgedTitlesById = (0, import_groupMemberNameCollisions.invertIdsByTitle)(currentConversation.acknowledgedGroupNameCollisions || {});
      const collisionInfoByTitle = (0, import_lodash.mapValues)(groupNameCollisions, (conversations) => conversations.map((conversation) => ({
        conversation,
        oldName: (0, import_getOwn.getOwn)(previouslyAcknowledgedTitlesById, conversation.id)
      })));
      return {
        type: import_contactSpoofing.ContactSpoofingType.MultipleGroupMembersWithSameTitle,
        collisionInfoByTitle
      };
    }
    default:
      throw (0, import_missingCaseError.missingCaseError)(contactSpoofingReview);
  }
}, "getContactSpoofingReview");
const mapStateToProps = /* @__PURE__ */ __name((state, props) => {
  const { id, ...actions } = props;
  const conversation = (0, import_conversations.getConversationSelector)(state)(id);
  const conversationMessages = (0, import_conversations.getConversationMessagesSelector)(state)(id);
  const selectedMessage = (0, import_conversations.getSelectedMessage)(state);
  const messageSelector = (0, import_conversations.getMessageSelector)(state);
  const getTimestampForMessage = /* @__PURE__ */ __name((messageId) => messageSelector(messageId)?.timestamp, "getTimestampForMessage");
  return {
    id,
    ...(0, import_lodash.pick)(conversation, ["unreadCount", "isGroupV1AndDisabled"]),
    isConversationSelected: state.conversations.selectedConversationId === id,
    isIncomingMessageRequest: Boolean(conversation.messageRequestsEnabled && !conversation.acceptedMessageRequest),
    isSomeoneTyping: Boolean(conversation.typingContactId),
    ...conversationMessages,
    invitedContactsForNewlyCreatedGroup: (0, import_conversations.getInvitedContactsForNewlyCreatedGroup)(state),
    selectedMessageId: selectedMessage ? selectedMessage.id : void 0,
    warning: getWarning(conversation, state),
    contactSpoofingReview: getContactSpoofingReview(id, state),
    getTimestampForMessage,
    getPreferredBadge: (0, import_badges.getPreferredBadgeSelector)(state),
    i18n: (0, import_user.getIntl)(state),
    theme: (0, import_user.getTheme)(state),
    renderItem,
    renderContactSpoofingReviewDialog,
    renderHeroRow,
    renderTypingBubble,
    ...actions
  };
}, "mapStateToProps");
const smart = (0, import_react_redux.connect)(mapStateToProps, import_actions.mapDispatchToProps);
const SmartTimeline = smart(import_Timeline.Timeline);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SmartTimeline
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiVGltZWxpbmUudHN4Il0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIyIFNpZ25hbCBNZXNzZW5nZXIsIExMQ1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFHUEwtMy4wLW9ubHlcblxuaW1wb3J0IHsgaXNFbXB0eSwgbWFwVmFsdWVzLCBwaWNrIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB0eXBlIHsgUmVmT2JqZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7IG1hcERpc3BhdGNoVG9Qcm9wcyB9IGZyb20gJy4uL2FjdGlvbnMnO1xuaW1wb3J0IHR5cGUge1xuICBQcm9wc0FjdGlvbnNUeXBlIGFzIFRpbWVsaW5lQWN0aW9uc1R5cGUsXG4gIENvbnRhY3RTcG9vZmluZ1Jldmlld1Byb3BUeXBlLFxuICBXYXJuaW5nVHlwZSBhcyBUaW1lbGluZVdhcm5pbmdUeXBlLFxuICBQcm9wc1R5cGUgYXMgQ29tcG9uZW50UHJvcHNUeXBlLFxufSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbnZlcnNhdGlvbi9UaW1lbGluZSc7XG5pbXBvcnQgeyBUaW1lbGluZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY29udmVyc2F0aW9uL1RpbWVsaW5lJztcbmltcG9ydCB0eXBlIHsgU3RhdGVUeXBlIH0gZnJvbSAnLi4vcmVkdWNlcic7XG5pbXBvcnQgdHlwZSB7IENvbnZlcnNhdGlvblR5cGUgfSBmcm9tICcuLi9kdWNrcy9jb252ZXJzYXRpb25zJztcblxuaW1wb3J0IHsgZ2V0SW50bCwgZ2V0VGhlbWUgfSBmcm9tICcuLi9zZWxlY3RvcnMvdXNlcic7XG5pbXBvcnQge1xuICBnZXRDb252ZXJzYXRpb25CeVV1aWRTZWxlY3RvcixcbiAgZ2V0Q29udmVyc2F0aW9uTWVzc2FnZXNTZWxlY3RvcixcbiAgZ2V0Q29udmVyc2F0aW9uU2VsZWN0b3IsXG4gIGdldENvbnZlcnNhdGlvbnNCeVRpdGxlU2VsZWN0b3IsXG4gIGdldEludml0ZWRDb250YWN0c0Zvck5ld2x5Q3JlYXRlZEdyb3VwLFxuICBnZXRNZXNzYWdlU2VsZWN0b3IsXG4gIGdldFNlbGVjdGVkTWVzc2FnZSxcbn0gZnJvbSAnLi4vc2VsZWN0b3JzL2NvbnZlcnNhdGlvbnMnO1xuXG5pbXBvcnQgeyBTbWFydFRpbWVsaW5lSXRlbSB9IGZyb20gJy4vVGltZWxpbmVJdGVtJztcbmltcG9ydCB7IFNtYXJ0Q29udGFjdFNwb29maW5nUmV2aWV3RGlhbG9nIH0gZnJvbSAnLi9Db250YWN0U3Bvb2ZpbmdSZXZpZXdEaWFsb2cnO1xuaW1wb3J0IHR5cGUgeyBQcm9wc1R5cGUgYXMgU21hcnRDb250YWN0U3Bvb2ZpbmdSZXZpZXdEaWFsb2dQcm9wc1R5cGUgfSBmcm9tICcuL0NvbnRhY3RTcG9vZmluZ1Jldmlld0RpYWxvZyc7XG5pbXBvcnQgeyBTbWFydFR5cGluZ0J1YmJsZSB9IGZyb20gJy4vVHlwaW5nQnViYmxlJztcbmltcG9ydCB7IFNtYXJ0SGVyb1JvdyB9IGZyb20gJy4vSGVyb1Jvdyc7XG5pbXBvcnQgeyByZW5kZXJBdWRpb0F0dGFjaG1lbnQgfSBmcm9tICcuL3JlbmRlckF1ZGlvQXR0YWNobWVudCc7XG5pbXBvcnQgeyByZW5kZXJFbW9qaVBpY2tlciB9IGZyb20gJy4vcmVuZGVyRW1vamlQaWNrZXInO1xuaW1wb3J0IHsgcmVuZGVyUmVhY3Rpb25QaWNrZXIgfSBmcm9tICcuL3JlbmRlclJlYWN0aW9uUGlja2VyJztcblxuaW1wb3J0IHsgZ2V0T3duIH0gZnJvbSAnLi4vLi4vdXRpbC9nZXRPd24nO1xuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi4vLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgbWlzc2luZ0Nhc2VFcnJvciB9IGZyb20gJy4uLy4uL3V0aWwvbWlzc2luZ0Nhc2VFcnJvcic7XG5pbXBvcnQgeyBnZXRHcm91cE1lbWJlcnNoaXBzIH0gZnJvbSAnLi4vLi4vdXRpbC9nZXRHcm91cE1lbWJlcnNoaXBzJztcbmltcG9ydCB7XG4gIGRlaHlkcmF0ZUNvbGxpc2lvbnNXaXRoQ29udmVyc2F0aW9ucyxcbiAgZ2V0Q29sbGlzaW9uc0Zyb21NZW1iZXJzaGlwcyxcbiAgaW52ZXJ0SWRzQnlUaXRsZSxcbn0gZnJvbSAnLi4vLi4vdXRpbC9ncm91cE1lbWJlck5hbWVDb2xsaXNpb25zJztcbmltcG9ydCB7IENvbnRhY3RTcG9vZmluZ1R5cGUgfSBmcm9tICcuLi8uLi91dGlsL2NvbnRhY3RTcG9vZmluZyc7XG5pbXBvcnQgdHlwZSB7IFVucmVhZEluZGljYXRvclBsYWNlbWVudCB9IGZyb20gJy4uLy4uL3V0aWwvdGltZWxpbmVVdGlsJztcbmltcG9ydCB0eXBlIHsgV2lkdGhCcmVha3BvaW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9fdXRpbCc7XG5pbXBvcnQgeyBnZXRQcmVmZXJyZWRCYWRnZVNlbGVjdG9yIH0gZnJvbSAnLi4vc2VsZWN0b3JzL2JhZGdlcyc7XG5cbnR5cGUgRXh0ZXJuYWxQcm9wcyA9IHtcbiAgaWQ6IHN0cmluZztcblxuICAvLyBOb3RlOiBtb3N0IGFjdGlvbiBjcmVhdG9ycyBhcmUgbm90IHdpcmVkIGludG8gcmVkdXg7IGZvciBub3cgdGhleVxuICAvLyAgIGFyZSBwcm92aWRlZCBieSBDb252ZXJzYXRpb25WaWV3IGluIHNldHVwVGltZWxpbmUoKS5cbn07XG5cbmV4cG9ydCB0eXBlIFRpbWVsaW5lUHJvcHNUeXBlID0gRXh0ZXJuYWxQcm9wcyAmXG4gIFBpY2s8XG4gICAgQ29tcG9uZW50UHJvcHNUeXBlLFxuICAgIHwgJ2Fja25vd2xlZGdlR3JvdXBNZW1iZXJOYW1lQ29sbGlzaW9ucydcbiAgICB8ICdjb250YWN0U3VwcG9ydCdcbiAgICB8ICdibG9ja0dyb3VwTGlua1JlcXVlc3RzJ1xuICAgIHwgJ2RlbGV0ZU1lc3NhZ2UnXG4gICAgfCAnZGVsZXRlTWVzc2FnZUZvckV2ZXJ5b25lJ1xuICAgIHwgJ2Rpc3BsYXlUYXBUb1ZpZXdNZXNzYWdlJ1xuICAgIHwgJ2Rvd25sb2FkQXR0YWNobWVudCdcbiAgICB8ICdkb3dubG9hZE5ld1ZlcnNpb24nXG4gICAgfCAna2lja09mZkF0dGFjaG1lbnREb3dubG9hZCdcbiAgICB8ICdsZWFybk1vcmVBYm91dERlbGl2ZXJ5SXNzdWUnXG4gICAgfCAnbG9hZE5ld2VyTWVzc2FnZXMnXG4gICAgfCAnbG9hZE5ld2VzdE1lc3NhZ2VzJ1xuICAgIHwgJ2xvYWRPbGRlck1lc3NhZ2VzJ1xuICAgIHwgJ21hcmtBdHRhY2htZW50QXNDb3JydXB0ZWQnXG4gICAgfCAnbWFya01lc3NhZ2VSZWFkJ1xuICAgIHwgJ21hcmtWaWV3ZWQnXG4gICAgfCAnb25CbG9jaydcbiAgICB8ICdvbkJsb2NrQW5kUmVwb3J0U3BhbSdcbiAgICB8ICdvbkRlbGV0ZSdcbiAgICB8ICdvblVuYmxvY2snXG4gICAgfCAnb3BlbkNvbnZlcnNhdGlvbidcbiAgICB8ICdvcGVuR2lmdEJhZGdlJ1xuICAgIHwgJ29wZW5MaW5rJ1xuICAgIHwgJ3JlYWN0VG9NZXNzYWdlJ1xuICAgIHwgJ3JlbW92ZU1lbWJlcidcbiAgICB8ICdyZXBseVRvTWVzc2FnZSdcbiAgICB8ICdyZXRyeURlbGV0ZUZvckV2ZXJ5b25lJ1xuICAgIHwgJ3JldHJ5U2VuZCdcbiAgICB8ICdzY3JvbGxUb1F1b3RlZE1lc3NhZ2UnXG4gICAgfCAnc2hvd0NvbnRhY3REZXRhaWwnXG4gICAgfCAnc2hvd0NvbnRhY3RNb2RhbCdcbiAgICB8ICdzaG93RXhwaXJlZEluY29taW5nVGFwVG9WaWV3VG9hc3QnXG4gICAgfCAnc2hvd0V4cGlyZWRPdXRnb2luZ1RhcFRvVmlld1RvYXN0J1xuICAgIHwgJ3Nob3dGb3J3YXJkTWVzc2FnZU1vZGFsJ1xuICAgIHwgJ3Nob3dJZGVudGl0eSdcbiAgICB8ICdzaG93TWVzc2FnZURldGFpbCdcbiAgICB8ICdzaG93VmlzdWFsQXR0YWNobWVudCdcbiAgICB8ICdzdGFydENvbnZlcnNhdGlvbidcbiAgICB8ICd1bmJsdXJBdmF0YXInXG4gICAgfCAndXBkYXRlU2hhcmVkR3JvdXBzJ1xuICA+O1xuXG5mdW5jdGlvbiByZW5kZXJJdGVtKHtcbiAgYWN0aW9uUHJvcHMsXG4gIGNvbnRhaW5lckVsZW1lbnRSZWYsXG4gIGNvbnRhaW5lcldpZHRoQnJlYWtwb2ludCxcbiAgY29udmVyc2F0aW9uSWQsXG4gIGlzT2xkZXN0VGltZWxpbmVJdGVtLFxuICBtZXNzYWdlSWQsXG4gIG5leHRNZXNzYWdlSWQsXG4gIHByZXZpb3VzTWVzc2FnZUlkLFxuICB1bnJlYWRJbmRpY2F0b3JQbGFjZW1lbnQsXG59OiB7XG4gIGFjdGlvblByb3BzOiBUaW1lbGluZUFjdGlvbnNUeXBlO1xuICBjb250YWluZXJFbGVtZW50UmVmOiBSZWZPYmplY3Q8SFRNTEVsZW1lbnQ+O1xuICBjb250YWluZXJXaWR0aEJyZWFrcG9pbnQ6IFdpZHRoQnJlYWtwb2ludDtcbiAgY29udmVyc2F0aW9uSWQ6IHN0cmluZztcbiAgaXNPbGRlc3RUaW1lbGluZUl0ZW06IGJvb2xlYW47XG4gIG1lc3NhZ2VJZDogc3RyaW5nO1xuICBuZXh0TWVzc2FnZUlkOiB1bmRlZmluZWQgfCBzdHJpbmc7XG4gIHByZXZpb3VzTWVzc2FnZUlkOiB1bmRlZmluZWQgfCBzdHJpbmc7XG4gIHVucmVhZEluZGljYXRvclBsYWNlbWVudDogdW5kZWZpbmVkIHwgVW5yZWFkSW5kaWNhdG9yUGxhY2VtZW50O1xufSk6IEpTWC5FbGVtZW50IHtcbiAgcmV0dXJuIChcbiAgICA8U21hcnRUaW1lbGluZUl0ZW1cbiAgICAgIHsuLi5hY3Rpb25Qcm9wc31cbiAgICAgIGNvbnRhaW5lckVsZW1lbnRSZWY9e2NvbnRhaW5lckVsZW1lbnRSZWZ9XG4gICAgICBjb250YWluZXJXaWR0aEJyZWFrcG9pbnQ9e2NvbnRhaW5lcldpZHRoQnJlYWtwb2ludH1cbiAgICAgIGNvbnZlcnNhdGlvbklkPXtjb252ZXJzYXRpb25JZH1cbiAgICAgIGlzT2xkZXN0VGltZWxpbmVJdGVtPXtpc09sZGVzdFRpbWVsaW5lSXRlbX1cbiAgICAgIG1lc3NhZ2VJZD17bWVzc2FnZUlkfVxuICAgICAgcHJldmlvdXNNZXNzYWdlSWQ9e3ByZXZpb3VzTWVzc2FnZUlkfVxuICAgICAgbmV4dE1lc3NhZ2VJZD17bmV4dE1lc3NhZ2VJZH1cbiAgICAgIHJlbmRlckVtb2ppUGlja2VyPXtyZW5kZXJFbW9qaVBpY2tlcn1cbiAgICAgIHJlbmRlclJlYWN0aW9uUGlja2VyPXtyZW5kZXJSZWFjdGlvblBpY2tlcn1cbiAgICAgIHJlbmRlckF1ZGlvQXR0YWNobWVudD17cmVuZGVyQXVkaW9BdHRhY2htZW50fVxuICAgICAgdW5yZWFkSW5kaWNhdG9yUGxhY2VtZW50PXt1bnJlYWRJbmRpY2F0b3JQbGFjZW1lbnR9XG4gICAgLz5cbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQ29udGFjdFNwb29maW5nUmV2aWV3RGlhbG9nKFxuICBwcm9wczogU21hcnRDb250YWN0U3Bvb2ZpbmdSZXZpZXdEaWFsb2dQcm9wc1R5cGVcbik6IEpTWC5FbGVtZW50IHtcbiAgcmV0dXJuIDxTbWFydENvbnRhY3RTcG9vZmluZ1Jldmlld0RpYWxvZyB7Li4ucHJvcHN9IC8+O1xufVxuXG5mdW5jdGlvbiByZW5kZXJIZXJvUm93KFxuICBpZDogc3RyaW5nLFxuICB1bmJsdXJBdmF0YXI6ICgpID0+IHZvaWQsXG4gIHVwZGF0ZVNoYXJlZEdyb3VwczogKCkgPT4gdW5rbm93blxuKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gKFxuICAgIDxTbWFydEhlcm9Sb3dcbiAgICAgIGlkPXtpZH1cbiAgICAgIHVuYmx1ckF2YXRhcj17dW5ibHVyQXZhdGFyfVxuICAgICAgdXBkYXRlU2hhcmVkR3JvdXBzPXt1cGRhdGVTaGFyZWRHcm91cHN9XG4gICAgLz5cbiAgKTtcbn1cbmZ1bmN0aW9uIHJlbmRlclR5cGluZ0J1YmJsZShpZDogc3RyaW5nKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gPFNtYXJ0VHlwaW5nQnViYmxlIGlkPXtpZH0gLz47XG59XG5cbmNvbnN0IGdldFdhcm5pbmcgPSAoXG4gIGNvbnZlcnNhdGlvbjogUmVhZG9ubHk8Q29udmVyc2F0aW9uVHlwZT4sXG4gIHN0YXRlOiBSZWFkb25seTxTdGF0ZVR5cGU+XG4pOiB1bmRlZmluZWQgfCBUaW1lbGluZVdhcm5pbmdUeXBlID0+IHtcbiAgc3dpdGNoIChjb252ZXJzYXRpb24udHlwZSkge1xuICAgIGNhc2UgJ2RpcmVjdCc6XG4gICAgICBpZiAoIWNvbnZlcnNhdGlvbi5hY2NlcHRlZE1lc3NhZ2VSZXF1ZXN0ICYmICFjb252ZXJzYXRpb24uaXNCbG9ja2VkKSB7XG4gICAgICAgIGNvbnN0IGdldENvbnZlcnNhdGlvbnNXaXRoVGl0bGUgPVxuICAgICAgICAgIGdldENvbnZlcnNhdGlvbnNCeVRpdGxlU2VsZWN0b3Ioc3RhdGUpO1xuICAgICAgICBjb25zdCBjb252ZXJzYXRpb25zV2l0aFNhbWVUaXRsZSA9IGdldENvbnZlcnNhdGlvbnNXaXRoVGl0bGUoXG4gICAgICAgICAgY29udmVyc2F0aW9uLnRpdGxlXG4gICAgICAgICk7XG4gICAgICAgIGFzc2VydChcbiAgICAgICAgICBjb252ZXJzYXRpb25zV2l0aFNhbWVUaXRsZS5sZW5ndGgsXG4gICAgICAgICAgJ0V4cGVjdGVkIGF0IGxlYXN0IDEgY29udmVyc2F0aW9uIHdpdGggdGhlIHNhbWUgdGl0bGUgKHRoaXMgb25lKSdcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBzYWZlQ29udmVyc2F0aW9uID0gY29udmVyc2F0aW9uc1dpdGhTYW1lVGl0bGUuZmluZChcbiAgICAgICAgICBvdGhlckNvbnZlcnNhdGlvbiA9PlxuICAgICAgICAgICAgb3RoZXJDb252ZXJzYXRpb24uYWNjZXB0ZWRNZXNzYWdlUmVxdWVzdCAmJlxuICAgICAgICAgICAgb3RoZXJDb252ZXJzYXRpb24udHlwZSA9PT0gJ2RpcmVjdCcgJiZcbiAgICAgICAgICAgIG90aGVyQ29udmVyc2F0aW9uLmlkICE9PSBjb252ZXJzYXRpb24uaWRcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoc2FmZUNvbnZlcnNhdGlvbikge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBDb250YWN0U3Bvb2ZpbmdUeXBlLkRpcmVjdENvbnZlcnNhdGlvbldpdGhTYW1lVGl0bGUsXG4gICAgICAgICAgICBzYWZlQ29udmVyc2F0aW9uLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY2FzZSAnZ3JvdXAnOiB7XG4gICAgICBpZiAoY29udmVyc2F0aW9uLmxlZnQgfHwgY29udmVyc2F0aW9uLmdyb3VwVmVyc2lvbiAhPT0gMikge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBnZXRDb252ZXJzYXRpb25CeVV1aWQgPSBnZXRDb252ZXJzYXRpb25CeVV1aWRTZWxlY3RvcihzdGF0ZSk7XG5cbiAgICAgIGNvbnN0IHsgbWVtYmVyc2hpcHMgfSA9IGdldEdyb3VwTWVtYmVyc2hpcHMoXG4gICAgICAgIGNvbnZlcnNhdGlvbixcbiAgICAgICAgZ2V0Q29udmVyc2F0aW9uQnlVdWlkXG4gICAgICApO1xuICAgICAgY29uc3QgZ3JvdXBOYW1lQ29sbGlzaW9ucyA9IGdldENvbGxpc2lvbnNGcm9tTWVtYmVyc2hpcHMobWVtYmVyc2hpcHMpO1xuICAgICAgY29uc3QgaGFzR3JvdXBNZW1iZXJzV2l0aFNhbWVOYW1lID0gIWlzRW1wdHkoZ3JvdXBOYW1lQ29sbGlzaW9ucyk7XG4gICAgICBpZiAoaGFzR3JvdXBNZW1iZXJzV2l0aFNhbWVOYW1lKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogQ29udGFjdFNwb29maW5nVHlwZS5NdWx0aXBsZUdyb3VwTWVtYmVyc1dpdGhTYW1lVGl0bGUsXG4gICAgICAgICAgYWNrbm93bGVkZ2VkR3JvdXBOYW1lQ29sbGlzaW9uczpcbiAgICAgICAgICAgIGNvbnZlcnNhdGlvbi5hY2tub3dsZWRnZWRHcm91cE5hbWVDb2xsaXNpb25zIHx8IHt9LFxuICAgICAgICAgIGdyb3VwTmFtZUNvbGxpc2lvbnM6XG4gICAgICAgICAgICBkZWh5ZHJhdGVDb2xsaXNpb25zV2l0aENvbnZlcnNhdGlvbnMoZ3JvdXBOYW1lQ29sbGlzaW9ucyksXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBtaXNzaW5nQ2FzZUVycm9yKGNvbnZlcnNhdGlvbi50eXBlKTtcbiAgfVxufTtcblxuY29uc3QgZ2V0Q29udGFjdFNwb29maW5nUmV2aWV3ID0gKFxuICBzZWxlY3RlZENvbnZlcnNhdGlvbklkOiBzdHJpbmcsXG4gIHN0YXRlOiBSZWFkb25seTxTdGF0ZVR5cGU+XG4pOiB1bmRlZmluZWQgfCBDb250YWN0U3Bvb2ZpbmdSZXZpZXdQcm9wVHlwZSA9PiB7XG4gIGNvbnN0IHsgY29udGFjdFNwb29maW5nUmV2aWV3IH0gPSBzdGF0ZS5jb252ZXJzYXRpb25zO1xuICBpZiAoIWNvbnRhY3RTcG9vZmluZ1Jldmlldykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBjb252ZXJzYXRpb25TZWxlY3RvciA9IGdldENvbnZlcnNhdGlvblNlbGVjdG9yKHN0YXRlKTtcbiAgY29uc3QgZ2V0Q29udmVyc2F0aW9uQnlVdWlkID0gZ2V0Q29udmVyc2F0aW9uQnlVdWlkU2VsZWN0b3Ioc3RhdGUpO1xuXG4gIGNvbnN0IGN1cnJlbnRDb252ZXJzYXRpb24gPSBjb252ZXJzYXRpb25TZWxlY3RvcihzZWxlY3RlZENvbnZlcnNhdGlvbklkKTtcblxuICBzd2l0Y2ggKGNvbnRhY3RTcG9vZmluZ1Jldmlldy50eXBlKSB7XG4gICAgY2FzZSBDb250YWN0U3Bvb2ZpbmdUeXBlLkRpcmVjdENvbnZlcnNhdGlvbldpdGhTYW1lVGl0bGU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBDb250YWN0U3Bvb2ZpbmdUeXBlLkRpcmVjdENvbnZlcnNhdGlvbldpdGhTYW1lVGl0bGUsXG4gICAgICAgIHBvc3NpYmx5VW5zYWZlQ29udmVyc2F0aW9uOiBjdXJyZW50Q29udmVyc2F0aW9uLFxuICAgICAgICBzYWZlQ29udmVyc2F0aW9uOiBjb252ZXJzYXRpb25TZWxlY3RvcihcbiAgICAgICAgICBjb250YWN0U3Bvb2ZpbmdSZXZpZXcuc2FmZUNvbnZlcnNhdGlvbklkXG4gICAgICAgICksXG4gICAgICB9O1xuICAgIGNhc2UgQ29udGFjdFNwb29maW5nVHlwZS5NdWx0aXBsZUdyb3VwTWVtYmVyc1dpdGhTYW1lVGl0bGU6IHtcbiAgICAgIGNvbnN0IHsgbWVtYmVyc2hpcHMgfSA9IGdldEdyb3VwTWVtYmVyc2hpcHMoXG4gICAgICAgIGN1cnJlbnRDb252ZXJzYXRpb24sXG4gICAgICAgIGdldENvbnZlcnNhdGlvbkJ5VXVpZFxuICAgICAgKTtcbiAgICAgIGNvbnN0IGdyb3VwTmFtZUNvbGxpc2lvbnMgPSBnZXRDb2xsaXNpb25zRnJvbU1lbWJlcnNoaXBzKG1lbWJlcnNoaXBzKTtcblxuICAgICAgY29uc3QgcHJldmlvdXNseUFja25vd2xlZGdlZFRpdGxlc0J5SWQgPSBpbnZlcnRJZHNCeVRpdGxlKFxuICAgICAgICBjdXJyZW50Q29udmVyc2F0aW9uLmFja25vd2xlZGdlZEdyb3VwTmFtZUNvbGxpc2lvbnMgfHwge31cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGNvbGxpc2lvbkluZm9CeVRpdGxlID0gbWFwVmFsdWVzKFxuICAgICAgICBncm91cE5hbWVDb2xsaXNpb25zLFxuICAgICAgICBjb252ZXJzYXRpb25zID0+XG4gICAgICAgICAgY29udmVyc2F0aW9ucy5tYXAoY29udmVyc2F0aW9uID0+ICh7XG4gICAgICAgICAgICBjb252ZXJzYXRpb24sXG4gICAgICAgICAgICBvbGROYW1lOiBnZXRPd24ocHJldmlvdXNseUFja25vd2xlZGdlZFRpdGxlc0J5SWQsIGNvbnZlcnNhdGlvbi5pZCksXG4gICAgICAgICAgfSkpXG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBDb250YWN0U3Bvb2ZpbmdUeXBlLk11bHRpcGxlR3JvdXBNZW1iZXJzV2l0aFNhbWVUaXRsZSxcbiAgICAgICAgY29sbGlzaW9uSW5mb0J5VGl0bGUsXG4gICAgICB9O1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbWlzc2luZ0Nhc2VFcnJvcihjb250YWN0U3Bvb2ZpbmdSZXZpZXcpO1xuICB9XG59O1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFN0YXRlVHlwZSwgcHJvcHM6IEV4dGVybmFsUHJvcHMpID0+IHtcbiAgY29uc3QgeyBpZCwgLi4uYWN0aW9ucyB9ID0gcHJvcHM7XG5cbiAgY29uc3QgY29udmVyc2F0aW9uID0gZ2V0Q29udmVyc2F0aW9uU2VsZWN0b3Ioc3RhdGUpKGlkKTtcblxuICBjb25zdCBjb252ZXJzYXRpb25NZXNzYWdlcyA9IGdldENvbnZlcnNhdGlvbk1lc3NhZ2VzU2VsZWN0b3Ioc3RhdGUpKGlkKTtcbiAgY29uc3Qgc2VsZWN0ZWRNZXNzYWdlID0gZ2V0U2VsZWN0ZWRNZXNzYWdlKHN0YXRlKTtcblxuICBjb25zdCBtZXNzYWdlU2VsZWN0b3IgPSBnZXRNZXNzYWdlU2VsZWN0b3Ioc3RhdGUpO1xuICBjb25zdCBnZXRUaW1lc3RhbXBGb3JNZXNzYWdlID0gKG1lc3NhZ2VJZDogc3RyaW5nKTogdW5kZWZpbmVkIHwgbnVtYmVyID0+XG4gICAgbWVzc2FnZVNlbGVjdG9yKG1lc3NhZ2VJZCk/LnRpbWVzdGFtcDtcblxuICByZXR1cm4ge1xuICAgIGlkLFxuICAgIC4uLnBpY2soY29udmVyc2F0aW9uLCBbJ3VucmVhZENvdW50JywgJ2lzR3JvdXBWMUFuZERpc2FibGVkJ10pLFxuICAgIGlzQ29udmVyc2F0aW9uU2VsZWN0ZWQ6IHN0YXRlLmNvbnZlcnNhdGlvbnMuc2VsZWN0ZWRDb252ZXJzYXRpb25JZCA9PT0gaWQsXG4gICAgaXNJbmNvbWluZ01lc3NhZ2VSZXF1ZXN0OiBCb29sZWFuKFxuICAgICAgY29udmVyc2F0aW9uLm1lc3NhZ2VSZXF1ZXN0c0VuYWJsZWQgJiZcbiAgICAgICAgIWNvbnZlcnNhdGlvbi5hY2NlcHRlZE1lc3NhZ2VSZXF1ZXN0XG4gICAgKSxcbiAgICBpc1NvbWVvbmVUeXBpbmc6IEJvb2xlYW4oY29udmVyc2F0aW9uLnR5cGluZ0NvbnRhY3RJZCksXG4gICAgLi4uY29udmVyc2F0aW9uTWVzc2FnZXMsXG4gICAgaW52aXRlZENvbnRhY3RzRm9yTmV3bHlDcmVhdGVkR3JvdXA6XG4gICAgICBnZXRJbnZpdGVkQ29udGFjdHNGb3JOZXdseUNyZWF0ZWRHcm91cChzdGF0ZSksXG4gICAgc2VsZWN0ZWRNZXNzYWdlSWQ6IHNlbGVjdGVkTWVzc2FnZSA/IHNlbGVjdGVkTWVzc2FnZS5pZCA6IHVuZGVmaW5lZCxcblxuICAgIHdhcm5pbmc6IGdldFdhcm5pbmcoY29udmVyc2F0aW9uLCBzdGF0ZSksXG4gICAgY29udGFjdFNwb29maW5nUmV2aWV3OiBnZXRDb250YWN0U3Bvb2ZpbmdSZXZpZXcoaWQsIHN0YXRlKSxcblxuICAgIGdldFRpbWVzdGFtcEZvck1lc3NhZ2UsXG4gICAgZ2V0UHJlZmVycmVkQmFkZ2U6IGdldFByZWZlcnJlZEJhZGdlU2VsZWN0b3Ioc3RhdGUpLFxuICAgIGkxOG46IGdldEludGwoc3RhdGUpLFxuICAgIHRoZW1lOiBnZXRUaGVtZShzdGF0ZSksXG4gICAgcmVuZGVySXRlbSxcbiAgICByZW5kZXJDb250YWN0U3Bvb2ZpbmdSZXZpZXdEaWFsb2csXG4gICAgcmVuZGVySGVyb1JvdyxcbiAgICByZW5kZXJUeXBpbmdCdWJibGUsXG4gICAgLi4uYWN0aW9ucyxcbiAgfTtcbn07XG5cbmNvbnN0IHNtYXJ0ID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcyk7XG5cbmV4cG9ydCBjb25zdCBTbWFydFRpbWVsaW5lID0gc21hcnQo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
