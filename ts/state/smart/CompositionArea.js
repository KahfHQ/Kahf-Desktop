var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CompositionArea_exports = {};
__export(CompositionArea_exports, {
  SmartCompositionArea: () => SmartCompositionArea
});
module.exports = __toCommonJS(CompositionArea_exports);
var import_react_redux = require("react-redux");
var import_lodash = require("lodash");
var import_actions = require("../actions");
var import_CompositionArea = require("../../components/CompositionArea");
var import_isConversationSMSOnly = require("../../util/isConversationSMSOnly");
var import_dropNull = require("../../util/dropNull");
var import_badges = require("../selectors/badges");
var import_emojis = require("../selectors/emojis");
var import_user = require("../selectors/user");
var import_items = require("../selectors/items");
var import_conversations = require("../selectors/conversations");
var import_message = require("../selectors/message");
var import_stickers = require("../selectors/stickers");
const mapStateToProps = /* @__PURE__ */ __name((state, props) => {
  const { id, handleClickQuotedMessage } = props;
  const conversationSelector = (0, import_conversations.getConversationSelector)(state);
  const conversation = conversationSelector(id);
  if (!conversation) {
    throw new Error(`Conversation id ${id} not found!`);
  }
  const { announcementsOnly, areWeAdmin, draftText, draftBodyRanges } = conversation;
  const receivedPacks = (0, import_stickers.getReceivedStickerPacks)(state);
  const installedPacks = (0, import_stickers.getInstalledStickerPacks)(state);
  const blessedPacks = (0, import_stickers.getBlessedStickerPacks)(state);
  const knownPacks = (0, import_stickers.getKnownStickerPacks)(state);
  const installedPack = (0, import_stickers.getRecentlyInstalledStickerPack)(state);
  const recentStickers = (0, import_stickers.getRecentStickers)(state);
  const showIntroduction = (0, import_lodash.get)(state.items, ["showStickersIntroduction"], false);
  const showPickerHint = Boolean((0, import_lodash.get)(state.items, ["showStickerPickerHint"], false) && receivedPacks.length > 0);
  const {
    attachments: draftAttachments,
    linkPreviewLoading,
    linkPreviewResult,
    quotedMessage,
    shouldSendHighQualityAttachments
  } = state.composer;
  const recentEmojis = (0, import_emojis.selectRecentEmojis)(state);
  return {
    conversationId: id,
    i18n: (0, import_user.getIntl)(state),
    theme: (0, import_user.getTheme)(state),
    getPreferredBadge: (0, import_badges.getPreferredBadgeSelector)(state),
    errorDialogAudioRecorderType: state.audioRecorder.errorDialogAudioRecorderType,
    recordingState: state.audioRecorder.recordingState,
    draftAttachments,
    shouldSendHighQualityAttachments,
    linkPreviewLoading,
    linkPreviewResult,
    quotedMessageProps: quotedMessage ? (0, import_message.getPropsForQuote)(quotedMessage, {
      conversationSelector,
      ourConversationId: (0, import_user.getUserConversationId)(state)
    }) : void 0,
    onClickQuotedMessage: () => {
      const messageId = quotedMessage?.quote?.messageId;
      if (messageId) {
        handleClickQuotedMessage(messageId);
      }
    },
    recentEmojis,
    skinTone: (0, import_items.getEmojiSkinTone)(state),
    receivedPacks,
    installedPack,
    blessedPacks,
    knownPacks,
    installedPacks,
    recentStickers,
    showIntroduction,
    showPickerHint,
    ...conversation,
    conversationType: conversation.type,
    isSMSOnly: Boolean((0, import_isConversationSMSOnly.isConversationSMSOnly)(conversation)),
    isFetchingUUID: conversation.isFetchingUUID,
    isMissingMandatoryProfileSharing: (0, import_conversations.isMissingRequiredProfileSharing)(conversation),
    announcementsOnly,
    areWeAdmin,
    groupAdmins: (0, import_conversations.getGroupAdminsSelector)(state)(conversation.id),
    draftText: (0, import_dropNull.dropNull)(draftText),
    draftBodyRanges
  };
}, "mapStateToProps");
const dispatchPropsMap = {
  ...import_actions.mapDispatchToProps,
  onSetSkinTone: (tone) => import_actions.mapDispatchToProps.putItem("skinTone", tone),
  clearShowIntroduction: () => import_actions.mapDispatchToProps.removeItem("showStickersIntroduction"),
  clearShowPickerHint: () => import_actions.mapDispatchToProps.removeItem("showStickerPickerHint"),
  onPickEmoji: import_actions.mapDispatchToProps.onUseEmoji
};
const smart = (0, import_react_redux.connect)(mapStateToProps, dispatchPropsMap);
const SmartCompositionArea = smart(import_CompositionArea.CompositionArea);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SmartCompositionArea
});
//# sourceMappingURL=data:application/json;base64,
