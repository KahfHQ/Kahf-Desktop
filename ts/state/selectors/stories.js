var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stories_exports = {};
__export(stories_exports, {
  getConversationStory: () => getConversationStory,
  getHasStoriesSelector: () => getHasStoriesSelector,
  getSelectedStoryData: () => getSelectedStoryData,
  getStories: () => getStories,
  getStoriesState: () => getStoriesState,
  getStoryByIdSelector: () => getStoryByIdSelector,
  getStoryReplies: () => getStoryReplies,
  getStoryView: () => getStoryView,
  getUnreadStorySenderCount: () => getUnreadStorySenderCount,
  hasSelectedStoryData: () => hasSelectedStoryData,
  shouldShowStoriesView: () => shouldShowStoriesView
});
module.exports = __toCommonJS(stories_exports);
var import_reselect = require("reselect");
var import_lodash = require("lodash");
var import_Stories = require("../../types/Stories");
var import_MessageReadStatus = require("../../messages/MessageReadStatus");
var import_MessageSendState = require("../../messages/MessageSendState");
var import_message = require("./message");
var import_conversations = require("./conversations");
var import_storyDistributionLists = require("./storyDistributionLists");
var import_items = require("./items");
const getStoriesState = /* @__PURE__ */ __name((state) => state.stories, "getStoriesState");
const shouldShowStoriesView = (0, import_reselect.createSelector)(getStoriesState, ({ isShowingStoriesView }) => isShowingStoriesView);
const hasSelectedStoryData = (0, import_reselect.createSelector)(getStoriesState, ({ selectedStoryData }) => Boolean(selectedStoryData));
const getSelectedStoryData = (0, import_reselect.createSelector)(getStoriesState, ({ selectedStoryData }) => selectedStoryData);
function getReactionUniqueId(reaction) {
  return `${reaction.fromId}:${reaction.targetAuthorUuid}:${reaction.timestamp}`;
}
function sortByRecencyAndUnread(storyA, storyB) {
  if (storyA.storyView.isUnread && storyB.storyView.isUnread) {
    return storyA.storyView.timestamp > storyB.storyView.timestamp ? -1 : 1;
  }
  if (storyB.storyView.isUnread) {
    return 1;
  }
  if (storyA.storyView.isUnread) {
    return -1;
  }
  return storyA.storyView.timestamp > storyB.storyView.timestamp ? -1 : 1;
}
function getAvatarData(conversation) {
  return (0, import_lodash.pick)(conversation, [
    "acceptedMessageRequest",
    "avatarPath",
    "badges",
    "color",
    "isMe",
    "id",
    "name",
    "profileName",
    "sharedGroupNames",
    "title"
  ]);
}
function getStoryView(conversationSelector, story) {
  const sender = (0, import_lodash.pick)(conversationSelector(story.sourceUuid || story.source), [
    "acceptedMessageRequest",
    "avatarPath",
    "badges",
    "color",
    "firstName",
    "hideStory",
    "id",
    "isMe",
    "name",
    "profileName",
    "sharedGroupNames",
    "title"
  ]);
  const { attachment, timestamp } = (0, import_lodash.pick)(story, ["attachment", "timestamp"]);
  const { sendStateByConversationId } = story;
  let sendState;
  let views;
  if (sendStateByConversationId) {
    const innerSendState = [];
    let innerViews = 0;
    Object.keys(sendStateByConversationId).forEach((recipientId) => {
      const recipient = conversationSelector(recipientId);
      const recipientSendState = sendStateByConversationId[recipient.id];
      if (recipientSendState.status === import_MessageSendState.SendStatus.Viewed) {
        innerViews += 1;
      }
      innerSendState.push({
        ...recipientSendState,
        recipient
      });
    });
    sendState = innerSendState;
    views = innerViews;
  }
  return {
    attachment,
    canReply: (0, import_message.canReply)(story, void 0, conversationSelector),
    isUnread: story.readStatus === import_MessageReadStatus.ReadStatus.Unread,
    messageId: story.messageId,
    sender,
    sendState,
    timestamp,
    views
  };
}
function getConversationStory(conversationSelector, story) {
  const sender = (0, import_lodash.pick)(conversationSelector(story.sourceUuid || story.source), [
    "hideStory",
    "id"
  ]);
  const conversation = (0, import_lodash.pick)(conversationSelector(story.conversationId), [
    "acceptedMessageRequest",
    "avatarPath",
    "color",
    "id",
    "name",
    "profileName",
    "sharedGroupNames",
    "title"
  ]);
  const storyView = getStoryView(conversationSelector, story);
  return {
    conversationId: conversation.id,
    group: conversation.id !== sender.id ? conversation : void 0,
    isHidden: Boolean(sender.hideStory),
    storyView
  };
}
const getStoryReplies = (0, import_reselect.createSelector)(import_conversations.getConversationSelector, import_conversations.getContactNameColorSelector, import_conversations.getMe, getStoriesState, (conversationSelector, contactNameColorSelector, me, { stories, replyState }) => {
  if (!replyState) {
    return;
  }
  const foundStory = stories.find((story) => story.messageId === replyState.messageId);
  const reactions = foundStory ? (foundStory.reactions || []).map((reaction) => {
    const conversation = conversationSelector(reaction.fromId);
    return {
      author: getAvatarData(conversation),
      contactNameColor: contactNameColorSelector(foundStory.conversationId, conversation.id),
      conversationId: reaction.fromId,
      id: getReactionUniqueId(reaction),
      reactionEmoji: reaction.emoji,
      timestamp: reaction.timestamp
    };
  }) : [];
  const replies = replyState.replies.map((reply) => {
    const conversation = reply.type === "outgoing" ? me : conversationSelector(reply.sourceUuid || reply.source);
    return {
      author: getAvatarData(conversation),
      ...(0, import_lodash.pick)(reply, ["body", "deletedForEveryone", "id", "timestamp"]),
      contactNameColor: contactNameColorSelector(reply.conversationId, conversation.id),
      conversationId: conversation.id,
      readStatus: reply.readStatus
    };
  });
  const combined = [...replies, ...reactions].sort((a, b) => a.timestamp > b.timestamp ? 1 : -1);
  return {
    messageId: replyState.messageId,
    replies: combined
  };
});
const getStories = (0, import_reselect.createSelector)(import_conversations.getConversationSelector, import_storyDistributionLists.getDistributionListSelector, getStoriesState, shouldShowStoriesView, (conversationSelector, distributionListSelector, { stories }, isShowingStoriesView) => {
  if (!isShowingStoriesView) {
    return {
      hiddenStories: [],
      myStories: [],
      stories: []
    };
  }
  const hiddenStoriesById = /* @__PURE__ */ new Map();
  const myStoriesById = /* @__PURE__ */ new Map();
  const storiesById = /* @__PURE__ */ new Map();
  stories.forEach((story) => {
    if (story.deletedForEveryone) {
      return;
    }
    const conversationStory = getConversationStory(conversationSelector, story);
    if (story.sendStateByConversationId) {
      let sentId = story.conversationId;
      let sentName = conversationStory.group?.title;
      if (story.storyDistributionListId) {
        const list = story.storyDistributionListId === import_Stories.MY_STORIES_ID ? { id: import_Stories.MY_STORIES_ID, name: import_Stories.MY_STORIES_ID } : distributionListSelector(story.storyDistributionListId.toLowerCase());
        if (!list) {
          return;
        }
        sentId = list.id;
        sentName = list.name;
      }
      if (!sentName) {
        return;
      }
      const storyView = getStoryView(conversationSelector, story);
      const existingMyStory = myStoriesById.get(sentId) || { stories: [] };
      myStoriesById.set(sentId, {
        id: sentId,
        name: sentName,
        stories: [...existingMyStory.stories, storyView]
      });
      return;
    }
    let storiesMap;
    if (conversationStory.isHidden) {
      storiesMap = hiddenStoriesById;
    } else {
      storiesMap = storiesById;
    }
    const existingConversationStory = storiesMap.get(conversationStory.conversationId);
    storiesMap.set(conversationStory.conversationId, {
      ...existingConversationStory,
      ...conversationStory,
      storyView: conversationStory.storyView
    });
  });
  return {
    hiddenStories: Array.from(hiddenStoriesById.values()),
    myStories: Array.from(myStoriesById.values()),
    stories: Array.from(storiesById.values()).sort(sortByRecencyAndUnread)
  };
});
const getUnreadStorySenderCount = (0, import_reselect.createSelector)(getStoriesState, ({ stories }) => {
  return new Set(stories.filter((story) => story.readStatus === import_MessageReadStatus.ReadStatus.Unread && !story.deletedForEveryone).map((story) => story.conversationId)).size;
});
const getHasStoriesSelector = (0, import_reselect.createSelector)(import_items.getStoriesEnabled, getStoriesState, (isEnabled, { stories }) => (conversationId) => {
  if (!isEnabled || !conversationId) {
    return;
  }
  const conversationStories = stories.filter((story) => story.conversationId === conversationId);
  if (!conversationStories.length) {
    return;
  }
  return conversationStories.some((story) => story.readStatus === import_MessageReadStatus.ReadStatus.Unread && !story.deletedForEveryone) ? import_Stories.HasStories.Unread : import_Stories.HasStories.Read;
});
const getStoryByIdSelector = (0, import_reselect.createSelector)(getStoriesState, ({ stories }) => (conversationSelector, messageId) => {
  const story = stories.find((item) => item.messageId === messageId);
  if (!story) {
    return;
  }
  return {
    conversationStory: getConversationStory(conversationSelector, story),
    storyView: getStoryView(conversationSelector, story)
  };
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getConversationStory,
  getHasStoriesSelector,
  getSelectedStoryData,
  getStories,
  getStoriesState,
  getStoryByIdSelector,
  getStoryReplies,
  getStoryView,
  getUnreadStorySenderCount,
  hasSelectedStoryData,
  shouldShowStoriesView
});
//# sourceMappingURL=data:application/json;base64,
