var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var search_exports = {};
__export(search_exports, {
  getCachedSelectorForMessageSearchResult: () => getCachedSelectorForMessageSearchResult,
  getIsSearchingInAConversation: () => getIsSearchingInAConversation,
  getMessageSearchResultLookup: () => getMessageSearchResultLookup,
  getMessageSearchResultSelector: () => getMessageSearchResultSelector,
  getQuery: () => getQuery,
  getSearch: () => getSearch,
  getSearchConversation: () => getSearchConversation,
  getSearchConversationName: () => getSearchConversationName,
  getSearchResults: () => getSearchResults,
  getSelectedMessage: () => getSelectedMessage,
  getStartSearchCounter: () => getStartSearchCounter,
  isSearching: () => isSearching
});
module.exports = __toCommonJS(search_exports);
var import_memoizee = __toESM(require("memoizee"));
var import_reselect = require("reselect");
var import_deconstructLookup = require("../../util/deconstructLookup");
var import_user = require("./user");
var import_conversations = require("./conversations");
var log = __toESM(require("../../logging/log"));
var import_getOwn = require("../../util/getOwn");
const getSearch = /* @__PURE__ */ __name((state) => state.search, "getSearch");
const getQuery = (0, import_reselect.createSelector)(getSearch, (state) => state.query);
const getSelectedMessage = (0, import_reselect.createSelector)(getSearch, (state) => state.selectedMessage);
const getSearchConversationId = (0, import_reselect.createSelector)(getSearch, (state) => state.searchConversationId);
const getIsSearchingInAConversation = (0, import_reselect.createSelector)(getSearchConversationId, Boolean);
const getSearchConversation = (0, import_reselect.createSelector)(getSearchConversationId, import_conversations.getConversationLookup, (searchConversationId, conversationLookup) => searchConversationId ? (0, import_getOwn.getOwn)(conversationLookup, searchConversationId) : void 0);
const getSearchConversationName = (0, import_reselect.createSelector)(getSearchConversation, import_user.getIntl, (conversation, i18n) => {
  if (!conversation) {
    return void 0;
  }
  return conversation.isMe ? i18n("noteToSelf") : conversation.title;
});
const getStartSearchCounter = (0, import_reselect.createSelector)(getSearch, (state) => state.startSearchCounter);
const isSearching = (0, import_reselect.createSelector)(getQuery, (query) => query.trim().length > 0);
const getMessageSearchResultLookup = (0, import_reselect.createSelector)(getSearch, (state) => state.messageLookup);
const getSearchResults = (0, import_reselect.createSelector)([getSearch, getSearchConversationName, import_conversations.getConversationLookup], (state, searchConversationName, conversationLookup) => {
  const {
    contactIds,
    conversationIds,
    discussionsLoading,
    messageIds,
    messageLookup,
    messagesLoading
  } = state;
  return {
    conversationResults: discussionsLoading ? { isLoading: true } : {
      isLoading: false,
      results: (0, import_deconstructLookup.deconstructLookup)(conversationLookup, conversationIds)
    },
    contactResults: discussionsLoading ? { isLoading: true } : {
      isLoading: false,
      results: (0, import_deconstructLookup.deconstructLookup)(conversationLookup, contactIds)
    },
    messageResults: messagesLoading ? { isLoading: true } : {
      isLoading: false,
      results: (0, import_deconstructLookup.deconstructLookup)(messageLookup, messageIds)
    },
    searchConversationName,
    searchTerm: state.query
  };
});
const getCachedSelectorForMessageSearchResult = (0, import_reselect.createSelector)(import_user.getUserConversationId, import_conversations.getConversationSelector, (_, conversationSelector) => {
  return (0, import_memoizee.default)((message, from, to, searchConversationId, selectedMessageId) => {
    const bodyRanges = message.bodyRanges || [];
    return {
      from,
      to,
      id: message.id,
      conversationId: message.conversationId,
      sentAt: message.sent_at,
      snippet: message.snippet || "",
      bodyRanges: bodyRanges.map((bodyRange) => {
        const conversation = conversationSelector(bodyRange.mentionUuid);
        return {
          ...bodyRange,
          replacementText: conversation.title
        };
      }),
      body: message.body || "",
      isSelected: Boolean(selectedMessageId && message.id === selectedMessageId),
      isSearchingInConversation: Boolean(searchConversationId)
    };
  }, { max: 500 });
});
const getMessageSearchResultSelector = (0, import_reselect.createSelector)(getCachedSelectorForMessageSearchResult, getMessageSearchResultLookup, getSelectedMessage, import_conversations.getConversationSelector, getSearchConversationId, import_user.getUserConversationId, (messageSearchResultSelector, messageSearchResultLookup, selectedMessageId, conversationSelector, searchConversationId, ourConversationId) => {
  return (id) => {
    const message = messageSearchResultLookup[id];
    if (!message) {
      log.warn(`getMessageSearchResultSelector: messageSearchResultLookup was missing id ${id}`);
      return void 0;
    }
    const { conversationId, source, sourceUuid, type } = message;
    let from;
    let to;
    if (type === "incoming") {
      from = conversationSelector(sourceUuid || source);
      to = conversationSelector(conversationId);
      if (from === to) {
        to = conversationSelector(ourConversationId);
      }
    } else if (type === "outgoing") {
      from = conversationSelector(ourConversationId);
      to = conversationSelector(conversationId);
    } else {
      log.warn(`getMessageSearchResultSelector: Got unexpected type ${type}`);
      return void 0;
    }
    return messageSearchResultSelector(message, from, to, searchConversationId, selectedMessageId);
  };
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getCachedSelectorForMessageSearchResult,
  getIsSearchingInAConversation,
  getMessageSearchResultLookup,
  getMessageSearchResultSelector,
  getQuery,
  getSearch,
  getSearchConversation,
  getSearchConversationName,
  getSearchResults,
  getSelectedMessage,
  getStartSearchCounter,
  isSearching
});
//# sourceMappingURL=data:application/json;base64,
