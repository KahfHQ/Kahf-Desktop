var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stickers_exports = {};
__export(stickers_exports, {
  getBlessedPacks: () => getBlessedPacks,
  getBlessedStickerPacks: () => getBlessedStickerPacks,
  getInstalledStickerPacks: () => getInstalledStickerPacks,
  getKnownStickerPacks: () => getKnownStickerPacks,
  getPacks: () => getPacks,
  getReceivedStickerPacks: () => getReceivedStickerPacks,
  getRecentStickers: () => getRecentStickers,
  getRecentlyInstalledStickerPack: () => getRecentlyInstalledStickerPack,
  translatePackFromDB: () => translatePackFromDB
});
module.exports = __toCommonJS(stickers_exports);
var import_path = require("path");
var import_lodash = require("lodash");
var import_reselect = require("reselect");
var import_user = require("./user");
const getSticker = /* @__PURE__ */ __name((packs, packId, stickerId, stickerPath, tempPath) => {
  const pack = packs[packId];
  if (!pack) {
    return void 0;
  }
  const sticker = pack.stickers[stickerId];
  if (!sticker) {
    return void 0;
  }
  const isEphemeral = pack.status === "ephemeral";
  return translateStickerFromDB(sticker, stickerPath, tempPath, isEphemeral);
}, "getSticker");
const translateStickerFromDB = /* @__PURE__ */ __name((sticker, stickerPath, tempPath, isEphemeral) => {
  const { id, packId, emoji, path } = sticker;
  const prefix = isEphemeral ? tempPath : stickerPath;
  return {
    id,
    packId,
    emoji,
    url: (0, import_path.join)(prefix, path)
  };
}, "translateStickerFromDB");
const translatePackFromDB = /* @__PURE__ */ __name((pack, packs, blessedPacks, stickersPath, tempPath) => {
  const { id, stickers, status, coverStickerId } = pack;
  const isEphemeral = status === "ephemeral";
  const filteredStickers = (0, import_lodash.reject)((0, import_lodash.values)(stickers), (sticker) => sticker.isCoverOnly);
  const translatedStickers = (0, import_lodash.map)(filteredStickers, (sticker) => translateStickerFromDB(sticker, stickersPath, tempPath, isEphemeral));
  return {
    ...pack,
    isBlessed: Boolean(blessedPacks[id]),
    cover: getSticker(packs, id, coverStickerId, stickersPath, tempPath),
    stickers: (0, import_lodash.sortBy)(translatedStickers, (sticker) => sticker.id)
  };
}, "translatePackFromDB");
const filterAndTransformPacks = /* @__PURE__ */ __name((packs, packFilter, packSort, blessedPacks, stickersPath, tempPath) => {
  const list = (0, import_lodash.filter)(packs, packFilter);
  const sorted = (0, import_lodash.orderBy)(list, packSort, ["desc"]);
  return sorted.map((pack) => translatePackFromDB(pack, packs, blessedPacks, stickersPath, tempPath));
}, "filterAndTransformPacks");
const getStickers = /* @__PURE__ */ __name((state) => state.stickers, "getStickers");
const getPacks = (0, import_reselect.createSelector)(getStickers, (stickers) => stickers.packs);
const getRecents = (0, import_reselect.createSelector)(getStickers, (stickers) => stickers.recentStickers);
const getBlessedPacks = (0, import_reselect.createSelector)(getStickers, (stickers) => stickers.blessedPacks);
const getRecentStickers = (0, import_reselect.createSelector)(getRecents, getPacks, import_user.getStickersPath, import_user.getTempPath, (recents, packs, stickersPath, tempPath) => {
  return (0, import_lodash.compact)(recents.map(({ packId, stickerId }) => {
    return getSticker(packs, packId, stickerId, stickersPath, tempPath);
  }));
});
const getInstalledStickerPacks = (0, import_reselect.createSelector)(getPacks, getBlessedPacks, import_user.getStickersPath, import_user.getTempPath, (packs, blessedPacks, stickersPath, tempPath) => {
  return filterAndTransformPacks(packs, (pack) => pack.status === "installed", (pack) => pack.installedAt, blessedPacks, stickersPath, tempPath);
});
const getRecentlyInstalledStickerPack = (0, import_reselect.createSelector)(getInstalledStickerPacks, getStickers, (packs, { installedPack: packId }) => {
  if (!packId) {
    return null;
  }
  return packs.find(({ id }) => id === packId) || null;
});
const getReceivedStickerPacks = (0, import_reselect.createSelector)(getPacks, getBlessedPacks, import_user.getStickersPath, import_user.getTempPath, (packs, blessedPacks, stickersPath, tempPath) => {
  return filterAndTransformPacks(packs, (pack) => (pack.status === "downloaded" || pack.status === "pending") && !blessedPacks[pack.id], (pack) => pack.createdAt, blessedPacks, stickersPath, tempPath);
});
const getBlessedStickerPacks = (0, import_reselect.createSelector)(getPacks, getBlessedPacks, import_user.getStickersPath, import_user.getTempPath, (packs, blessedPacks, stickersPath, tempPath) => {
  return filterAndTransformPacks(packs, (pack) => blessedPacks[pack.id] && pack.status !== "installed", (pack) => pack.createdAt, blessedPacks, stickersPath, tempPath);
});
const getKnownStickerPacks = (0, import_reselect.createSelector)(getPacks, getBlessedPacks, import_user.getStickersPath, import_user.getTempPath, (packs, blessedPacks, stickersPath, tempPath) => {
  return filterAndTransformPacks(packs, (pack) => !blessedPacks[pack.id] && pack.status === "known", (pack) => pack.createdAt, blessedPacks, stickersPath, tempPath);
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getBlessedPacks,
  getBlessedStickerPacks,
  getInstalledStickerPacks,
  getKnownStickerPacks,
  getPacks,
  getReceivedStickerPacks,
  getRecentStickers,
  getRecentlyInstalledStickerPack,
  translatePackFromDB
});
//# sourceMappingURL=data:application/json;base64,
