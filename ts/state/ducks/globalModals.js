var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var globalModals_exports = {};
__export(globalModals_exports, {
  TOGGLE_PROFILE_EDITOR_ERROR: () => TOGGLE_PROFILE_EDITOR_ERROR,
  actions: () => actions,
  getEmptyState: () => getEmptyState,
  reducer: () => reducer,
  useGlobalModalActions: () => useGlobalModalActions
});
module.exports = __toCommonJS(globalModals_exports);
var import_getMessageById = require("../../messages/getMessageById");
var import_message = require("../selectors/message");
var import_useBoundActions = require("../../hooks/useBoundActions");
const HIDE_CONTACT_MODAL = "globalModals/HIDE_CONTACT_MODAL";
const SHOW_CONTACT_MODAL = "globalModals/SHOW_CONTACT_MODAL";
const HIDE_WHATS_NEW_MODAL = "globalModals/HIDE_WHATS_NEW_MODAL_MODAL";
const SHOW_WHATS_NEW_MODAL = "globalModals/SHOW_WHATS_NEW_MODAL_MODAL";
const HIDE_UUID_NOT_FOUND_MODAL = "globalModals/HIDE_UUID_NOT_FOUND_MODAL";
const SHOW_UUID_NOT_FOUND_MODAL = "globalModals/SHOW_UUID_NOT_FOUND_MODAL";
const SHOW_STORIES_SETTINGS = "globalModals/SHOW_STORIES_SETTINGS";
const HIDE_STORIES_SETTINGS = "globalModals/HIDE_STORIES_SETTINGS";
const TOGGLE_FORWARD_MESSAGE_MODAL = "globalModals/TOGGLE_FORWARD_MESSAGE_MODAL";
const TOGGLE_PROFILE_EDITOR = "globalModals/TOGGLE_PROFILE_EDITOR";
const TOGGLE_PROFILE_EDITOR_ERROR = "globalModals/TOGGLE_PROFILE_EDITOR_ERROR";
const TOGGLE_SAFETY_NUMBER_MODAL = "globalModals/TOGGLE_SAFETY_NUMBER_MODAL";
const TOGGLE_SIGNAL_CONNECTIONS_MODAL = "globalModals/TOGGLE_SIGNAL_CONNECTIONS_MODAL";
const actions = {
  hideContactModal,
  showContactModal,
  hideWhatsNewModal,
  showWhatsNewModal,
  hideUserNotFoundModal,
  showUserNotFoundModal,
  hideStoriesSettings,
  showStoriesSettings,
  toggleForwardMessageModal,
  toggleProfileEditor,
  toggleProfileEditorHasError,
  toggleSafetyNumberModal,
  toggleSignalConnectionsModal
};
const useGlobalModalActions = /* @__PURE__ */ __name(() => (0, import_useBoundActions.useBoundActions)(actions), "useGlobalModalActions");
function hideContactModal() {
  return {
    type: HIDE_CONTACT_MODAL
  };
}
function showContactModal(contactId, conversationId) {
  return {
    type: SHOW_CONTACT_MODAL,
    payload: {
      contactId,
      conversationId
    }
  };
}
function hideWhatsNewModal() {
  return {
    type: HIDE_WHATS_NEW_MODAL
  };
}
function showWhatsNewModal() {
  return {
    type: SHOW_WHATS_NEW_MODAL
  };
}
function hideUserNotFoundModal() {
  return {
    type: HIDE_UUID_NOT_FOUND_MODAL
  };
}
function showUserNotFoundModal(payload) {
  return {
    type: SHOW_UUID_NOT_FOUND_MODAL,
    payload
  };
}
function hideStoriesSettings() {
  return { type: HIDE_STORIES_SETTINGS };
}
function showStoriesSettings() {
  return { type: SHOW_STORIES_SETTINGS };
}
function toggleForwardMessageModal(messageId) {
  return async (dispatch, getState) => {
    if (!messageId) {
      dispatch({
        type: TOGGLE_FORWARD_MESSAGE_MODAL,
        payload: void 0
      });
      return;
    }
    const message = await (0, import_getMessageById.getMessageById)(messageId);
    if (!message) {
      throw new Error(`toggleForwardMessageModal: no message found for ${messageId}`);
    }
    const messagePropsSelector = (0, import_message.getMessagePropsSelector)(getState());
    const messageProps = messagePropsSelector(message.attributes);
    dispatch({
      type: TOGGLE_FORWARD_MESSAGE_MODAL,
      payload: messageProps
    });
  };
}
function toggleProfileEditor() {
  return { type: TOGGLE_PROFILE_EDITOR };
}
function toggleProfileEditorHasError() {
  return { type: TOGGLE_PROFILE_EDITOR_ERROR };
}
function toggleSafetyNumberModal(safetyNumberModalContactId) {
  return {
    type: TOGGLE_SAFETY_NUMBER_MODAL,
    payload: safetyNumberModalContactId
  };
}
function toggleSignalConnectionsModal() {
  return {
    type: TOGGLE_SIGNAL_CONNECTIONS_MODAL
  };
}
function getEmptyState() {
  return {
    isProfileEditorVisible: false,
    isSignalConnectionsVisible: false,
    isStoriesSettingsVisible: false,
    isWhatsNewVisible: false,
    profileEditorHasError: false
  };
}
function reducer(state = getEmptyState(), action) {
  if (action.type === TOGGLE_PROFILE_EDITOR) {
    return {
      ...state,
      isProfileEditorVisible: !state.isProfileEditorVisible
    };
  }
  if (action.type === TOGGLE_PROFILE_EDITOR_ERROR) {
    return {
      ...state,
      profileEditorHasError: !state.profileEditorHasError
    };
  }
  if (action.type === SHOW_WHATS_NEW_MODAL) {
    return {
      ...state,
      isWhatsNewVisible: true
    };
  }
  if (action.type === HIDE_WHATS_NEW_MODAL) {
    return {
      ...state,
      isWhatsNewVisible: false
    };
  }
  if (action.type === HIDE_UUID_NOT_FOUND_MODAL) {
    return {
      ...state,
      userNotFoundModalState: void 0
    };
  }
  if (action.type === SHOW_UUID_NOT_FOUND_MODAL) {
    return {
      ...state,
      userNotFoundModalState: {
        ...action.payload
      }
    };
  }
  if (action.type === SHOW_CONTACT_MODAL) {
    return {
      ...state,
      contactModalState: action.payload
    };
  }
  if (action.type === HIDE_CONTACT_MODAL) {
    return {
      ...state,
      contactModalState: void 0
    };
  }
  if (action.type === TOGGLE_SAFETY_NUMBER_MODAL) {
    return {
      ...state,
      safetyNumberModalContactId: action.payload
    };
  }
  if (action.type === TOGGLE_FORWARD_MESSAGE_MODAL) {
    return {
      ...state,
      forwardMessageProps: action.payload
    };
  }
  if (action.type === HIDE_STORIES_SETTINGS) {
    return {
      ...state,
      isStoriesSettingsVisible: false
    };
  }
  if (action.type === SHOW_STORIES_SETTINGS) {
    return {
      ...state,
      isStoriesSettingsVisible: true
    };
  }
  if (action.type === TOGGLE_SIGNAL_CONNECTIONS_MODAL) {
    return {
      ...state,
      isSignalConnectionsVisible: !state.isSignalConnectionsVisible
    };
  }
  return state;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TOGGLE_PROFILE_EDITOR_ERROR,
  actions,
  getEmptyState,
  reducer,
  useGlobalModalActions
});
//# sourceMappingURL=data:application/json;base64,
