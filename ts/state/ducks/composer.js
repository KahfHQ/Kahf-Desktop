var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var composer_exports = {};
__export(composer_exports, {
  actions: () => actions,
  getEmptyState: () => getEmptyState,
  reducer: () => reducer
});
module.exports = __toCommonJS(composer_exports);
var log = __toESM(require("../../logging/log"));
var import_assignWithNoUnnecessaryAllocation = require("../../util/assignWithNoUnnecessaryAllocation");
var import_linkPreviews = require("./linkPreviews");
var import_writeDraftAttachment = require("../../util/writeDraftAttachment");
var import_deleteDraftAttachment = require("../../util/deleteDraftAttachment");
var import_replaceIndex = require("../../util/replaceIndex");
var import_resolveDraftAttachmentOnDisk = require("../../util/resolveDraftAttachmentOnDisk");
var import_handleAttachmentsProcessing = require("../../util/handleAttachmentsProcessing");
var import_LinkPreview = require("../../types/LinkPreview");
const ADD_PENDING_ATTACHMENT = "composer/ADD_PENDING_ATTACHMENT";
const REPLACE_ATTACHMENTS = "composer/REPLACE_ATTACHMENTS";
const RESET_COMPOSER = "composer/RESET_COMPOSER";
const SET_HIGH_QUALITY_SETTING = "composer/SET_HIGH_QUALITY_SETTING";
const SET_QUOTED_MESSAGE = "composer/SET_QUOTED_MESSAGE";
const actions = {
  addAttachment,
  addPendingAttachment,
  processAttachments,
  removeAttachment,
  replaceAttachments,
  resetComposer,
  setMediaQualitySetting,
  setQuotedMessage
};
function getAttachmentsFromConversationModel(conversationId) {
  const conversation = window.ConversationController.get(conversationId);
  return conversation?.get("draftAttachments") || [];
}
function addAttachment(conversationId, attachment) {
  return async (dispatch, getState) => {
    const onDisk = await (0, import_writeDraftAttachment.writeDraftAttachment)(attachment);
    const isSelectedConversation = getState().conversations.selectedConversationId === conversationId;
    const draftAttachments = isSelectedConversation ? getState().composer.attachments : getAttachmentsFromConversationModel(conversationId);
    const hasDraftAttachmentPending = draftAttachments.some((draftAttachment) => draftAttachment.path === attachment.path);
    if (!hasDraftAttachmentPending) {
      await (0, import_deleteDraftAttachment.deleteDraftAttachment)(onDisk);
      return;
    }
    const index = draftAttachments.findIndex((draftAttachment) => draftAttachment.path === attachment.path);
    let nextAttachments = draftAttachments;
    if (index < 0) {
      log.warn(`addAttachment: Failed to find pending attachment with path ${attachment.path}`);
      nextAttachments = [...draftAttachments, onDisk];
    } else {
      nextAttachments = (0, import_replaceIndex.replaceIndex)(draftAttachments, index, onDisk);
    }
    replaceAttachments(conversationId, nextAttachments)(dispatch, getState, null);
    const conversation = window.ConversationController.get(conversationId);
    if (conversation) {
      conversation.attributes.draftAttachments = nextAttachments;
      window.Signal.Data.updateConversation(conversation.attributes);
    }
  };
}
function addPendingAttachment(conversationId, pendingAttachment) {
  return (dispatch, getState) => {
    const isSelectedConversation = getState().conversations.selectedConversationId === conversationId;
    const draftAttachments = isSelectedConversation ? getState().composer.attachments : getAttachmentsFromConversationModel(conversationId);
    const nextAttachments = [...draftAttachments, pendingAttachment];
    dispatch({
      type: REPLACE_ATTACHMENTS,
      payload: nextAttachments
    });
    const conversation = window.ConversationController.get(conversationId);
    if (conversation) {
      conversation.attributes.draftAttachments = nextAttachments;
      window.Signal.Data.updateConversation(conversation.attributes);
    }
  };
}
function processAttachments(options) {
  return async (dispatch) => {
    await (0, import_handleAttachmentsProcessing.handleAttachmentsProcessing)(options);
    dispatch({
      type: "NOOP",
      payload: null
    });
  };
}
function removeAttachment(conversationId, filePath) {
  return async (dispatch, getState) => {
    const { attachments } = getState().composer;
    const [targetAttachment] = attachments.filter((attachment) => attachment.path === filePath);
    if (!targetAttachment) {
      return;
    }
    const nextAttachments = attachments.filter((attachment) => attachment.path !== filePath);
    const conversation = window.ConversationController.get(conversationId);
    if (conversation) {
      conversation.attributes.draftAttachments = nextAttachments;
      conversation.attributes.draftChanged = true;
      window.Signal.Data.updateConversation(conversation.attributes);
    }
    replaceAttachments(conversationId, nextAttachments)(dispatch, getState, null);
    if (targetAttachment.path && targetAttachment.fileName !== targetAttachment.path) {
      await (0, import_deleteDraftAttachment.deleteDraftAttachment)(targetAttachment);
    }
  };
}
function replaceAttachments(conversationId, attachments) {
  return (dispatch, getState) => {
    if (getState().conversations.selectedConversationId !== conversationId) {
      return;
    }
    dispatch({
      type: REPLACE_ATTACHMENTS,
      payload: attachments.map(import_resolveDraftAttachmentOnDisk.resolveDraftAttachmentOnDisk)
    });
  };
}
function resetComposer() {
  return {
    type: RESET_COMPOSER
  };
}
function setMediaQualitySetting(payload) {
  return {
    type: SET_HIGH_QUALITY_SETTING,
    payload
  };
}
function setQuotedMessage(payload) {
  return {
    type: SET_QUOTED_MESSAGE,
    payload
  };
}
function getEmptyState() {
  return {
    attachments: [],
    linkPreviewLoading: false,
    shouldSendHighQualityAttachments: false
  };
}
function reducer(state = getEmptyState(), action) {
  if (action.type === RESET_COMPOSER) {
    return getEmptyState();
  }
  if (action.type === REPLACE_ATTACHMENTS) {
    const { payload: attachments } = action;
    return {
      ...state,
      attachments,
      ...attachments.length ? {} : { shouldSendHighQualityAttachments: false }
    };
  }
  if (action.type === SET_HIGH_QUALITY_SETTING) {
    return {
      ...state,
      shouldSendHighQualityAttachments: action.payload
    };
  }
  if (action.type === SET_QUOTED_MESSAGE) {
    return {
      ...state,
      quotedMessage: action.payload
    };
  }
  if (action.type === import_linkPreviews.ADD_PREVIEW) {
    if (action.payload.source !== import_LinkPreview.LinkPreviewSourceType.Composer) {
      return state;
    }
    return {
      ...state,
      linkPreviewLoading: true,
      linkPreviewResult: action.payload.linkPreview
    };
  }
  if (action.type === import_linkPreviews.REMOVE_PREVIEW) {
    return (0, import_assignWithNoUnnecessaryAllocation.assignWithNoUnnecessaryAllocation)(state, {
      linkPreviewLoading: false,
      linkPreviewResult: void 0
    });
  }
  if (action.type === ADD_PENDING_ATTACHMENT) {
    return {
      ...state,
      attachments: [...state.attachments, action.payload]
    };
  }
  return state;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  actions,
  getEmptyState,
  reducer
});
//# sourceMappingURL=data:application/json;base64,
