var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var preferredReactions_exports = {};
__export(preferredReactions_exports, {
  actions: () => actions,
  getEmptyState: () => getEmptyState,
  reducer: () => reducer,
  useActions: () => useActions
});
module.exports = __toCommonJS(preferredReactions_exports);
var import_lodash = require("lodash");
var log = __toESM(require("../../logging/log"));
var Errors = __toESM(require("../../types/errors"));
var import_replaceIndex = require("../../util/replaceIndex");
var import_useBoundActions = require("../../hooks/useBoundActions");
var import_constants = require("../../reactions/constants");
var import_preferredReactionEmoji = require("../../reactions/preferredReactionEmoji");
var import_items = require("../selectors/items");
var import_lib = require("../../components/emoji/lib");
const CANCEL_CUSTOMIZE_PREFERRED_REACTIONS_MODAL = "preferredReactions/CANCEL_CUSTOMIZE_PREFERRED_REACTIONS_MODAL";
const DESELECT_DRAFT_EMOJI = "preferredReactions/DESELECT_DRAFT_EMOJI";
const OPEN_CUSTOMIZE_PREFERRED_REACTIONS_MODAL = "preferredReactions/OPEN_CUSTOMIZE_PREFERRED_REACTIONS_MODAL";
const REPLACE_SELECTED_DRAFT_EMOJI = "preferredReactions/REPLACE_SELECTED_DRAFT_EMOJI";
const RESET_DRAFT_EMOJI = "preferredReactions/RESET_DRAFT_EMOJI";
const SAVE_PREFERRED_REACTIONS_FULFILLED = "preferredReactions/SAVE_PREFERRED_REACTIONS_FULFILLED";
const SAVE_PREFERRED_REACTIONS_PENDING = "preferredReactions/SAVE_PREFERRED_REACTIONS_PENDING";
const SAVE_PREFERRED_REACTIONS_REJECTED = "preferredReactions/SAVE_PREFERRED_REACTIONS_REJECTED";
const SELECT_DRAFT_EMOJI_TO_BE_REPLACED = "preferredReactions/SELECT_DRAFT_EMOJI_TO_BE_REPLACED";
const actions = {
  cancelCustomizePreferredReactionsModal,
  deselectDraftEmoji,
  openCustomizePreferredReactionsModal,
  replaceSelectedDraftEmoji,
  resetDraftEmoji,
  savePreferredReactions,
  selectDraftEmojiToBeReplaced
};
const useActions = /* @__PURE__ */ __name(() => (0, import_useBoundActions.useBoundActions)(actions), "useActions");
function cancelCustomizePreferredReactionsModal() {
  return { type: CANCEL_CUSTOMIZE_PREFERRED_REACTIONS_MODAL };
}
function deselectDraftEmoji() {
  return { type: DESELECT_DRAFT_EMOJI };
}
function openCustomizePreferredReactionsModal() {
  return (dispatch, getState) => {
    const state = getState();
    const originalPreferredReactions = (0, import_preferredReactionEmoji.getPreferredReactionEmoji)(getState().items.preferredReactionEmoji, (0, import_items.getEmojiSkinTone)(state));
    dispatch({
      type: OPEN_CUSTOMIZE_PREFERRED_REACTIONS_MODAL,
      payload: { originalPreferredReactions }
    });
  };
}
function replaceSelectedDraftEmoji(newEmoji) {
  return {
    type: REPLACE_SELECTED_DRAFT_EMOJI,
    payload: newEmoji
  };
}
function resetDraftEmoji() {
  return (dispatch, getState) => {
    const skinTone = (0, import_items.getEmojiSkinTone)(getState());
    dispatch({ type: RESET_DRAFT_EMOJI, payload: { skinTone } });
  };
}
function savePreferredReactions() {
  return async (dispatch, getState) => {
    const { draftPreferredReactions } = getState().preferredReactions.customizePreferredReactionsModal || {};
    if (!draftPreferredReactions) {
      log.error("savePreferredReactions won't work because the modal is not open");
      return;
    }
    let succeeded = false;
    dispatch({ type: SAVE_PREFERRED_REACTIONS_PENDING });
    try {
      await window.storage.put("preferredReactionEmoji", draftPreferredReactions);
      succeeded = true;
    } catch (err) {
      log.warn(Errors.toLogFormat(err));
    }
    if (succeeded) {
      dispatch({ type: SAVE_PREFERRED_REACTIONS_FULFILLED });
      window.ConversationController.getOurConversationOrThrow().captureChange("preferredReactionEmoji");
    } else {
      dispatch({ type: SAVE_PREFERRED_REACTIONS_REJECTED });
    }
  };
}
function selectDraftEmojiToBeReplaced(index) {
  return {
    type: SELECT_DRAFT_EMOJI_TO_BE_REPLACED,
    payload: index
  };
}
function getEmptyState() {
  return {};
}
function reducer(state = getEmptyState(), action) {
  switch (action.type) {
    case CANCEL_CUSTOMIZE_PREFERRED_REACTIONS_MODAL:
    case SAVE_PREFERRED_REACTIONS_FULFILLED:
      return (0, import_lodash.omit)(state, ["customizePreferredReactionsModal"]);
    case DESELECT_DRAFT_EMOJI:
      if (!state.customizePreferredReactionsModal) {
        return state;
      }
      return {
        ...state,
        customizePreferredReactionsModal: {
          ...state.customizePreferredReactionsModal,
          selectedDraftEmojiIndex: void 0
        }
      };
    case OPEN_CUSTOMIZE_PREFERRED_REACTIONS_MODAL: {
      const { originalPreferredReactions } = action.payload;
      return {
        ...state,
        customizePreferredReactionsModal: {
          draftPreferredReactions: originalPreferredReactions,
          originalPreferredReactions,
          selectedDraftEmojiIndex: void 0,
          isSaving: false,
          hadSaveError: false
        }
      };
    }
    case REPLACE_SELECTED_DRAFT_EMOJI: {
      const newEmoji = action.payload;
      const { customizePreferredReactionsModal } = state;
      if (!customizePreferredReactionsModal) {
        return state;
      }
      const { draftPreferredReactions, selectedDraftEmojiIndex } = customizePreferredReactionsModal;
      if (selectedDraftEmojiIndex === void 0) {
        return state;
      }
      return {
        ...state,
        customizePreferredReactionsModal: {
          ...customizePreferredReactionsModal,
          draftPreferredReactions: (0, import_replaceIndex.replaceIndex)(draftPreferredReactions, selectedDraftEmojiIndex, newEmoji),
          selectedDraftEmojiIndex: void 0
        }
      };
    }
    case RESET_DRAFT_EMOJI: {
      const { skinTone } = action.payload;
      if (!state.customizePreferredReactionsModal) {
        return state;
      }
      return {
        ...state,
        customizePreferredReactionsModal: {
          ...state.customizePreferredReactionsModal,
          draftPreferredReactions: import_constants.DEFAULT_PREFERRED_REACTION_EMOJI_SHORT_NAMES.map((shortName) => (0, import_lib.convertShortName)(shortName, skinTone)),
          selectedDraftEmojiIndex: void 0
        }
      };
    }
    case SAVE_PREFERRED_REACTIONS_PENDING:
      if (!state.customizePreferredReactionsModal) {
        return state;
      }
      return {
        ...state,
        customizePreferredReactionsModal: {
          ...state.customizePreferredReactionsModal,
          selectedDraftEmojiIndex: void 0,
          isSaving: true,
          hadSaveError: false
        }
      };
    case SAVE_PREFERRED_REACTIONS_REJECTED:
      if (!state.customizePreferredReactionsModal) {
        return state;
      }
      return {
        ...state,
        customizePreferredReactionsModal: {
          ...state.customizePreferredReactionsModal,
          isSaving: false,
          hadSaveError: true
        }
      };
    case SELECT_DRAFT_EMOJI_TO_BE_REPLACED: {
      const index = action.payload;
      if (!state.customizePreferredReactionsModal || !(index in state.customizePreferredReactionsModal.draftPreferredReactions)) {
        return state;
      }
      return {
        ...state,
        customizePreferredReactionsModal: {
          ...state.customizePreferredReactionsModal,
          selectedDraftEmojiIndex: index
        }
      };
    }
    default:
      return state;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  actions,
  getEmptyState,
  reducer,
  useActions
});
//# sourceMappingURL=data:application/json;base64,
