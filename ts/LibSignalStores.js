var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LibSignalStores_exports = {};
__export(LibSignalStores_exports, {
  IdentityKeys: () => IdentityKeys,
  PreKeys: () => PreKeys,
  SenderKeys: () => SenderKeys,
  Sessions: () => Sessions,
  SignedPreKeys: () => SignedPreKeys
});
module.exports = __toCommonJS(LibSignalStores_exports);
var import_lodash = require("lodash");
var import_libsignal_client = require("@signalapp/libsignal-client");
var import_SignalProtocolStore = require("./SignalProtocolStore");
var import_Address = require("./types/Address");
var import_QualifiedAddress = require("./types/QualifiedAddress");
function encodeAddress(address) {
  const name = address.name();
  const deviceId = address.deviceId();
  return import_Address.Address.create(name, deviceId);
}
function toQualifiedAddress(ourUuid, address) {
  return new import_QualifiedAddress.QualifiedAddress(ourUuid, encodeAddress(address));
}
class Sessions extends import_libsignal_client.SessionStore {
  constructor({ ourUuid, zone }) {
    super();
    this.ourUuid = ourUuid;
    this.zone = zone;
  }
  async saveSession(address, record) {
    await window.textsecure.storage.protocol.storeSession(toQualifiedAddress(this.ourUuid, address), record, { zone: this.zone });
  }
  async getSession(name) {
    const encodedAddress = toQualifiedAddress(this.ourUuid, name);
    const record = await window.textsecure.storage.protocol.loadSession(encodedAddress, { zone: this.zone });
    return record || null;
  }
  async getExistingSessions(addresses) {
    const encodedAddresses = addresses.map((addr) => toQualifiedAddress(this.ourUuid, addr));
    return window.textsecure.storage.protocol.loadSessions(encodedAddresses, {
      zone: this.zone
    });
  }
}
class IdentityKeys extends import_libsignal_client.IdentityKeyStore {
  constructor({ ourUuid, zone }) {
    super();
    this.ourUuid = ourUuid;
    this.zone = zone;
  }
  async getIdentityKey() {
    const keyPair = await window.textsecure.storage.protocol.getIdentityKeyPair(this.ourUuid);
    if (!keyPair) {
      throw new Error("IdentityKeyStore/getIdentityKey: No identity key!");
    }
    return import_libsignal_client.PrivateKey.deserialize(Buffer.from(keyPair.privKey));
  }
  async getLocalRegistrationId() {
    const id = await window.textsecure.storage.protocol.getLocalRegistrationId(this.ourUuid);
    if (!(0, import_lodash.isNumber)(id)) {
      throw new Error("IdentityKeyStore/getLocalRegistrationId: No registration id!");
    }
    return id;
  }
  async getIdentity(address) {
    const encodedAddress = encodeAddress(address);
    const key = await window.textsecure.storage.protocol.loadIdentityKey(encodedAddress.uuid);
    if (!key) {
      return null;
    }
    return import_libsignal_client.PublicKey.deserialize(Buffer.from(key));
  }
  async saveIdentity(name, key) {
    const encodedAddress = encodeAddress(name);
    const publicKey = key.serialize();
    return window.textsecure.storage.protocol.saveIdentity(encodedAddress, publicKey, false, { zone: this.zone });
  }
  async isTrustedIdentity(name, key, direction) {
    const encodedAddress = encodeAddress(name);
    const publicKey = key.serialize();
    return window.textsecure.storage.protocol.isTrustedIdentity(encodedAddress, publicKey, direction);
  }
}
class PreKeys extends import_libsignal_client.PreKeyStore {
  constructor({ ourUuid }) {
    super();
    this.ourUuid = ourUuid;
  }
  async savePreKey(id, record) {
    await window.textsecure.storage.protocol.storePreKey(this.ourUuid, id, (0, import_SignalProtocolStore.freezePreKey)(record));
  }
  async getPreKey(id) {
    const preKey = await window.textsecure.storage.protocol.loadPreKey(this.ourUuid, id);
    if (preKey === void 0) {
      throw new Error(`getPreKey: PreKey ${id} not found`);
    }
    return preKey;
  }
  async removePreKey(id) {
    await window.textsecure.storage.protocol.removePreKey(this.ourUuid, id);
  }
}
class SenderKeys extends import_libsignal_client.SenderKeyStore {
  constructor({ ourUuid, zone }) {
    super();
    this.ourUuid = ourUuid;
    this.zone = zone;
  }
  async saveSenderKey(sender, distributionId, record) {
    const encodedAddress = toQualifiedAddress(this.ourUuid, sender);
    await window.textsecure.storage.protocol.saveSenderKey(encodedAddress, distributionId, record, { zone: this.zone });
  }
  async getSenderKey(sender, distributionId) {
    const encodedAddress = toQualifiedAddress(this.ourUuid, sender);
    const senderKey = await window.textsecure.storage.protocol.getSenderKey(encodedAddress, distributionId, { zone: this.zone });
    return senderKey || null;
  }
}
class SignedPreKeys extends import_libsignal_client.SignedPreKeyStore {
  constructor({ ourUuid }) {
    super();
    this.ourUuid = ourUuid;
  }
  async saveSignedPreKey(id, record) {
    await window.textsecure.storage.protocol.storeSignedPreKey(this.ourUuid, id, (0, import_SignalProtocolStore.freezeSignedPreKey)(record), true);
  }
  async getSignedPreKey(id) {
    const signedPreKey = await window.textsecure.storage.protocol.loadSignedPreKey(this.ourUuid, id);
    if (!signedPreKey) {
      throw new Error(`getSignedPreKey: SignedPreKey ${id} not found`);
    }
    return signedPreKey;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  IdentityKeys,
  PreKeys,
  SenderKeys,
  Sessions,
  SignedPreKeys
});
//# sourceMappingURL=data:application/json;base64,
