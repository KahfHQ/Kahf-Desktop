var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var sticker_test_exports = {};
module.exports = __toCommonJS(sticker_test_exports);
var import_chai = require("chai");
var import_lodash = require("lodash");
var import_mock_server = require("@signalapp/mock-server");
var import_promises = __toESM(require("fs/promises"));
var import_path = __toESM(require("path"));
var durations = __toESM(require("../../util/durations"));
var import_fixtures = require("./fixtures");
const { StickerPackOperation } = import_mock_server.Proto.SyncMessage;
const FIXTURES = import_path.default.join(__dirname, "..", "..", "..", "fixtures");
const IdentifierType = import_mock_server.Proto.ManifestRecord.Identifier.Type;
const EMPTY = new Uint8Array(0);
const STICKER_PACKS = [
  {
    id: Buffer.from("c40ed069cdc2b91eccfccf25e6bcddfc", "hex"),
    key: Buffer.from("cefadd6e81c128680aead1711eb5c92c10f63bdfbc78528a4519ba682de396e4", "hex"),
    stickerCount: 1
  },
  {
    id: Buffer.from("ae8fedafda4768fd3384d4b3b9db963d", "hex"),
    key: Buffer.from("53f4aa8b95e1c2e75afab2328fe67eb6d7affbcd4f50cd4da89dfc325dbc73ca", "hex"),
    stickerCount: 1
  }
];
function getStickerPackLink(pack) {
  return `https://signal.art/addstickers/#pack_id=${pack.id.toString("hex")}&pack_key=${pack.key.toString("hex")}`;
}
function getStickerPackRecordPredicate(pack) {
  return ({ type, record }) => {
    if (type !== IdentifierType.STICKER_PACK) {
      return false;
    }
    return pack.id.equals(record.stickerPack?.packId ?? EMPTY);
  };
}
describe("storage service", function needsName() {
  this.timeout(durations.MINUTE);
  let bootstrap;
  let app;
  beforeEach(async () => {
    ({ bootstrap, app } = await (0, import_fixtures.initStorage)());
    const { server } = bootstrap;
    await Promise.all(STICKER_PACKS.map(async ({ id, stickerCount }) => {
      const hexId = id.toString("hex");
      await server.storeStickerPack({
        id,
        manifest: await import_promises.default.readFile(import_path.default.join(FIXTURES, `stickerpack-${hexId}.bin`)),
        stickers: await Promise.all((0, import_lodash.range)(0, stickerCount).map(async (index) => import_promises.default.readFile(import_path.default.join(FIXTURES, `stickerpack-${hexId}-${index}.bin`))))
      });
    }));
  });
  afterEach(async function after() {
    if (!bootstrap) {
      return;
    }
    if (this.currentTest?.state !== "passed") {
      await bootstrap.saveLogs();
    }
    await app.close();
    await bootstrap.teardown();
  });
  it("should install/uninstall stickers", async () => {
    const { phone, desktop, contacts } = bootstrap;
    const [firstContact] = contacts;
    const window = await app.getWindow();
    const leftPane = window.locator(".left-pane-wrapper");
    const conversationStack = window.locator(".conversation-stack");
    (0, import_fixtures.debug)("sending two sticker pack links");
    await firstContact.sendText(desktop, `First sticker pack ${getStickerPackLink(STICKER_PACKS[0])}`);
    await firstContact.sendText(desktop, `Second sticker pack ${getStickerPackLink(STICKER_PACKS[1])}`);
    await leftPane.locator(`_react=ConversationListItem[title = ${JSON.stringify(firstContact.profileName)}]`).click();
    {
      (0, import_fixtures.debug)("installing first sticker pack via UI");
      const state = await phone.expectStorageState("initial state");
      await conversationStack.locator(`a:has-text("${STICKER_PACKS[0].id.toString("hex")}")`).click({ noWaitAfter: true });
      await window.locator('.module-sticker-manager__preview-modal__container button >> "Install"').click();
      (0, import_fixtures.debug)("waiting for sync message");
      const { syncMessage } = await phone.waitForSyncMessage((entry) => Boolean(entry.syncMessage.stickerPackOperation?.length));
      const [syncOp] = syncMessage.stickerPackOperation ?? [];
      import_chai.assert.isTrue(STICKER_PACKS[0].id.equals(syncOp?.packId ?? EMPTY));
      import_chai.assert.isTrue(STICKER_PACKS[0].key.equals(syncOp?.packKey ?? EMPTY));
      import_chai.assert.strictEqual(syncOp?.type, StickerPackOperation.Type.INSTALL);
      (0, import_fixtures.debug)("waiting for storage service update");
      const stateAfter = await phone.waitForStorageState({ after: state });
      const stickerPack = stateAfter.findRecord(getStickerPackRecordPredicate(STICKER_PACKS[0]));
      import_chai.assert.ok(stickerPack, "New storage state should have sticker pack record");
      import_chai.assert.isTrue(STICKER_PACKS[0].key.equals(stickerPack?.record.stickerPack?.packKey ?? EMPTY), "Wrong sticker pack key");
      import_chai.assert.strictEqual(stickerPack?.record.stickerPack?.position, 6, "Wrong sticker pack position");
    }
    {
      (0, import_fixtures.debug)("uninstalling first sticker pack via UI");
      const state = await phone.expectStorageState("initial state");
      await conversationStack.locator(`a:has-text("${STICKER_PACKS[0].id.toString("hex")}")`).click({ noWaitAfter: true });
      await window.locator('.module-sticker-manager__preview-modal__container button >> "Uninstall"').click();
      await window.locator('.module-Modal button >> "Uninstall"').click();
      (0, import_fixtures.debug)("waiting for sync message");
      const { syncMessage } = await phone.waitForSyncMessage((entry) => Boolean(entry.syncMessage.stickerPackOperation?.length));
      const [syncOp] = syncMessage.stickerPackOperation ?? [];
      import_chai.assert.isTrue(STICKER_PACKS[0].id.equals(syncOp?.packId ?? EMPTY));
      import_chai.assert.strictEqual(syncOp?.type, StickerPackOperation.Type.REMOVE);
      (0, import_fixtures.debug)("waiting for storage service update");
      const stateAfter = await phone.waitForStorageState({ after: state });
      const stickerPack = stateAfter.findRecord(getStickerPackRecordPredicate(STICKER_PACKS[0]));
      import_chai.assert.ok(stickerPack, "New storage state should have sticker pack record");
      import_chai.assert.deepStrictEqual(stickerPack?.record.stickerPack?.packKey, EMPTY, "Sticker pack key should be removed");
      const deletedAt = stickerPack?.record.stickerPack?.deletedAtTimestamp?.toNumber() ?? 0;
      import_chai.assert.isAbove(deletedAt, Date.now() - durations.HOUR, "Sticker pack should have deleted at timestamp");
    }
    (0, import_fixtures.debug)("opening sticker picker");
    conversationStack.locator(".CompositionArea .module-sticker-button__button").click();
    const stickerPicker = conversationStack.locator(".module-sticker-picker");
    {
      (0, import_fixtures.debug)("installing first sticker pack via storage service");
      const state = await phone.expectStorageState("initial state");
      await phone.setStorageState(state.updateRecord(getStickerPackRecordPredicate(STICKER_PACKS[0]), (record) => ({
        ...record,
        stickerPack: {
          ...record?.stickerPack,
          packKey: STICKER_PACKS[0].key,
          position: 7,
          deletedAtTimestamp: void 0
        }
      })));
      await phone.sendFetchStorage({
        timestamp: bootstrap.getTimestamp()
      });
      (0, import_fixtures.debug)("waiting for sticker pack to become visible");
      stickerPicker.locator(`button.module-sticker-picker__header__button[key="${STICKER_PACKS[0].id.toString("hex")}"]`).waitFor();
    }
    {
      (0, import_fixtures.debug)("installing second sticker pack via sync message");
      const state = await phone.expectStorageState("initial state");
      await phone.sendStickerPackSync({
        type: "install",
        packId: STICKER_PACKS[1].id,
        packKey: STICKER_PACKS[1].key,
        timestamp: bootstrap.getTimestamp()
      });
      (0, import_fixtures.debug)("waiting for sticker pack to become visible");
      stickerPicker.locator(`button.module-sticker-picker__header__button[key="${STICKER_PACKS[1].id.toString("hex")}"]`).waitFor();
      (0, import_fixtures.debug)("waiting for storage service update");
      const stateAfter = await phone.waitForStorageState({ after: state });
      const stickerPack = stateAfter.findRecord(getStickerPackRecordPredicate(STICKER_PACKS[1]));
      import_chai.assert.ok(stickerPack, "New storage state should have sticker pack record");
      import_chai.assert.isTrue(STICKER_PACKS[1].key.equals(stickerPack?.record.stickerPack?.packKey ?? EMPTY), "Wrong sticker pack key");
      import_chai.assert.strictEqual(stickerPack?.record.stickerPack?.position, 6, "Wrong sticker pack position");
    }
    (0, import_fixtures.debug)("Verifying the final manifest version");
    const finalState = await phone.expectStorageState("consistency check");
    import_chai.assert.strictEqual(finalState.version, 5);
  });
});
//# sourceMappingURL=data:application/json;base64,
