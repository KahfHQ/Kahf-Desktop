var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useFabricHistory_exports = {};
__export(useFabricHistory_exports, {
  useFabricHistory: () => useFabricHistory
});
module.exports = __toCommonJS(useFabricHistory_exports);
var import_react = require("react");
var import_fabric = require("fabric");
var log = __toESM(require("../logging/log"));
var import_MediaEditorFabricIText = require("./MediaEditorFabricIText");
var import_MediaEditorFabricPath = require("./MediaEditorFabricPath");
var import_MediaEditorFabricSticker = require("./MediaEditorFabricSticker");
var import_fabricEffectListener = require("./fabricEffectListener");
var import_assert = require("../util/assert");
const SNAPSHOT_LIMIT = 1e3;
function useFabricHistory({
  fabricCanvas,
  imageState,
  setImageState
}) {
  const [state, setState] = (0, import_react.useState)({
    snapshots: [],
    highWatermark: 0,
    appliedHighWatermark: 0
  });
  const { highWatermark, snapshots } = state;
  const isTimeTraveling = getIsTimeTraveling(state);
  const desiredSnapshot = snapshots[highWatermark - 1];
  const takeSnapshotInternal = (0, import_react.useCallback)((snapshot) => {
    setState((oldState) => {
      const newSnapshots = oldState.snapshots.slice(0, oldState.highWatermark);
      newSnapshots.push(snapshot);
      while (newSnapshots.length > SNAPSHOT_LIMIT) {
        newSnapshots.shift();
      }
      return {
        snapshots: newSnapshots,
        highWatermark: newSnapshots.length,
        appliedHighWatermark: newSnapshots.length
      };
    });
  }, []);
  const takeSnapshot = (0, import_react.useCallback)((logMessage, newImageState, canvasOverride) => {
    const canvas = canvasOverride || fabricCanvas;
    (0, import_assert.strictAssert)(canvas, "Media editor: tried to take a snapshot without a canvas");
    log.info(`Media editor: taking snapshot of image state from ${logMessage}`);
    takeSnapshotInternal({
      canvasState: getCanvasState(canvas),
      imageState: newImageState
    });
  }, [fabricCanvas, takeSnapshotInternal]);
  const undoIfPossible = (0, import_react.useCallback)(() => {
    log.info("Media editor: undoing");
    setState((oldState) => getIsTimeTraveling(oldState) ? oldState : {
      ...oldState,
      highWatermark: Math.max(oldState.highWatermark - 1, 1)
    });
  }, []);
  const redoIfPossible = (0, import_react.useCallback)(() => {
    log.info("Media editor: redoing");
    setState((oldState) => getIsTimeTraveling(oldState) ? oldState : {
      ...oldState,
      highWatermark: Math.min(oldState.highWatermark + 1, oldState.snapshots.length)
    });
  }, []);
  (0, import_react.useEffect)(() => {
    import_fabric.fabric.Object.NUM_FRACTION_DIGITS = 16;
    Object.assign(import_fabric.fabric, {
      MediaEditorFabricIText: import_MediaEditorFabricIText.MediaEditorFabricIText,
      MediaEditorFabricPath: import_MediaEditorFabricPath.MediaEditorFabricPath,
      MediaEditorFabricSticker: import_MediaEditorFabricSticker.MediaEditorFabricSticker
    });
  }, []);
  (0, import_react.useEffect)(() => {
    if (!fabricCanvas || !isTimeTraveling || !desiredSnapshot) {
      return;
    }
    log.info(`Media editor: time-traveling to snapshot ${highWatermark}`);
    fabricCanvas.loadFromJSON(desiredSnapshot.canvasState, () => {
      setImageState(desiredSnapshot.imageState);
      setState((oldState) => ({
        ...oldState,
        appliedHighWatermark: highWatermark
      }));
    });
  }, [
    desiredSnapshot,
    fabricCanvas,
    highWatermark,
    isTimeTraveling,
    setImageState
  ]);
  (0, import_react.useEffect)(() => {
    if (!fabricCanvas || isTimeTraveling) {
      return;
    }
    return (0, import_fabricEffectListener.fabricEffectListener)(fabricCanvas, ["object:added", "object:modified", "object:removed"], ({ target }) => {
      if (isTimeTraveling || target?.excludeFromExport) {
        return;
      }
      log.info("Media editor: taking snapshot from object change");
      takeSnapshotInternal({
        canvasState: getCanvasState(fabricCanvas),
        imageState
      });
    });
  }, [takeSnapshotInternal, fabricCanvas, isTimeTraveling, imageState]);
  return {
    canRedo: highWatermark < snapshots.length,
    canUndo: highWatermark > 1,
    redoIfPossible,
    takeSnapshot,
    undoIfPossible
  };
}
function getCanvasState(fabricCanvas) {
  return JSON.stringify(fabricCanvas.toDatalessJSON());
}
function getIsTimeTraveling({
  highWatermark,
  appliedHighWatermark
}) {
  return highWatermark !== appliedHighWatermark;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useFabricHistory
});
//# sourceMappingURL=data:application/json;base64,
