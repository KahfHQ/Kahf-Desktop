var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var challenge_exports = {};
__export(challenge_exports, {
  ChallengeHandler: () => ChallengeHandler,
  STORAGE_KEY: () => STORAGE_KEY,
  getChallengeURL: () => getChallengeURL
});
module.exports = __toCommonJS(challenge_exports);
var import_assert = require("./util/assert");
var import_timestamp = require("./util/timestamp");
var import_parseRetryAfter = require("./util/parseRetryAfter");
var import_clearTimeoutIfNecessary = require("./util/clearTimeoutIfNecessary");
var import_environment = require("./environment");
var import_Errors = require("./textsecure/Errors");
var log = __toESM(require("./logging/log"));
const STORAGE_KEY = "challenge:conversations";
const DEFAULT_EXPIRE_AFTER = 24 * 3600 * 1e3;
const CAPTCHA_URL = "https://signalcaptchas.org/challenge/generate.html";
const CAPTCHA_STAGING_URL = "https://signalcaptchas.org/staging/challenge/generate.html";
function shouldStartQueue(registered) {
  if (!registered.retryAt) {
    return false;
  }
  if (registered.retryAt <= Date.now()) {
    return true;
  }
  return false;
}
function getChallengeURL() {
  if ((0, import_environment.getEnvironment)() === import_environment.Environment.Staging) {
    return CAPTCHA_STAGING_URL;
  }
  return CAPTCHA_URL;
}
class ChallengeHandler {
  constructor(options) {
    this.options = options;
    this.solving = 0;
    this.isLoaded = false;
    this.seq = 0;
    this.isOnline = false;
    this.responseHandlers = /* @__PURE__ */ new Map();
    this.registeredConversations = /* @__PURE__ */ new Map();
    this.startTimers = /* @__PURE__ */ new Map();
    this.pendingStarts = /* @__PURE__ */ new Set();
  }
  async load() {
    if (this.isLoaded) {
      return;
    }
    this.isLoaded = true;
    const challenges = this.options.storage.get(STORAGE_KEY) || [];
    log.info(`challenge: loading ${challenges.length} challenges`);
    await Promise.all(challenges.map(async (challenge) => {
      const expireAfter = this.options.expireAfter || DEFAULT_EXPIRE_AFTER;
      if ((0, import_timestamp.isOlderThan)(challenge.createdAt, expireAfter)) {
        log.info(`challenge: expired challenge for conversation ${challenge.conversationId}`);
        return;
      }
      await this.register(challenge);
    }));
  }
  async onOffline() {
    this.isOnline = false;
    log.info("challenge: offline");
  }
  async onOnline() {
    this.isOnline = true;
    const pending = Array.from(this.pendingStarts.values());
    this.pendingStarts.clear();
    log.info(`challenge: online, starting ${pending.length} queues`);
    await Promise.all(pending.map((conversationId) => this.startQueue(conversationId)));
    await this.startAllQueues();
  }
  maybeSolve(conversationId) {
    const challenge = this.registeredConversations.get(conversationId);
    if (!challenge) {
      return;
    }
    if (this.solving > 0) {
      return;
    }
    if (challenge.token) {
      this.solve(challenge.token);
    }
  }
  async register(challenge, data) {
    const { conversationId } = challenge;
    if (this.isRegistered(conversationId)) {
      log.info(`challenge: conversation ${conversationId}  already registered`);
      return;
    }
    this.registeredConversations.set(conversationId, challenge);
    await this.persist();
    if (shouldStartQueue(challenge)) {
      log.info(`challenge: starting conversation ${conversationId} immediately`);
      await this.startQueue(conversationId);
      return;
    }
    if (challenge.retryAt) {
      const waitTime = Math.max(0, challenge.retryAt - Date.now());
      const oldTimer = this.startTimers.get(conversationId);
      if (oldTimer) {
        (0, import_clearTimeoutIfNecessary.clearTimeoutIfNecessary)(oldTimer);
      }
      this.startTimers.set(conversationId, setTimeout(() => {
        this.startTimers.delete(conversationId);
        this.startQueue(conversationId);
      }, waitTime));
      log.info(`challenge: tracking ${conversationId} with waitTime=${waitTime}`);
    } else {
      log.info(`challenge: tracking ${conversationId} with no waitTime`);
    }
    if (data && !data.options?.includes("recaptcha")) {
      log.error(`challenge: unexpected options ${JSON.stringify(data.options)}`);
    }
    if (!challenge.token) {
      const dataString = JSON.stringify(data);
      log.error(`challenge: ${conversationId} is waiting; no token in data ${dataString}`);
      return;
    }
    this.solve(challenge.token);
  }
  onResponse(response) {
    const handler = this.responseHandlers.get(response.seq);
    if (!handler) {
      return;
    }
    this.responseHandlers.delete(response.seq);
    handler.resolve(response.data);
  }
  async unregister(conversationId) {
    log.info(`challenge: unregistered conversation ${conversationId}`);
    this.registeredConversations.delete(conversationId);
    this.pendingStarts.delete(conversationId);
    const timer = this.startTimers.get(conversationId);
    this.startTimers.delete(conversationId);
    (0, import_clearTimeoutIfNecessary.clearTimeoutIfNecessary)(timer);
    await this.persist();
  }
  async requestCaptcha(token = "") {
    const request = { seq: this.seq };
    this.seq += 1;
    this.options.requestChallenge(request);
    const response = await new Promise((resolve, reject) => {
      this.responseHandlers.set(request.seq, { token, resolve, reject });
    });
    return response.captcha;
  }
  async persist() {
    (0, import_assert.assert)(this.isLoaded, "ChallengeHandler has to be loaded before persisting new data");
    await this.options.storage.put(STORAGE_KEY, Array.from(this.registeredConversations.values()));
  }
  isRegistered(conversationId) {
    return this.registeredConversations.has(conversationId);
  }
  startAllQueues({
    force = false
  } = {}) {
    log.info(`challenge: startAllQueues force=${force}`);
    Array.from(this.registeredConversations.values()).filter((challenge) => force || shouldStartQueue(challenge)).forEach((challenge) => this.startQueue(challenge.conversationId));
  }
  async startQueue(conversationId) {
    if (!this.isOnline) {
      this.pendingStarts.add(conversationId);
      return;
    }
    await this.unregister(conversationId);
    if (this.registeredConversations.size === 0) {
      this.options.setChallengeStatus("idle");
    }
    log.info(`startQueue: starting queue ${conversationId}`);
    this.options.startQueue(conversationId);
  }
  async solve(token) {
    this.solving += 1;
    this.options.setChallengeStatus("required");
    this.challengeToken = token;
    const captcha = await this.requestCaptcha(token);
    if (this.challengeToken === void 0) {
      this.solving -= 1;
      return;
    }
    const lastToken = this.challengeToken;
    this.challengeToken = void 0;
    this.options.setChallengeStatus("pending");
    log.info("challenge: sending challenge to server");
    try {
      await this.sendChallengeResponse({
        type: "recaptcha",
        token: lastToken,
        captcha
      });
    } catch (error) {
      log.error(`challenge: challenge failure, error: ${error && error.stack}`);
      this.options.setChallengeStatus("required");
      this.solving -= 1;
      return;
    }
    log.info("challenge: challenge success. force sending");
    this.options.setChallengeStatus("idle");
    this.startAllQueues({ force: true });
    this.solving -= 1;
  }
  async sendChallengeResponse(data) {
    try {
      await this.options.sendChallengeResponse(data);
    } catch (error) {
      if (!(error instanceof import_Errors.HTTPError) || !(error.code === 413 || error.code === 429) || !error.responseHeaders) {
        this.options.onChallengeFailed();
        throw error;
      }
      const retryAfter = (0, import_parseRetryAfter.parseRetryAfterWithDefault)(error.responseHeaders["retry-after"]);
      log.info(`challenge: retry after ${retryAfter}ms`);
      this.options.onChallengeFailed(retryAfter);
      return;
    }
    this.options.onChallengeSolved();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ChallengeHandler,
  STORAGE_KEY,
  getChallengeURL
});
//# sourceMappingURL=data:application/json;base64,
