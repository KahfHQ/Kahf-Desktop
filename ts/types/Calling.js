var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Calling_exports = {};
__export(Calling_exports, {
  CallEndedReason: () => CallEndedReason,
  CallMode: () => CallMode,
  CallState: () => CallState,
  CallViewMode: () => CallViewMode,
  CallingDeviceType: () => CallingDeviceType,
  GroupCallConnectionState: () => GroupCallConnectionState,
  GroupCallJoinState: () => GroupCallJoinState,
  ProcessGroupCallRingRequestResult: () => ProcessGroupCallRingRequestResult
});
module.exports = __toCommonJS(Calling_exports);
var CallMode = /* @__PURE__ */ ((CallMode2) => {
  CallMode2["None"] = "None";
  CallMode2["Direct"] = "Direct";
  CallMode2["Group"] = "Group";
  return CallMode2;
})(CallMode || {});
var CallViewMode = /* @__PURE__ */ ((CallViewMode2) => {
  CallViewMode2["Grid"] = "Grid";
  CallViewMode2["Speaker"] = "Speaker";
  CallViewMode2["Presentation"] = "Presentation";
  return CallViewMode2;
})(CallViewMode || {});
var CallState = /* @__PURE__ */ ((CallState2) => {
  CallState2["Prering"] = "idle";
  CallState2["Ringing"] = "ringing";
  CallState2["Accepted"] = "connected";
  CallState2["Reconnecting"] = "connecting";
  CallState2["Ended"] = "ended";
  return CallState2;
})(CallState || {});
var CallEndedReason = /* @__PURE__ */ ((CallEndedReason2) => {
  CallEndedReason2["LocalHangup"] = "LocalHangup";
  CallEndedReason2["RemoteHangup"] = "RemoteHangup";
  CallEndedReason2["RemoteHangupNeedPermission"] = "RemoteHangupNeedPermission";
  CallEndedReason2["Declined"] = "Declined";
  CallEndedReason2["Busy"] = "Busy";
  CallEndedReason2["Glare"] = "Glare";
  CallEndedReason2["ReCall"] = "ReCall";
  CallEndedReason2["ReceivedOfferExpired"] = "ReceivedOfferExpired";
  CallEndedReason2["ReceivedOfferWhileActive"] = "ReceivedOfferWhileActive";
  CallEndedReason2["ReceivedOfferWithGlare"] = "ReceivedOfferWithGlare";
  CallEndedReason2["SignalingFailure"] = "SignalingFailure";
  CallEndedReason2["GlareFailure"] = "GlareFailure";
  CallEndedReason2["ConnectionFailure"] = "ConnectionFailure";
  CallEndedReason2["InternalFailure"] = "InternalFailure";
  CallEndedReason2["Timeout"] = "Timeout";
  CallEndedReason2["AcceptedOnAnotherDevice"] = "AcceptedOnAnotherDevice";
  CallEndedReason2["DeclinedOnAnotherDevice"] = "DeclinedOnAnotherDevice";
  CallEndedReason2["BusyOnAnotherDevice"] = "BusyOnAnotherDevice";
  CallEndedReason2["CallerIsNotMultiring"] = "CallerIsNotMultiring";
  return CallEndedReason2;
})(CallEndedReason || {});
var GroupCallConnectionState = /* @__PURE__ */ ((GroupCallConnectionState2) => {
  GroupCallConnectionState2[GroupCallConnectionState2["NotConnected"] = 0] = "NotConnected";
  GroupCallConnectionState2[GroupCallConnectionState2["Connecting"] = 1] = "Connecting";
  GroupCallConnectionState2[GroupCallConnectionState2["Connected"] = 2] = "Connected";
  GroupCallConnectionState2[GroupCallConnectionState2["Reconnecting"] = 3] = "Reconnecting";
  return GroupCallConnectionState2;
})(GroupCallConnectionState || {});
var GroupCallJoinState = /* @__PURE__ */ ((GroupCallJoinState2) => {
  GroupCallJoinState2[GroupCallJoinState2["NotJoined"] = 0] = "NotJoined";
  GroupCallJoinState2[GroupCallJoinState2["Joining"] = 1] = "Joining";
  GroupCallJoinState2[GroupCallJoinState2["Joined"] = 2] = "Joined";
  return GroupCallJoinState2;
})(GroupCallJoinState || {});
var CallingDeviceType = /* @__PURE__ */ ((CallingDeviceType2) => {
  CallingDeviceType2[CallingDeviceType2["CAMERA"] = 0] = "CAMERA";
  CallingDeviceType2[CallingDeviceType2["MICROPHONE"] = 1] = "MICROPHONE";
  CallingDeviceType2[CallingDeviceType2["SPEAKER"] = 2] = "SPEAKER";
  return CallingDeviceType2;
})(CallingDeviceType || {});
var ProcessGroupCallRingRequestResult = /* @__PURE__ */ ((ProcessGroupCallRingRequestResult2) => {
  ProcessGroupCallRingRequestResult2[ProcessGroupCallRingRequestResult2["ShouldRing"] = 0] = "ShouldRing";
  ProcessGroupCallRingRequestResult2[ProcessGroupCallRingRequestResult2["RingWasPreviouslyCanceled"] = 1] = "RingWasPreviouslyCanceled";
  ProcessGroupCallRingRequestResult2[ProcessGroupCallRingRequestResult2["ThereIsAnotherActiveRing"] = 2] = "ThereIsAnotherActiveRing";
  return ProcessGroupCallRingRequestResult2;
})(ProcessGroupCallRingRequestResult || {});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CallEndedReason,
  CallMode,
  CallState,
  CallViewMode,
  CallingDeviceType,
  GroupCallConnectionState,
  GroupCallJoinState,
  ProcessGroupCallRingRequestResult
});
//# sourceMappingURL=data:application/json;base64,
