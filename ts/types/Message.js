var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Message_exports = {};
__export(Message_exports, {
  getMentionsRegex: () => getMentionsRegex,
  hasExpiration: () => hasExpiration,
  isUserMessage: () => isUserMessage
});
module.exports = __toCommonJS(Message_exports);
function getMentionsRegex() {
  return /\uFFFC/g;
}
const isUserMessage = /* @__PURE__ */ __name((message) => message.type === "incoming" || message.type === "outgoing", "isUserMessage");
const hasExpiration = /* @__PURE__ */ __name((message) => {
  if (!isUserMessage(message)) {
    return false;
  }
  const { expireTimer } = message;
  return typeof expireTimer === "number" && expireTimer > 0;
}, "hasExpiration");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getMentionsRegex,
  hasExpiration,
  isUserMessage
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiTWVzc2FnZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMiBTaWduYWwgTWVzc2VuZ2VyLCBMTENcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBR1BMLTMuMC1vbmx5XG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuXG5pbXBvcnQgdHlwZSB7IEF0dGFjaG1lbnRUeXBlIH0gZnJvbSAnLi9BdHRhY2htZW50JztcbmltcG9ydCB0eXBlIHsgRW1iZWRkZWRDb250YWN0VHlwZSB9IGZyb20gJy4vRW1iZWRkZWRDb250YWN0JztcbmltcG9ydCB0eXBlIHsgSW5kZXhhYmxlQm9vbGVhbiwgSW5kZXhhYmxlUHJlc2VuY2UgfSBmcm9tICcuL0luZGV4ZWREQic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW50aW9uc1JlZ2V4KCk6IFJlZ0V4cCB7XG4gIHJldHVybiAvXFx1RkZGQy9nO1xufVxuXG5leHBvcnQgdHlwZSBNZXNzYWdlID0gKFxuICB8IFVzZXJNZXNzYWdlXG4gIHwgVmVyaWZpZWRDaGFuZ2VNZXNzYWdlXG4gIHwgUHJvZmlsZUNoYW5nZU5vdGlmaWNhdGlvbk1lc3NhZ2VcbikgJiB7IGRlbGV0ZWRGb3JFdmVyeW9uZT86IGJvb2xlYW4gfTtcbmV4cG9ydCB0eXBlIFVzZXJNZXNzYWdlID0gSW5jb21pbmdNZXNzYWdlIHwgT3V0Z29pbmdNZXNzYWdlO1xuXG5leHBvcnQgdHlwZSBJbmNvbWluZ01lc3NhZ2UgPSBSZWFkb25seTxcbiAge1xuICAgIHR5cGU6ICdpbmNvbWluZyc7XG4gICAgLy8gUmVxdWlyZWRcbiAgICBhdHRhY2htZW50czogQXJyYXk8QXR0YWNobWVudFR5cGU+O1xuICAgIGlkOiBzdHJpbmc7XG4gICAgcmVjZWl2ZWRfYXQ6IG51bWJlcjtcblxuICAgIC8vIE9wdGlvbmFsXG4gICAgYm9keT86IHN0cmluZztcbiAgICBkZWNyeXB0ZWRfYXQ/OiBudW1iZXI7XG4gICAgZXJyb3JzPzogQXJyYXk8RXJyb3I+O1xuICAgIGV4cGlyZVRpbWVyPzogbnVtYmVyO1xuICAgIG1lc3NhZ2VUaW1lcj86IG51bWJlcjsgLy8gZGVwcmVjYXRlZFxuICAgIGlzVmlld09uY2U/OiBudW1iZXI7XG4gICAgZmxhZ3M/OiBudW1iZXI7XG4gICAgc291cmNlPzogc3RyaW5nO1xuICAgIHNvdXJjZURldmljZT86IG51bWJlcjtcbiAgfSAmIFNoYXJlZE1lc3NhZ2VQcm9wZXJ0aWVzICZcbiAgICBNZXNzYWdlU2NoZW1hVmVyc2lvbjUgJlxuICAgIE1lc3NhZ2VTY2hlbWFWZXJzaW9uNiAmXG4gICAgRXhwaXJhdGlvblRpbWVyVXBkYXRlXG4+O1xuXG5leHBvcnQgdHlwZSBPdXRnb2luZ01lc3NhZ2UgPSBSZWFkb25seTxcbiAge1xuICAgIHR5cGU6ICdvdXRnb2luZyc7XG5cbiAgICAvLyBSZXF1aXJlZFxuICAgIGF0dGFjaG1lbnRzOiBBcnJheTxBdHRhY2htZW50VHlwZT47XG4gICAgZXhwaXJhdGlvblN0YXJ0VGltZXN0YW1wOiBudW1iZXI7XG4gICAgaWQ6IHN0cmluZztcbiAgICByZWNlaXZlZF9hdDogbnVtYmVyO1xuXG4gICAgLy8gT3B0aW9uYWxcbiAgICBib2R5Pzogc3RyaW5nO1xuICAgIGV4cGlyZVRpbWVyPzogbnVtYmVyO1xuICAgIG1lc3NhZ2VUaW1lcj86IG51bWJlcjsgLy8gZGVwcmVjYXRlZFxuICAgIGlzVmlld09uY2U/OiBudW1iZXI7XG4gICAgc3luY2VkOiBib29sZWFuO1xuICB9ICYgU2hhcmVkTWVzc2FnZVByb3BlcnRpZXMgJlxuICAgIE1lc3NhZ2VTY2hlbWFWZXJzaW9uNSAmXG4gICAgRXhwaXJhdGlvblRpbWVyVXBkYXRlXG4+O1xuXG5leHBvcnQgdHlwZSBWZXJpZmllZENoYW5nZU1lc3NhZ2UgPSBSZWFkb25seTxcbiAge1xuICAgIHR5cGU6ICd2ZXJpZmllZC1jaGFuZ2UnO1xuICB9ICYgU2hhcmVkTWVzc2FnZVByb3BlcnRpZXMgJlxuICAgIE1lc3NhZ2VTY2hlbWFWZXJzaW9uNSAmXG4gICAgRXhwaXJhdGlvblRpbWVyVXBkYXRlXG4+O1xuXG5leHBvcnQgdHlwZSBQcm9maWxlQ2hhbmdlTm90aWZpY2F0aW9uTWVzc2FnZSA9IFJlYWRvbmx5PFxuICB7XG4gICAgdHlwZTogJ3Byb2ZpbGUtY2hhbmdlJztcbiAgfSAmIFNoYXJlZE1lc3NhZ2VQcm9wZXJ0aWVzICZcbiAgICBNZXNzYWdlU2NoZW1hVmVyc2lvbjUgJlxuICAgIEV4cGlyYXRpb25UaW1lclVwZGF0ZVxuPjtcblxuZXhwb3J0IHR5cGUgU2hhcmVkTWVzc2FnZVByb3BlcnRpZXMgPSBSZWFkb25seTx7XG4gIGNvbnZlcnNhdGlvbklkOiBzdHJpbmc7XG4gIHNlbnRfYXQ6IG51bWJlcjtcbiAgdGltZXN0YW1wOiBudW1iZXI7XG59PjtcblxuZXhwb3J0IHR5cGUgRXhwaXJhdGlvblRpbWVyVXBkYXRlID0gUGFydGlhbDxcbiAgUmVhZG9ubHk8e1xuICAgIGV4cGlyYXRpb25UaW1lclVwZGF0ZTogUmVhZG9ubHk8e1xuICAgICAgZXhwaXJlVGltZXI6IG51bWJlcjtcbiAgICAgIGZyb21TeW5jOiBib29sZWFuO1xuICAgICAgc291cmNlOiBzdHJpbmc7IC8vIFBob25lTnVtYmVyXG4gICAgfT47XG4gIH0+XG4+O1xuXG5leHBvcnQgdHlwZSBNZXNzYWdlU2NoZW1hVmVyc2lvbjUgPSBQYXJ0aWFsPFxuICBSZWFkb25seTx7XG4gICAgaGFzQXR0YWNobWVudHM6IEluZGV4YWJsZUJvb2xlYW47XG4gICAgaGFzVmlzdWFsTWVkaWFBdHRhY2htZW50czogSW5kZXhhYmxlUHJlc2VuY2U7XG4gICAgaGFzRmlsZUF0dGFjaG1lbnRzOiBJbmRleGFibGVQcmVzZW5jZTtcbiAgfT5cbj47XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VTY2hlbWFWZXJzaW9uNiA9IFBhcnRpYWw8XG4gIFJlYWRvbmx5PHtcbiAgICBjb250YWN0OiBBcnJheTxFbWJlZGRlZENvbnRhY3RUeXBlPjtcbiAgfT5cbj47XG5cbmV4cG9ydCBjb25zdCBpc1VzZXJNZXNzYWdlID0gKG1lc3NhZ2U6IE1lc3NhZ2UpOiBtZXNzYWdlIGlzIFVzZXJNZXNzYWdlID0+XG4gIG1lc3NhZ2UudHlwZSA9PT0gJ2luY29taW5nJyB8fCBtZXNzYWdlLnR5cGUgPT09ICdvdXRnb2luZyc7XG5cbmV4cG9ydCBjb25zdCBoYXNFeHBpcmF0aW9uID0gKG1lc3NhZ2U6IE1lc3NhZ2UpOiBib29sZWFuID0+IHtcbiAgaWYgKCFpc1VzZXJNZXNzYWdlKG1lc3NhZ2UpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgeyBleHBpcmVUaW1lciB9ID0gbWVzc2FnZTtcblxuICByZXR1cm4gdHlwZW9mIGV4cGlyZVRpbWVyID09PSAnbnVtYmVyJyAmJiBleHBpcmVUaW1lciA+IDA7XG59O1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFTTyw0QkFBb0M7QUFDekMsU0FBTztBQUNUO0FBRmdCLEFBc0dULE1BQU0sZ0JBQWdCLHdCQUFDLFlBQzVCLFFBQVEsU0FBUyxjQUFjLFFBQVEsU0FBUyxZQURyQjtBQUd0QixNQUFNLGdCQUFnQix3QkFBQyxZQUE4QjtBQUMxRCxNQUFJLENBQUMsY0FBYyxPQUFPLEdBQUc7QUFDM0IsV0FBTztBQUFBLEVBQ1Q7QUFFQSxRQUFNLEVBQUUsZ0JBQWdCO0FBRXhCLFNBQU8sT0FBTyxnQkFBZ0IsWUFBWSxjQUFjO0FBQzFELEdBUjZCOyIsCiAgIm5hbWVzIjogW10KfQo=
