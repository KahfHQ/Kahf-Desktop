var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var RendererConfig_exports = {};
__export(RendererConfig_exports, {
  directoryConfigSchema: () => directoryConfigSchema,
  rendererConfigSchema: () => rendererConfigSchema
});
module.exports = __toCommonJS(RendererConfig_exports);
var import_zod = require("zod");
var import_StorageUIKeys = require("./StorageUIKeys");
var import_environment = require("../environment");
const configRequiredStringSchema = import_zod.z.string().nonempty();
const configOptionalUnknownSchema = configRequiredStringSchema.or(import_zod.z.unknown());
const configOptionalStringSchema = configRequiredStringSchema.or(import_zod.z.undefined());
const directoryV1ConfigSchema = import_zod.z.object({
  directoryVersion: import_zod.z.literal(1),
  directoryEnclaveId: configRequiredStringSchema,
  directoryTrustAnchor: configRequiredStringSchema,
  directoryUrl: configRequiredStringSchema
});
const directoryV2ConfigSchema = import_zod.z.object({
  directoryVersion: import_zod.z.literal(2),
  directoryV2CodeHashes: import_zod.z.array(import_zod.z.string().nonempty()),
  directoryV2PublicKey: configRequiredStringSchema,
  directoryV2Url: configRequiredStringSchema
});
const directoryV3ConfigSchema = import_zod.z.object({
  directoryVersion: import_zod.z.literal(3),
  directoryV3Url: configRequiredStringSchema,
  directoryV3MRENCLAVE: configRequiredStringSchema
});
const directoryConfigSchema = import_zod.z.object({
  directoryEnclaveId: configOptionalUnknownSchema,
  directoryTrustAnchor: configOptionalUnknownSchema,
  directoryUrl: configOptionalUnknownSchema,
  directoryV2CodeHashes: configOptionalUnknownSchema,
  directoryV2PublicKey: configOptionalUnknownSchema,
  directoryV2Url: configOptionalUnknownSchema,
  directoryV3Url: configOptionalUnknownSchema,
  directoryV3MRENCLAVE: configOptionalUnknownSchema
}).and(directoryV1ConfigSchema.or(directoryV2ConfigSchema).or(directoryV3ConfigSchema));
const rendererConfigSchema = import_zod.z.object({
  appInstance: configOptionalStringSchema,
  appStartInitialSpellcheckSetting: import_zod.z.boolean(),
  buildCreation: import_zod.z.number(),
  buildExpiration: import_zod.z.number(),
  cdnUrl0: configRequiredStringSchema,
  cdnUrl2: configRequiredStringSchema,
  certificateAuthority: configRequiredStringSchema,
  contentProxyUrl: configRequiredStringSchema,
  crashDumpsPath: configRequiredStringSchema,
  enableCI: import_zod.z.boolean(),
  environment: import_environment.environmentSchema,
  homePath: configRequiredStringSchema,
  hostname: configRequiredStringSchema,
  locale: configRequiredStringSchema,
  name: configRequiredStringSchema,
  nodeVersion: configRequiredStringSchema,
  proxyUrl: configOptionalStringSchema,
  reducedMotionSetting: import_zod.z.boolean(),
  serverPublicParams: configRequiredStringSchema,
  serverTrustRoot: configRequiredStringSchema,
  serverUrl: configRequiredStringSchema,
  sfuUrl: configRequiredStringSchema,
  storageUrl: configRequiredStringSchema,
  theme: import_StorageUIKeys.themeSettingSchema,
  updatesUrl: configRequiredStringSchema,
  userDataPath: configRequiredStringSchema,
  version: configRequiredStringSchema,
  directoryConfig: directoryConfigSchema,
  isMainWindowFullScreen: import_zod.z.boolean(),
  isMainWindowMaximized: import_zod.z.boolean(),
  argv: configOptionalStringSchema,
  forCalling: import_zod.z.boolean(),
  forCamera: import_zod.z.boolean()
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  directoryConfigSchema,
  rendererConfigSchema
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiUmVuZGVyZXJDb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vIENvcHlyaWdodCAyMDIyIFNpZ25hbCBNZXNzZW5nZXIsIExMQ1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFHUEwtMy4wLW9ubHlcblxuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbmltcG9ydCB7IHRoZW1lU2V0dGluZ1NjaGVtYSB9IGZyb20gJy4vU3RvcmFnZVVJS2V5cyc7XG5pbXBvcnQgeyBlbnZpcm9ubWVudFNjaGVtYSB9IGZyb20gJy4uL2Vudmlyb25tZW50JztcblxuY29uc3QgY29uZmlnUmVxdWlyZWRTdHJpbmdTY2hlbWEgPSB6LnN0cmluZygpLm5vbmVtcHR5KCk7XG5leHBvcnQgdHlwZSBDb25maWdSZXF1aXJlZFN0cmluZ1R5cGUgPSB6LmluZmVyPFxuICB0eXBlb2YgY29uZmlnUmVxdWlyZWRTdHJpbmdTY2hlbWFcbj47XG5cbmNvbnN0IGNvbmZpZ09wdGlvbmFsVW5rbm93blNjaGVtYSA9IGNvbmZpZ1JlcXVpcmVkU3RyaW5nU2NoZW1hLm9yKHoudW5rbm93bigpKTtcblxuY29uc3QgY29uZmlnT3B0aW9uYWxTdHJpbmdTY2hlbWEgPSBjb25maWdSZXF1aXJlZFN0cmluZ1NjaGVtYS5vcih6LnVuZGVmaW5lZCgpKTtcbmV4cG9ydCB0eXBlIGNvbmZpZ09wdGlvbmFsU3RyaW5nVHlwZSA9IHouaW5mZXI8XG4gIHR5cGVvZiBjb25maWdPcHRpb25hbFN0cmluZ1NjaGVtYVxuPjtcblxuY29uc3QgZGlyZWN0b3J5VjFDb25maWdTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGRpcmVjdG9yeVZlcnNpb246IHoubGl0ZXJhbCgxKSxcbiAgZGlyZWN0b3J5RW5jbGF2ZUlkOiBjb25maWdSZXF1aXJlZFN0cmluZ1NjaGVtYSxcbiAgZGlyZWN0b3J5VHJ1c3RBbmNob3I6IGNvbmZpZ1JlcXVpcmVkU3RyaW5nU2NoZW1hLFxuICBkaXJlY3RvcnlVcmw6IGNvbmZpZ1JlcXVpcmVkU3RyaW5nU2NoZW1hLFxufSk7XG5cbmNvbnN0IGRpcmVjdG9yeVYyQ29uZmlnU2NoZW1hID0gei5vYmplY3Qoe1xuICBkaXJlY3RvcnlWZXJzaW9uOiB6LmxpdGVyYWwoMiksXG4gIGRpcmVjdG9yeVYyQ29kZUhhc2hlczogei5hcnJheSh6LnN0cmluZygpLm5vbmVtcHR5KCkpLFxuICBkaXJlY3RvcnlWMlB1YmxpY0tleTogY29uZmlnUmVxdWlyZWRTdHJpbmdTY2hlbWEsXG4gIGRpcmVjdG9yeVYyVXJsOiBjb25maWdSZXF1aXJlZFN0cmluZ1NjaGVtYSxcbn0pO1xuXG5jb25zdCBkaXJlY3RvcnlWM0NvbmZpZ1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgZGlyZWN0b3J5VmVyc2lvbjogei5saXRlcmFsKDMpLFxuICBkaXJlY3RvcnlWM1VybDogY29uZmlnUmVxdWlyZWRTdHJpbmdTY2hlbWEsXG4gIGRpcmVjdG9yeVYzTVJFTkNMQVZFOiBjb25maWdSZXF1aXJlZFN0cmluZ1NjaGVtYSxcbn0pO1xuXG5leHBvcnQgY29uc3QgZGlyZWN0b3J5Q29uZmlnU2NoZW1hID0gelxuICAub2JqZWN0KHtcbiAgICAvLyBVbmtub3duIGRlZmF1bHRzXG4gICAgZGlyZWN0b3J5RW5jbGF2ZUlkOiBjb25maWdPcHRpb25hbFVua25vd25TY2hlbWEsXG4gICAgZGlyZWN0b3J5VHJ1c3RBbmNob3I6IGNvbmZpZ09wdGlvbmFsVW5rbm93blNjaGVtYSxcbiAgICBkaXJlY3RvcnlVcmw6IGNvbmZpZ09wdGlvbmFsVW5rbm93blNjaGVtYSxcbiAgICBkaXJlY3RvcnlWMkNvZGVIYXNoZXM6IGNvbmZpZ09wdGlvbmFsVW5rbm93blNjaGVtYSxcbiAgICBkaXJlY3RvcnlWMlB1YmxpY0tleTogY29uZmlnT3B0aW9uYWxVbmtub3duU2NoZW1hLFxuICAgIGRpcmVjdG9yeVYyVXJsOiBjb25maWdPcHRpb25hbFVua25vd25TY2hlbWEsXG4gICAgZGlyZWN0b3J5VjNVcmw6IGNvbmZpZ09wdGlvbmFsVW5rbm93blNjaGVtYSxcbiAgICBkaXJlY3RvcnlWM01SRU5DTEFWRTogY29uZmlnT3B0aW9uYWxVbmtub3duU2NoZW1hLFxuICB9KVxuICAuYW5kKFxuICAgIGRpcmVjdG9yeVYxQ29uZmlnU2NoZW1hXG4gICAgICAub3IoZGlyZWN0b3J5VjJDb25maWdTY2hlbWEpXG4gICAgICAub3IoZGlyZWN0b3J5VjNDb25maWdTY2hlbWEpXG4gICk7XG5cbmV4cG9ydCB0eXBlIERpcmVjdG9yeUNvbmZpZ1R5cGUgPSB6LmluZmVyPHR5cGVvZiBkaXJlY3RvcnlDb25maWdTY2hlbWE+O1xuXG5leHBvcnQgY29uc3QgcmVuZGVyZXJDb25maWdTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGFwcEluc3RhbmNlOiBjb25maWdPcHRpb25hbFN0cmluZ1NjaGVtYSxcbiAgYXBwU3RhcnRJbml0aWFsU3BlbGxjaGVja1NldHRpbmc6IHouYm9vbGVhbigpLFxuICBidWlsZENyZWF0aW9uOiB6Lm51bWJlcigpLFxuICBidWlsZEV4cGlyYXRpb246IHoubnVtYmVyKCksXG4gIGNkblVybDA6IGNvbmZpZ1JlcXVpcmVkU3RyaW5nU2NoZW1hLFxuICBjZG5VcmwyOiBjb25maWdSZXF1aXJlZFN0cmluZ1NjaGVtYSxcbiAgY2VydGlmaWNhdGVBdXRob3JpdHk6IGNvbmZpZ1JlcXVpcmVkU3RyaW5nU2NoZW1hLFxuICBjb250ZW50UHJveHlVcmw6IGNvbmZpZ1JlcXVpcmVkU3RyaW5nU2NoZW1hLFxuICBjcmFzaER1bXBzUGF0aDogY29uZmlnUmVxdWlyZWRTdHJpbmdTY2hlbWEsXG4gIGVuYWJsZUNJOiB6LmJvb2xlYW4oKSxcbiAgZW52aXJvbm1lbnQ6IGVudmlyb25tZW50U2NoZW1hLFxuICBob21lUGF0aDogY29uZmlnUmVxdWlyZWRTdHJpbmdTY2hlbWEsXG4gIGhvc3RuYW1lOiBjb25maWdSZXF1aXJlZFN0cmluZ1NjaGVtYSxcbiAgbG9jYWxlOiBjb25maWdSZXF1aXJlZFN0cmluZ1NjaGVtYSxcbiAgbmFtZTogY29uZmlnUmVxdWlyZWRTdHJpbmdTY2hlbWEsXG4gIG5vZGVWZXJzaW9uOiBjb25maWdSZXF1aXJlZFN0cmluZ1NjaGVtYSxcbiAgcHJveHlVcmw6IGNvbmZpZ09wdGlvbmFsU3RyaW5nU2NoZW1hLFxuICByZWR1Y2VkTW90aW9uU2V0dGluZzogei5ib29sZWFuKCksXG4gIHNlcnZlclB1YmxpY1BhcmFtczogY29uZmlnUmVxdWlyZWRTdHJpbmdTY2hlbWEsXG4gIHNlcnZlclRydXN0Um9vdDogY29uZmlnUmVxdWlyZWRTdHJpbmdTY2hlbWEsXG4gIHNlcnZlclVybDogY29uZmlnUmVxdWlyZWRTdHJpbmdTY2hlbWEsXG4gIHNmdVVybDogY29uZmlnUmVxdWlyZWRTdHJpbmdTY2hlbWEsXG4gIHN0b3JhZ2VVcmw6IGNvbmZpZ1JlcXVpcmVkU3RyaW5nU2NoZW1hLFxuICB0aGVtZTogdGhlbWVTZXR0aW5nU2NoZW1hLFxuICB1cGRhdGVzVXJsOiBjb25maWdSZXF1aXJlZFN0cmluZ1NjaGVtYSxcbiAgdXNlckRhdGFQYXRoOiBjb25maWdSZXF1aXJlZFN0cmluZ1NjaGVtYSxcbiAgdmVyc2lvbjogY29uZmlnUmVxdWlyZWRTdHJpbmdTY2hlbWEsXG4gIGRpcmVjdG9yeUNvbmZpZzogZGlyZWN0b3J5Q29uZmlnU2NoZW1hLFxuXG4gIC8vIE9ubHkgdXNlZCBieSBtYWluIHdpbmRvd1xuICBpc01haW5XaW5kb3dGdWxsU2NyZWVuOiB6LmJvb2xlYW4oKSxcbiAgaXNNYWluV2luZG93TWF4aW1pemVkOiB6LmJvb2xlYW4oKSxcblxuICAvLyBPbmx5IGZvciB0ZXN0c1xuICBhcmd2OiBjb25maWdPcHRpb25hbFN0cmluZ1NjaGVtYSxcblxuICAvLyBPbmx5IGZvciBwZXJtaXNzaW9uIHBvcHVwIHdpbmRvd1xuICBmb3JDYWxsaW5nOiB6LmJvb2xlYW4oKSxcbiAgZm9yQ2FtZXJhOiB6LmJvb2xlYW4oKSxcbn0pO1xuXG5leHBvcnQgdHlwZSBSZW5kZXJlckNvbmZpZ1R5cGUgPSB6LmluZmVyPHR5cGVvZiBy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
