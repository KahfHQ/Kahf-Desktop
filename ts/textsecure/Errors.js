var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Errors_exports = {};
__export(Errors_exports, {
  ConnectTimeoutError: () => ConnectTimeoutError,
  HTTPError: () => HTTPError,
  MessageError: () => MessageError,
  OutgoingIdentityKeyError: () => OutgoingIdentityKeyError,
  OutgoingMessageError: () => OutgoingMessageError,
  ReplayableError: () => ReplayableError,
  SendMessageChallengeError: () => SendMessageChallengeError,
  SendMessageNetworkError: () => SendMessageNetworkError,
  SendMessageProtoError: () => SendMessageProtoError,
  SignedPreKeyRotationError: () => SignedPreKeyRotationError,
  UnregisteredUserError: () => UnregisteredUserError,
  WarnOnlyError: () => WarnOnlyError
});
module.exports = __toCommonJS(Errors_exports);
var import_parseRetryAfter = require("../util/parseRetryAfter");
function appendStack(newError, originalError) {
  newError.stack += `
Original stack:
${originalError.stack}`;
}
class HTTPError extends Error {
  constructor(message, options) {
    super(`${message}; code: ${options.code}`);
    this.name = "HTTPError";
    const { code: providedCode, headers, response, stack } = options;
    this.code = providedCode > 999 || providedCode < 100 ? -1 : providedCode;
    this.responseHeaders = headers;
    this.stack += `
Original stack:
${stack}`;
    this.response = response;
  }
}
class ReplayableError extends Error {
  constructor(options) {
    super(options.message);
    this.name = options.name || "ReplayableError";
    this.message = options.message;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this);
    }
    this.functionCode = options.functionCode;
  }
}
class OutgoingIdentityKeyError extends ReplayableError {
  constructor(incomingIdentifier) {
    const identifier = incomingIdentifier.split(".")[0];
    super({
      name: "OutgoingIdentityKeyError",
      message: `The identity of ${identifier} has changed.`
    });
    this.identifier = identifier;
  }
}
class OutgoingMessageError extends ReplayableError {
  constructor(incomingIdentifier, _m, _t, httpError) {
    const identifier = incomingIdentifier.split(".")[0];
    super({
      name: "OutgoingMessageError",
      message: httpError ? httpError.message : "no http error"
    });
    this.identifier = identifier;
    if (httpError) {
      this.httpError = httpError;
      appendStack(this, httpError);
    }
  }
  get code() {
    return this.httpError?.code;
  }
}
class SendMessageNetworkError extends ReplayableError {
  constructor(identifier, _m, httpError) {
    super({
      name: "SendMessageNetworkError",
      message: httpError.message
    });
    [this.identifier] = identifier.split(".");
    this.httpError = httpError;
    appendStack(this, httpError);
  }
  get code() {
    return this.httpError.code;
  }
  get responseHeaders() {
    return this.httpError.responseHeaders;
  }
}
class SendMessageChallengeError extends ReplayableError {
  constructor(identifier, httpError) {
    super({
      name: "SendMessageChallengeError",
      message: httpError.message
    });
    [this.identifier] = identifier.split(".");
    this.httpError = httpError;
    this.data = httpError.response;
    const headers = httpError.responseHeaders || {};
    const retryAfter = (0, import_parseRetryAfter.parseRetryAfter)(headers["retry-after"]);
    if (retryAfter) {
      this.retryAt = Date.now() + retryAfter;
    }
    appendStack(this, httpError);
  }
  get code() {
    return this.httpError.code;
  }
}
class SendMessageProtoError extends Error {
  constructor({
    successfulIdentifiers,
    failoverIdentifiers,
    errors,
    unidentifiedDeliveries,
    dataMessage,
    contentHint,
    contentProto,
    timestamp,
    recipients,
    sendIsNotFinal
  }) {
    super(`SendMessageProtoError: ${SendMessageProtoError.getMessage(errors)}`);
    this.successfulIdentifiers = successfulIdentifiers;
    this.failoverIdentifiers = failoverIdentifiers;
    this.errors = errors;
    this.unidentifiedDeliveries = unidentifiedDeliveries;
    this.dataMessage = dataMessage;
    this.contentHint = contentHint;
    this.contentProto = contentProto;
    this.timestamp = timestamp;
    this.recipients = recipients;
    this.sendIsNotFinal = sendIsNotFinal;
  }
  static getMessage(errors) {
    if (!errors) {
      return "No errors";
    }
    return errors.map((error) => error.stackForLog ? error.stackForLog : error.toString()).join(", ");
  }
}
class SignedPreKeyRotationError extends ReplayableError {
  constructor() {
    super({
      name: "SignedPreKeyRotationError",
      message: "Too many signed prekey rotation failures"
    });
  }
}
class MessageError extends ReplayableError {
  constructor(_m, httpError) {
    super({
      name: "MessageError",
      message: httpError.message
    });
    this.httpError = httpError;
    appendStack(this, httpError);
  }
  get code() {
    return this.httpError.code;
  }
}
class UnregisteredUserError extends Error {
  constructor(identifier, httpError) {
    const { message } = httpError;
    super(message);
    this.message = message;
    this.name = "UnregisteredUserError";
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this);
    }
    this.identifier = identifier;
    this.httpError = httpError;
    appendStack(this, httpError);
  }
  get code() {
    return this.httpError.code;
  }
}
class ConnectTimeoutError extends Error {
}
class WarnOnlyError extends Error {
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ConnectTimeoutError,
  HTTPError,
  MessageError,
  OutgoingIdentityKeyError,
  OutgoingMessageError,
  ReplayableError,
  SendMessageChallengeError,
  SendMessageNetworkError,
  SendMessageProtoError,
  SignedPreKeyRotationError,
  UnregisteredUserError,
  WarnOnlyError
});
//# sourceMappingURL=data:application/json;base64,
