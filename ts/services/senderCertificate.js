var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var senderCertificate_exports = {};
__export(senderCertificate_exports, {
  SenderCertificateService: () => SenderCertificateService,
  senderCertificateService: () => senderCertificateService
});
module.exports = __toCommonJS(senderCertificate_exports);
var import_OutgoingMessage = require("../textsecure/OutgoingMessage");
var Bytes = __toESM(require("../Bytes"));
var import_assert = require("../util/assert");
var import_missingCaseError = require("../util/missingCaseError");
var import_waitForOnline = require("../util/waitForOnline");
var log = __toESM(require("../logging/log"));
var import_protobuf = require("../protobuf");
const SenderCertificate = import_protobuf.SignalService.SenderCertificate;
function isWellFormed(data) {
  return import_OutgoingMessage.serializedCertificateSchema.safeParse(data).success;
}
const CLOCK_SKEW_THRESHOLD = 15 * 60 * 1e3;
class SenderCertificateService {
  constructor() {
    this.fetchPromises = /* @__PURE__ */ new Map();
  }
  initialize({
    server,
    navigator,
    onlineEventTarget,
    storage
  }) {
    log.info("Sender certificate service initialized");
    this.server = server;
    this.navigator = navigator;
    this.onlineEventTarget = onlineEventTarget;
    this.storage = storage;
  }
  async get(mode) {
    const storedCertificate = this.getStoredCertificate(mode);
    if (storedCertificate) {
      log.info(`Sender certificate service found a valid ${modeToLogString(mode)} certificate in storage; skipping fetch`);
      return storedCertificate;
    }
    return this.fetchCertificate(mode);
  }
  async clear() {
    log.info("Sender certificate service: Clearing in-progress fetches and deleting cached certificates");
    await Promise.all(this.fetchPromises.values());
    const { storage } = this;
    (0, import_assert.assert)(storage, "Sender certificate service method was called before it was initialized");
    await storage.remove("senderCertificate");
    await storage.remove("senderCertificateNoE164");
  }
  getStoredCertificate(mode) {
    const { storage } = this;
    (0, import_assert.assert)(storage, "Sender certificate service method was called before it was initialized");
    const valueInStorage = storage.get(modeToStorageKey(mode));
    if (isWellFormed(valueInStorage) && isExpirationValid(valueInStorage.expires)) {
      return valueInStorage;
    }
    return void 0;
  }
  fetchCertificate(mode) {
    const existingPromise = this.fetchPromises.get(mode);
    if (existingPromise) {
      log.info(`Sender certificate service was already fetching a ${modeToLogString(mode)} certificate; piggybacking off of that`);
      return existingPromise;
    }
    let promise;
    const doFetch = /* @__PURE__ */ __name(async () => {
      const result = await this.fetchAndSaveCertificate(mode);
      (0, import_assert.assert)(this.fetchPromises.get(mode) === promise, "Sender certificate service was deleting a different promise than expected");
      this.fetchPromises.delete(mode);
      return result;
    }, "doFetch");
    promise = doFetch();
    (0, import_assert.assert)(!this.fetchPromises.has(mode), "Sender certificate service somehow already had a promise for this mode");
    this.fetchPromises.set(mode, promise);
    return promise;
  }
  async fetchAndSaveCertificate(mode) {
    const { storage, navigator, onlineEventTarget } = this;
    (0, import_assert.assert)(storage && navigator && onlineEventTarget, "Sender certificate service method was called before it was initialized");
    log.info(`Sender certificate service: fetching and saving a ${modeToLogString(mode)} certificate`);
    await (0, import_waitForOnline.waitForOnline)(navigator, onlineEventTarget);
    let certificateString;
    try {
      certificateString = await this.requestSenderCertificate(mode);
    } catch (err) {
      log.warn(`Sender certificate service could not fetch a ${modeToLogString(mode)} certificate. Returning undefined`, err && err.stack ? err.stack : err);
      return void 0;
    }
    const certificate = Bytes.fromBase64(certificateString);
    const decodedContainer = SenderCertificate.decode(certificate);
    const decodedCert = decodedContainer.certificate ? SenderCertificate.Certificate.decode(decodedContainer.certificate) : void 0;
    const expires = decodedCert?.expires?.toNumber();
    if (!isExpirationValid(expires)) {
      log.warn(`Sender certificate service fetched a ${modeToLogString(mode)} certificate from the server that was already expired (or was invalid). Is your system clock off?`);
      return void 0;
    }
    const serializedCertificate = {
      expires: expires - CLOCK_SKEW_THRESHOLD,
      serialized: certificate
    };
    await storage.put(modeToStorageKey(mode), serializedCertificate);
    return serializedCertificate;
  }
  async requestSenderCertificate(mode) {
    const { server } = this;
    (0, import_assert.assert)(server, "Sender certificate service method was called before it was initialized");
    const omitE164 = mode === import_OutgoingMessage.SenderCertificateMode.WithoutE164;
    const { certificate } = await server.getSenderCertificate(omitE164);
    return certificate;
  }
}
function modeToStorageKey(mode) {
  switch (mode) {
    case import_OutgoingMessage.SenderCertificateMode.WithE164:
      return "senderCertificate";
    case import_OutgoingMessage.SenderCertificateMode.WithoutE164:
      return "senderCertificateNoE164";
    default:
      throw (0, import_missingCaseError.missingCaseError)(mode);
  }
}
function modeToLogString(mode) {
  switch (mode) {
    case import_OutgoingMessage.SenderCertificateMode.WithE164:
      return "yes-E164";
    case import_OutgoingMessage.SenderCertificateMode.WithoutE164:
      return "no-E164";
    default:
      throw (0, import_missingCaseError.missingCaseError)(mode);
  }
}
function isExpirationValid(expiration) {
  return typeof expiration === "number" && expiration > Date.now();
}
const senderCertificateService = new SenderCertificateService();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SenderCertificateService,
  senderCertificateService
});
//# sourceMappingURL=data:application/json;base64,
