var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_chai = require("chai");
var Stickers = __toESM(require("../../types/Stickers"));
describe("Stickers", () => {
  describe("getDataFromLink", () => {
    it("returns undefined for invalid URLs", () => {
      import_chai.assert.isUndefined(Stickers.getDataFromLink("https://"));
      import_chai.assert.isUndefined(Stickers.getDataFromLink("signal.art/addstickers/"));
    });
    it("returns undefined for URLs that don't have a hash", () => {
      import_chai.assert.isUndefined(Stickers.getDataFromLink("https://signal.art/addstickers/"));
      import_chai.assert.isUndefined(Stickers.getDataFromLink("https://signal.art/addstickers/#"));
    });
    it("returns undefined when no key or pack ID is found", () => {
      import_chai.assert.isUndefined(Stickers.getDataFromLink("https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a"));
      import_chai.assert.isUndefined(Stickers.getDataFromLink("https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key="));
      import_chai.assert.isUndefined(Stickers.getDataFromLink("https://signal.art/addstickers/#pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e"));
      import_chai.assert.isUndefined(Stickers.getDataFromLink("https://signal.art/addstickers/#pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e&pack_id="));
    });
    it("returns undefined when the pack ID is invalid", () => {
      import_chai.assert.isUndefined(Stickers.getDataFromLink("https://signal.art/addstickers/#pack_id=garbage&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e"));
    });
    it("returns undefined if the ID or key are passed as arrays", () => {
      import_chai.assert.isUndefined(Stickers.getDataFromLink("https://signal.art/addstickers/#pack_id[]=c8c83285b547872ac4c589d64a6edd6a&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e"));
      import_chai.assert.isUndefined(Stickers.getDataFromLink("https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key[]=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e"));
    });
    it("parses the ID and key from the hash", () => {
      import_chai.assert.deepEqual(Stickers.getDataFromLink("https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e"), {
        id: "c8c83285b547872ac4c589d64a6edd6a",
        key: "59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e"
      });
    });
    it("ignores additional hash parameters", () => {
      import_chai.assert.deepEqual(Stickers.getDataFromLink("https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e&pack_foo=bar"), {
        id: "c8c83285b547872ac4c589d64a6edd6a",
        key: "59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e"
      });
    });
    it("only parses the first ID and key from the hash if more than one is supplied", () => {
      import_chai.assert.deepEqual(Stickers.getDataFromLink("https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e&pack_id=extra&pack_key=extra"), {
        id: "c8c83285b547872ac4c589d64a6edd6a",
        key: "59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e"
      });
    });
  });
  describe("isPackIdValid", () => {
    it("returns false for non-strings", () => {
      import_chai.assert.isFalse(Stickers.isPackIdValid(void 0));
      import_chai.assert.isFalse(Stickers.isPackIdValid(null));
      import_chai.assert.isFalse(Stickers.isPackIdValid(123));
      import_chai.assert.isFalse(Stickers.isPackIdValid(123));
      import_chai.assert.isFalse(Stickers.isPackIdValid(["b9439fa5fdc8b9873fe64f01b88b8ccf"]));
      import_chai.assert.isFalse(Stickers.isPackIdValid(new String("b9439fa5fdc8b9873fe64f01b88b8ccf")));
    });
    it("returns false for invalid pack IDs", () => {
      import_chai.assert.isFalse(Stickers.isPackIdValid(""));
      import_chai.assert.isFalse(Stickers.isPackIdValid("x9439fa5fdc8b9873fe64f01b88b8ccf"));
      import_chai.assert.isFalse(Stickers.isPackIdValid("b9439fa5fdc8b9873fe64f01b88b8cc"));
      import_chai.assert.isFalse(Stickers.isPackIdValid("b9439fa5fdc8b9873fe64f01b88b8ccfa"));
    });
    it("returns true for valid pack IDs", () => {
      import_chai.assert.isTrue(Stickers.isPackIdValid("b9439fa5fdc8b9873fe64f01b88b8ccf"));
      import_chai.assert.isTrue(Stickers.isPackIdValid("3eff225a1036a58a7530b312dd92f8d8"));
      import_chai.assert.isTrue(Stickers.isPackIdValid("DDFD48B8097DA7A4E928192B10963F6A"));
    });
  });
  describe("redactPackId", () => {
    it("redacts pack IDs", () => {
      import_chai.assert.strictEqual(Stickers.redactPackId("b9439fa5fdc8b9873fe64f01b88b8ccf"), "[REDACTED]ccf");
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
