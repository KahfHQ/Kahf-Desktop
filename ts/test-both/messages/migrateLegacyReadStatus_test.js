var import_chai = require("chai");
var import_MessageReadStatus = require("../../messages/MessageReadStatus");
var import_migrateLegacyReadStatus = require("../../messages/migrateLegacyReadStatus");
describe("migrateLegacyReadStatus", () => {
  it("doesn't migrate messages that already have the modern read state", () => {
    import_chai.assert.isUndefined((0, import_migrateLegacyReadStatus.migrateLegacyReadStatus)({ readStatus: import_MessageReadStatus.ReadStatus.Read }));
    import_chai.assert.isUndefined((0, import_migrateLegacyReadStatus.migrateLegacyReadStatus)({ readStatus: import_MessageReadStatus.ReadStatus.Unread }));
  });
  it('converts legacy read values to "read"', () => {
    import_chai.assert.strictEqual((0, import_migrateLegacyReadStatus.migrateLegacyReadStatus)({}), import_MessageReadStatus.ReadStatus.Read);
    import_chai.assert.strictEqual((0, import_migrateLegacyReadStatus.migrateLegacyReadStatus)({ unread: 0 }), import_MessageReadStatus.ReadStatus.Read);
    import_chai.assert.strictEqual((0, import_migrateLegacyReadStatus.migrateLegacyReadStatus)({ unread: false }), import_MessageReadStatus.ReadStatus.Read);
  });
  it('converts legacy unread values to "unread"', () => {
    import_chai.assert.strictEqual((0, import_migrateLegacyReadStatus.migrateLegacyReadStatus)({ unread: 1 }), import_MessageReadStatus.ReadStatus.Unread);
    import_chai.assert.strictEqual((0, import_migrateLegacyReadStatus.migrateLegacyReadStatus)({ unread: true }), import_MessageReadStatus.ReadStatus.Unread);
  });
  it('converts unexpected truthy values to "unread"', () => {
    import_chai.assert.strictEqual((0, import_migrateLegacyReadStatus.migrateLegacyReadStatus)({ unread: 99 }), import_MessageReadStatus.ReadStatus.Unread);
    import_chai.assert.strictEqual((0, import_migrateLegacyReadStatus.migrateLegacyReadStatus)({ unread: "wow!" }), import_MessageReadStatus.ReadStatus.Unread);
  });
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWlncmF0ZUxlZ2FjeVJlYWRTdGF0dXNfdGVzdC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gQ29weXJpZ2h0IDIwMjEgU2lnbmFsIE1lc3NlbmdlciwgTExDXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQUdQTC0zLjAtb25seVxuXG4vLyBXZSB3YW50IHRvIGNhc3QgdG8gYGFueWAgYmVjYXVzZSB3ZSdyZSBwYXNzaW5nIGFuIHVuZXhwZWN0ZWQgZmllbGQuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5cbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJ2NoYWknO1xuaW1wb3J0IHsgUmVhZFN0YXR1cyB9IGZyb20gJy4uLy4uL21lc3NhZ2VzL01lc3NhZ2VSZWFkU3RhdHVzJztcblxuaW1wb3J0IHsgbWlncmF0ZUxlZ2FjeVJlYWRTdGF0dXMgfSBmcm9tICcuLi8uLi9tZXNzYWdlcy9taWdyYXRlTGVnYWN5UmVhZFN0YXR1cyc7XG5cbmRlc2NyaWJlKCdtaWdyYXRlTGVnYWN5UmVhZFN0YXR1cycsICgpID0+IHtcbiAgaXQoXCJkb2Vzbid0IG1pZ3JhdGUgbWVzc2FnZXMgdGhhdCBhbHJlYWR5IGhhdmUgdGhlIG1vZGVybiByZWFkIHN0YXRlXCIsICgpID0+IHtcbiAgICBhc3NlcnQuaXNVbmRlZmluZWQoXG4gICAgICBtaWdyYXRlTGVnYWN5UmVhZFN0YXR1cyh7IHJlYWRTdGF0dXM6IFJlYWRTdGF0dXMuUmVhZCB9KVxuICAgICk7XG4gICAgYXNzZXJ0LmlzVW5kZWZpbmVkKFxuICAgICAgbWlncmF0ZUxlZ2FjeVJlYWRTdGF0dXMoeyByZWFkU3RhdHVzOiBSZWFkU3RhdHVzLlVucmVhZCB9KVxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdjb252ZXJ0cyBsZWdhY3kgcmVhZCB2YWx1ZXMgdG8gXCJyZWFkXCInLCAoKSA9PiB7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKG1pZ3JhdGVMZWdhY3lSZWFkU3RhdHVzKHt9KSwgUmVhZFN0YXR1cy5SZWFkKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoXG4gICAgICBtaWdyYXRlTGVnYWN5UmVhZFN0YXR1cyh7IHVucmVhZDogMCB9IGFzIGFueSksXG4gICAgICBSZWFkU3RhdHVzLlJlYWRcbiAgICApO1xuICAgIGFzc2VydC5zdHJpY3RFcXVhbChcbiAgICAgIG1pZ3JhdGVMZWdhY3lSZWFkU3RhdHVzKHsgdW5yZWFkOiBmYWxzZSB9IGFzIGFueSksXG4gICAgICBSZWFkU3RhdHVzLlJlYWRcbiAgICApO1xuICB9KTtcblxuICBpdCgnY29udmVydHMgbGVnYWN5IHVucmVhZCB2YWx1ZXMgdG8gXCJ1bnJlYWRcIicsICgpID0+IHtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoXG4gICAgICBtaWdyYXRlTGVnYWN5UmVhZFN0YXR1cyh7IHVucmVhZDogMSB9IGFzIGFueSksXG4gICAgICBSZWFkU3RhdHVzLlVucmVhZFxuICAgICk7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKFxuICAgICAgbWlncmF0ZUxlZ2FjeVJlYWRTdGF0dXMoeyB1bnJlYWQ6IHRydWUgfSBhcyBhbnkpLFxuICAgICAgUmVhZFN0YXR1cy5VbnJlYWRcbiAgICApO1xuICB9KTtcblxuICBpdCgnY29udmVydHMgdW5leHBlY3RlZCB0cnV0aHkgdmFsdWVzIHRvIFwidW5yZWFkXCInLCAoKSA9PiB7XG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKFxuICAgICAgbWlncmF0ZUxlZ2FjeVJlYWRTdGF0dXMoeyB1bnJlYWQ6IDk5IH0gYXMgYW55KSxcbiAgICAgIFJlYWRTdGF0dXMuVW5yZWFkXG4gICAgKTtcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoXG4gICAgICBtaWdyYXRlTGVnYWN5UmVhZFN0YXR1cyh7IHVucmVhZDogJ3dvdyEnIH0gYXMgYW55KSxcbiAgICAgIFJlYWRTdGF0dXMuVW5yZWFkXG4gICAgKTtcbiAgfSk7XG59KTtcbiJdLAogICJtYXBwaW5ncyI6ICJBQU1BLGtCQUF1QjtBQUN2QiwrQkFBMkI7QUFFM0IscUNBQXdDO0FBRXhDLFNBQVMsMkJBQTJCLE1BQU07QUFDeEMsS0FBRyxvRUFBb0UsTUFBTTtBQUMzRSx1QkFBTyxZQUNMLDREQUF3QixFQUFFLFlBQVksb0NBQVcsS0FBSyxDQUFDLENBQ3pEO0FBQ0EsdUJBQU8sWUFDTCw0REFBd0IsRUFBRSxZQUFZLG9DQUFXLE9BQU8sQ0FBQyxDQUMzRDtBQUFBLEVBQ0YsQ0FBQztBQUVELEtBQUcseUNBQXlDLE1BQU07QUFDaEQsdUJBQU8sWUFBWSw0REFBd0IsQ0FBQyxDQUFDLEdBQUcsb0NBQVcsSUFBSTtBQUMvRCx1QkFBTyxZQUNMLDREQUF3QixFQUFFLFFBQVEsRUFBRSxDQUFRLEdBQzVDLG9DQUFXLElBQ2I7QUFDQSx1QkFBTyxZQUNMLDREQUF3QixFQUFFLFFBQVEsTUFBTSxDQUFRLEdBQ2hELG9DQUFXLElBQ2I7QUFBQSxFQUNGLENBQUM7QUFFRCxLQUFHLDZDQUE2QyxNQUFNO0FBQ3BELHVCQUFPLFlBQ0wsNERBQXdCLEVBQUUsUUFBUSxFQUFFLENBQVEsR0FDNUMsb0NBQVcsTUFDYjtBQUNBLHVCQUFPLFlBQ0wsNERBQXdCLEVBQUUsUUFBUSxLQUFLLENBQVEsR0FDL0Msb0NBQVcsTUFDYjtBQUFBLEVBQ0YsQ0FBQztBQUVELEtBQUcsaURBQWlELE1BQU07QUFDeEQsdUJBQU8sWUFDTCw0REFBd0IsRUFBRSxRQUFRLEdBQUcsQ0FBUSxHQUM3QyxvQ0FBVyxNQUNiO0FBQ0EsdUJBQU8sWUFDTCw0REFBd0IsRUFBRSxRQUFRLE9BQU8sQ0FBUSxHQUNqRCxvQ0FBVyxNQUNiO0FBQUEsRUFDRixDQUFDO0FBQ0gsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
