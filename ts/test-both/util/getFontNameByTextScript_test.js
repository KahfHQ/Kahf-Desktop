var import_chai = require("chai");
var import_getFontNameByTextScript = require("../../util/getFontNameByTextScript");
var import_setupI18n = require("../../util/setupI18n");
describe("getFontNameByTextScript", () => {
  it("has arabic", () => {
    const text = "\u0627\u0644\u062B\u0639\u0644\u0628 \u0627\u0644\u0628\u0646\u064A \u0627\u0644\u0633\u0631\u064A\u0639 \u064A\u0642\u0641\u0632 \u0641\u0648\u0642 \u0627\u0644\u0643\u0644\u0628 \u0627\u0644\u0643\u0633\u0648\u0644";
    import_chai.assert.isTrue(import_getFontNameByTextScript.fontSniffer.hasArabic(text), "arabic");
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasLatin(text), "latin");
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasJapanese(text), "japanese");
  });
  it("has chinese (simplified)", () => {
    const text = "\u654F\u6377\u7684\u68D5\u8272\u72D0\u72F8\u8DF3\u8FC7\u4E86\u61D2\u72D7";
    import_chai.assert.isTrue(import_getFontNameByTextScript.fontSniffer.hasCJK(text), "cjk");
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasLatin(text), "latin");
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasJapanese(text), "japanese");
  });
  it("has chinese (traditional)", () => {
    const text = "\u654F\u6377\u7684\u68D5\u8272\u72D0\u72F8\u8DF3\u904E\u4E86\u61F6\u72D7";
    import_chai.assert.isTrue(import_getFontNameByTextScript.fontSniffer.hasCJK(text), "cjk");
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasLatin(text), "latin");
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasJapanese(text), "japanese");
  });
  it("has cyrillic (Bulgarian)", () => {
    const text = "\u0411\u044A\u0440\u0437\u0430\u0442\u0430 \u043A\u0430\u0444\u044F\u0432\u0430 \u043B\u0438\u0441\u0438\u0446\u0430 \u043F\u0440\u0435\u0441\u043A\u0430\u0447\u0430 \u043C\u044A\u0440\u0437\u0435\u043B\u0438\u0432\u043E\u0442\u043E \u043A\u0443\u0447\u0435";
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasLatin(text), "latin");
    import_chai.assert.isTrue(import_getFontNameByTextScript.fontSniffer.hasCyrillic(text), "cyrillic");
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasArabic(text), "arabic");
  });
  it("has cyrillic (Ukranian)", () => {
    const text = "\u0428\u0432\u0438\u0434\u043A\u0430 \u0431\u0443\u0440\u0430 \u043B\u0438\u0441\u0438\u0446\u044F \u0441\u0442\u0440\u0438\u0431\u0430\u0454 \u0447\u0435\u0440\u0435\u0437 \u043B\u0435\u0434\u0430\u0447\u043E\u0433\u043E \u043F\u0441\u0430";
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasLatin(text), "latin");
    import_chai.assert.isTrue(import_getFontNameByTextScript.fontSniffer.hasCyrillic(text), "cyrillic");
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasArabic(text), "arabic");
  });
  it("has devanagari", () => {
    const text = "\u0924\u0947\u091C, \u092D\u0942\u0930\u0940 \u0932\u094B\u092E\u0921\u0940 \u0906\u0932\u0938\u0940 \u0915\u0941\u0924\u094D\u0924\u0947 \u0915\u0947 \u0909\u092A\u0930 \u0915\u0942\u0926 \u0917\u0908";
    import_chai.assert.isTrue(import_getFontNameByTextScript.fontSniffer.hasDevanagari(text), "devanagari");
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasLatin(text), "latin");
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasCyrillic(text), "cyrillic");
  });
  it("has japanese", () => {
    const text = "\u901F\u3044\u8336\u8272\u306E\u30AD\u30C4\u30CD\u306F\u6020\u60F0\u306A\u72AC\u3092\u98DB\u3073\u8D8A\u3048\u307E\u3059";
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasDevanagari(text), "devanagari");
    import_chai.assert.isFalse(import_getFontNameByTextScript.fontSniffer.hasLatin(text), "latin");
    import_chai.assert.isTrue(import_getFontNameByTextScript.fontSniffer.hasJapanese(text), "japanese");
    import_chai.assert.isTrue(import_getFontNameByTextScript.fontSniffer.hasCJK(text), "cjk");
  });
  it("throws when passing in an invalid text style", () => {
    const text = "abc";
    import_chai.assert.throws(() => {
      (0, import_getFontNameByTextScript.getFontNameByTextScript)(text, -1);
    });
    import_chai.assert.throws(() => {
      (0, import_getFontNameByTextScript.getFontNameByTextScript)(text, 99);
    });
  });
  it("returns the correct font names in the right order (japanese)", () => {
    const text = "\u901F\u3044\u8336\u8272\u306E\u30AD\u30C4\u30CD\u306F\u6020\u60F0\u306A\u72AC\u3092\u98DB\u3073\u8D8A\u3048\u307E\u3059";
    const actual = (0, import_getFontNameByTextScript.getFontNameByTextScript)(text, 0);
    const expected = '"Hiragino Sans W3", "PingFang SC Regular", SimHei, sans-serif';
    import_chai.assert.equal(actual, expected);
  });
  it("returns the correct font names in the right order (latin)", () => {
    const text = "The quick brown fox jumps over the lazy dog";
    const actual = (0, import_getFontNameByTextScript.getFontNameByTextScript)(text, 0);
    const expected = "Inter, sans-serif";
    import_chai.assert.equal(actual, expected);
  });
  it("returns the correct font names (chinese simplified)", () => {
    const text = "\u654F\u6377\u7684\u68D5\u8272\u72D0\u72F8\u8DF3\u8FC7\u4E86\u61D2\u72D7";
    const actual = (0, import_getFontNameByTextScript.getFontNameByTextScript)(text, 0, (0, import_setupI18n.setupI18n)("zh_CN", {}));
    const expected = '"PingFang SC Regular", SimHei, sans-serif';
    import_chai.assert.equal(actual, expected);
  });
  it("returns the correct font names (chinese traditional)", () => {
    const text = "\u654F\u6377\u7684\u68D5\u8272\u72D0\u72F8\u8DF3\u904E\u4E86\u61F6\u72D7";
    const actual = (0, import_getFontNameByTextScript.getFontNameByTextScript)(text, 0, (0, import_setupI18n.setupI18n)("zh_TW", {}));
    const expected = '"PingFang TC Regular", "JhengHei TC Regular", sans-serif';
    import_chai.assert.equal(actual, expected);
  });
});
//# sourceMappingURL=data:application/json;base64,
