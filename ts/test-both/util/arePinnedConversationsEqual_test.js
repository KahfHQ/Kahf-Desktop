var import_chai = require("chai");
var import_arePinnedConversationsEqual = require("../../util/arePinnedConversationsEqual");
var import_protobuf = require("../../protobuf");
const PinnedConversation = import_protobuf.SignalService.AccountRecord.IPinnedConversation;
describe("arePinnedConversationsEqual", () => {
  it("is equal if both have same values at same indices", () => {
    const localValue = [
      {
        contact: {
          uuid: "72313cde-2784-4a6f-a92a-abbe23763a60",
          e164: "+13055551234"
        }
      },
      {
        groupMasterKey: new Uint8Array(32)
      }
    ];
    const remoteValue = [
      {
        contact: {
          uuid: "72313cde-2784-4a6f-a92a-abbe23763a60",
          e164: "+13055551234"
        }
      },
      {
        groupMasterKey: new Uint8Array(32)
      }
    ];
    import_chai.assert.isTrue((0, import_arePinnedConversationsEqual.arePinnedConversationsEqual)(localValue, remoteValue));
  });
  it("is not equal if values are mixed", () => {
    const localValue = [
      {
        contact: {
          uuid: "72313cde-2784-4a6f-a92a-abbe23763a60",
          e164: "+13055551234"
        }
      },
      {
        contact: {
          uuid: "f59a9fed-9e91-4bb4-a015-d49e58b47e25",
          e164: "+17865554321"
        }
      }
    ];
    const remoteValue = [
      {
        contact: {
          uuid: "f59a9fed-9e91-4bb4-a015-d49e58b47e25",
          e164: "+17865554321"
        }
      },
      {
        contact: {
          uuid: "72313cde-2784-4a6f-a92a-abbe23763a60",
          e164: "+13055551234"
        }
      }
    ];
    import_chai.assert.isFalse((0, import_arePinnedConversationsEqual.arePinnedConversationsEqual)(localValue, remoteValue));
  });
  it("is not equal if lengths are not same", () => {
    const localValue = [
      {
        contact: {
          uuid: "72313cde-2784-4a6f-a92a-abbe23763a60",
          e164: "+13055551234"
        }
      }
    ];
    const remoteValue = [];
    import_chai.assert.isFalse((0, import_arePinnedConversationsEqual.arePinnedConversationsEqual)(localValue, remoteValue));
  });
  it("is not equal if content does not match", () => {
    const localValue = [
      {
        contact: {
          uuid: "72313cde-2784-4a6f-a92a-abbe23763a60",
          e164: "+13055551234"
        }
      }
    ];
    const remoteValue = [
      {
        groupMasterKey: new Uint8Array(32)
      }
    ];
    import_chai.assert.isFalse((0, import_arePinnedConversationsEqual.arePinnedConversationsEqual)(localValue, remoteValue));
  });
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiYXJlUGlubmVkQ29udmVyc2F0aW9uc0VxdWFsX3Rlc3QudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vIENvcHlyaWdodCAyMDIxIFNpZ25hbCBNZXNzZW5nZXIsIExMQ1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFHUEwtMy4wLW9ubHlcblxuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgeyBhcmVQaW5uZWRDb252ZXJzYXRpb25zRXF1YWwgfSBmcm9tICcuLi8uLi91dGlsL2FyZVBpbm5lZENvbnZlcnNhdGlvbnNFcXVhbCc7XG5pbXBvcnQgeyBTaWduYWxTZXJ2aWNlIGFzIFByb3RvIH0gZnJvbSAnLi4vLi4vcHJvdG9idWYnO1xuXG5pbXBvcnQgUGlubmVkQ29udmVyc2F0aW9uID0gUHJvdG8uQWNjb3VudFJlY29yZC5JUGlubmVkQ29udmVyc2F0aW9uO1xuXG5kZXNjcmliZSgnYXJlUGlubmVkQ29udmVyc2F0aW9uc0VxdWFsJywgKCkgPT4ge1xuICBpdCgnaXMgZXF1YWwgaWYgYm90aCBoYXZlIHNhbWUgdmFsdWVzIGF0IHNhbWUgaW5kaWNlcycsICgpID0+IHtcbiAgICBjb25zdCBsb2NhbFZhbHVlID0gW1xuICAgICAge1xuICAgICAgICBjb250YWN0OiB7XG4gICAgICAgICAgdXVpZDogJzcyMzEzY2RlLTI3ODQtNGE2Zi1hOTJhLWFiYmUyMzc2M2E2MCcsXG4gICAgICAgICAgZTE2NDogJysxMzA1NTU1MTIzNCcsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBncm91cE1hc3RlcktleTogbmV3IFVpbnQ4QXJyYXkoMzIpLFxuICAgICAgfSxcbiAgICBdO1xuICAgIGNvbnN0IHJlbW90ZVZhbHVlID0gW1xuICAgICAge1xuICAgICAgICBjb250YWN0OiB7XG4gICAgICAgICAgdXVpZDogJzcyMzEzY2RlLTI3ODQtNGE2Zi1hOTJhLWFiYmUyMzc2M2E2MCcsXG4gICAgICAgICAgZTE2NDogJysxMzA1NTU1MTIzNCcsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBncm91cE1hc3RlcktleTogbmV3IFVpbnQ4QXJyYXkoMzIpLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgYXNzZXJ0LmlzVHJ1ZShhcmVQaW5uZWRDb252ZXJzYXRpb25zRXF1YWwobG9jYWxWYWx1ZSwgcmVtb3RlVmFsdWUpKTtcbiAgfSk7XG5cbiAgaXQoJ2lzIG5vdCBlcXVhbCBpZiB2YWx1ZXMgYXJlIG1peGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IGxvY2FsVmFsdWUgPSBbXG4gICAgICB7XG4gICAgICAgIGNvbnRhY3Q6IHtcbiAgICAgICAgICB1dWlkOiAnNzIzMTNjZGUtMjc4NC00YTZmLWE5MmEtYWJiZTIzNzYzYTYwJyxcbiAgICAgICAgICBlMTY0OiAnKzEzMDU1NTUxMjM0JyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbnRhY3Q6IHtcbiAgICAgICAgICB1dWlkOiAnZjU5YTlmZWQtOWU5MS00YmI0LWEwMTUtZDQ5ZTU4YjQ3ZTI1JyxcbiAgICAgICAgICBlMTY0OiAnKzE3ODY1NTU0MzIxJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXTtcbiAgICBjb25zdCByZW1vdGVWYWx1ZSA9IFtcbiAgICAgIHtcbiAgICAgICAgY29udGFjdDoge1xuICAgICAgICAgIHV1aWQ6ICdmNTlhOWZlZC05ZTkxLTRiYjQtYTAxNS1kNDllNThiNDdlMjUnLFxuICAgICAgICAgIGUxNjQ6ICcrMTc4NjU1NTQzMjEnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29udGFjdDoge1xuICAgICAgICAgIHV1aWQ6ICc3MjMxM2NkZS0yNzg0LTRhNmYtYTkyYS1hYmJlMjM3NjNhNjAnLFxuICAgICAgICAgIGUxNjQ6ICcrMTMwNTU1NTEyMzQnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgYXNzZXJ0LmlzRmFsc2UoYXJlUGlubmVkQ29udmVyc2F0aW9uc0VxdWFsKGxvY2FsVmFsdWUsIHJlbW90ZVZhbHVlKSk7XG4gIH0pO1xuXG4gIGl0KCdpcyBub3QgZXF1YWwgaWYgbGVuZ3RocyBhcmUgbm90IHNhbWUnLCAoKSA9PiB7XG4gICAgY29uc3QgbG9jYWxWYWx1ZSA9IFtcbiAgICAgIHtcbiAgICAgICAgY29udGFjdDoge1xuICAgICAgICAgIHV1aWQ6ICc3MjMxM2NkZS0yNzg0LTRhNmYtYTkyYS1hYmJlMjM3NjNhNjAnLFxuICAgICAgICAgIGUxNjQ6ICcrMTMwNTU1NTEyMzQnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICBdO1xuICAgIGNvbnN0IHJlbW90ZVZhbHVlOiBBcnJheTxQaW5uZWRDb252ZXJzYXRpb24+ID0gW107XG4gICAgYXNzZXJ0LmlzRmFsc2UoYXJlUGlubmVkQ29udmVyc2F0aW9uc0VxdWFsKGxvY2FsVmFsdWUsIHJlbW90ZVZhbHVlKSk7XG4gIH0pO1xuXG4gIGl0KCdpcyBub3QgZXF1YWwgaWYgY29udGVudCBkb2VzIG5vdCBtYXRjaCcsICgpID0+IHtcbiAgICBjb25zdCBsb2NhbFZhbHVlID0gW1xuICAgICAge1xuICAgICAgICBjb250YWN0OiB7XG4gICAgICAgICAgdXVpZDogJzcyMzEzY2RlLTI3ODQtNGE2Zi1hOTJhLWFiYmUyMzc2M2E2MCcsXG4gICAgICAgICAgZTE2NDogJysxMzA1NTU1MTIzNCcsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF07XG4gICAgY29uc3QgcmVtb3RlVmFsdWUgPSBbXG4gICAgICB7XG4gICAgICAgIGdyb3VwTWFzdGVyS2V5OiBuZXcgVWludDhBcnJheSgzMiksXG4gICAgICB9LFxuICAgIF07XG4gICAgYXNzZXJ0LmlzRmFsc2UoYXJlUGlubmVkQ29udmVyc2F0aW9uc0VxdWFsKGxvY2FsVmFsdWUsIHJlbW90ZVZhbHVlKSk7XG4gIH0pO1xufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiQUFHQSxrQkFBdUI7QUFDdkIseUNBQTRDO0FBQzVDLHNCQUF1QztBQUV2QyxNQUFPLHFCQUFxQiw4QkFBTSxjQUFjO0FBRWhELFNBQVMsK0JBQStCLE1BQU07QUFDNUMsS0FBRyxxREFBcUQsTUFBTTtBQUM1RCxVQUFNLGFBQWE7QUFBQSxNQUNqQjtBQUFBLFFBQ0UsU0FBUztBQUFBLFVBQ1AsTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFFBQ1I7QUFBQSxNQUNGO0FBQUEsTUFDQTtBQUFBLFFBQ0UsZ0JBQWdCLElBQUksV0FBVyxFQUFFO0FBQUEsTUFDbkM7QUFBQSxJQUNGO0FBQ0EsVUFBTSxjQUFjO0FBQUEsTUFDbEI7QUFBQSxRQUNFLFNBQVM7QUFBQSxVQUNQLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxRQUNSO0FBQUEsTUFDRjtBQUFBLE1BQ0E7QUFBQSxRQUNFLGdCQUFnQixJQUFJLFdBQVcsRUFBRTtBQUFBLE1BQ25DO0FBQUEsSUFDRjtBQUVBLHVCQUFPLE9BQU8sb0VBQTRCLFlBQVksV0FBVyxDQUFDO0FBQUEsRUFDcEUsQ0FBQztBQUVELEtBQUcsb0NBQW9DLE1BQU07QUFDM0MsVUFBTSxhQUFhO0FBQUEsTUFDakI7QUFBQSxRQUNFLFNBQVM7QUFBQSxVQUNQLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxRQUNSO0FBQUEsTUFDRjtBQUFBLE1BQ0E7QUFBQSxRQUNFLFNBQVM7QUFBQSxVQUNQLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxRQUNSO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFDQSxVQUFNLGNBQWM7QUFBQSxNQUNsQjtBQUFBLFFBQ0UsU0FBUztBQUFBLFVBQ1AsTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFFBQ1I7QUFBQSxNQUNGO0FBQUEsTUFDQTtBQUFBLFFBQ0UsU0FBUztBQUFBLFVBQ1AsTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFFBQ1I7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUVBLHVCQUFPLFFBQVEsb0VBQTRCLFlBQVksV0FBVyxDQUFDO0FBQUEsRUFDckUsQ0FBQztBQUVELEtBQUcsd0NBQXdDLE1BQU07QUFDL0MsVUFBTSxhQUFhO0FBQUEsTUFDakI7QUFBQSxRQUNFLFNBQVM7QUFBQSxVQUNQLE1BQU07QUFBQSxVQUNOLE1BQU07QUFBQSxRQUNSO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFDQSxVQUFNLGNBQXlDLENBQUM7QUFDaEQsdUJBQU8sUUFBUSxvRUFBNEIsWUFBWSxXQUFXLENBQUM7QUFBQSxFQUNyRSxDQUFDO0FBRUQsS0FBRywwQ0FBMEMsTUFBTTtBQUNqRCxVQUFNLGFBQWE7QUFBQSxNQUNqQjtBQUFBLFFBQ0UsU0FBUztBQUFBLFVBQ1AsTUFBTTtBQUFBLFVBQ04sTUFBTTtBQUFBLFFBQ1I7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUNBLFVBQU0sY0FBYztBQUFBLE1BQ2xCO0FBQUEsUUFDRSxnQkFBZ0IsSUFBSSxXQUFXLEVBQUU7QUFBQSxNQUNuQztBQUFBLElBQ0Y7QUFDQSx1QkFBTyxRQUFRLG9FQUE0QixZQUFZLFdBQVcsQ0FBQztBQUFBLEVBQ3JFLENBQUM7QUFDSCxDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
