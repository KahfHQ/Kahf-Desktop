var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
const eventSplitter = /\s+/;
const eventsApi = function(obj, name, rest) {
  if (!name)
    return true;
  if (typeof name === "object") {
    for (const key in name) {
      obj.trigger(key, name[key], ...rest);
    }
    return false;
  }
  if (eventSplitter.test(name)) {
    const names = name.split(eventSplitter);
    for (let i = 0, l = names.length; i < l; i++) {
      obj.trigger(names[i], ...rest);
    }
    return false;
  }
  return true;
};
const triggerEvents = function(events, name, args) {
  let ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
  const logError = function(error) {
    window.SignalContext.log.error("Model caught error triggering", name, "event:", error && error instanceof Error && error.stack ? error.stack : error);
  };
  switch (args.length) {
    case 0:
      while (++i < l) {
        try {
          (ev = events[i]).callback.call(ev.ctx);
        } catch (error) {
          logError(error);
        }
      }
      return;
    case 1:
      while (++i < l) {
        try {
          (ev = events[i]).callback.call(ev.ctx, a1);
        } catch (error) {
          logError(error);
        }
      }
      return;
    case 2:
      while (++i < l) {
        try {
          (ev = events[i]).callback.call(ev.ctx, a1, a2);
        } catch (error) {
          logError(error);
        }
      }
      return;
    case 3:
      while (++i < l) {
        try {
          (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
        } catch (error) {
          logError(error);
        }
      }
      return;
    default:
      while (++i < l) {
        try {
          (ev = events[i]).callback.apply(ev.ctx, args);
        } catch (error) {
          logError(error);
        }
      }
  }
};
function trigger(name, ...args) {
  if (!this._events)
    return this;
  if (!eventsApi(this, name, args))
    return this;
  const events = this._events[name];
  const allEvents = this._events.all;
  if (events)
    triggerEvents(events, name, args);
  if (allEvents)
    triggerEvents(allEvents, name, [...arguments]);
  return this;
}
[
  window.Backbone.Model.prototype,
  window.Backbone.View.prototype,
  window.Backbone.Collection.prototype,
  window.Backbone.Events
].forEach((proto) => {
  Object.assign(proto, { trigger });
});
//# sourceMappingURL=data:application/json;base64,
