var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var handleMessageSend_exports = {};
__export(handleMessageSend_exports, {
  handleMessageSend: () => handleMessageSend,
  sendTypesEnum: () => sendTypesEnum,
  shouldSaveProto: () => shouldSaveProto
});
module.exports = __toCommonJS(handleMessageSend_exports);
var import_zod = require("zod");
var import_lodash = require("lodash");
var import_Client = __toESM(require("../sql/Client"));
var log = __toESM(require("../logging/log"));
var import_Errors = require("../textsecure/Errors");
var import_SealedSender = require("../types/SealedSender");
const { insertSentProto, updateConversation } = import_Client.default;
const sendTypesEnum = import_zod.z.enum([
  "message",
  "story",
  "callingMessage",
  "deleteForEveryone",
  "expirationTimerUpdate",
  "groupChange",
  "reaction",
  "typing",
  "deliveryReceipt",
  "readReceipt",
  "viewedReceipt",
  "nullMessage",
  "profileKeyUpdate",
  "resendFromLog",
  "retryRequest",
  "senderKeyDistributionMessage",
  "blockSyncRequest",
  "configurationSyncRequest",
  "contactSyncRequest",
  "groupSyncRequest",
  "keySyncRequest",
  "pniIdentitySyncRequest",
  "blockSync",
  "configurationSync",
  "contactSync",
  "groupSync",
  "keySync",
  "pniIdentitySync",
  "fetchLatestManifestSync",
  "fetchLocalProfileSync",
  "messageRequestSync",
  "readSync",
  "sentSync",
  "stickerPackSync",
  "verificationSync",
  "viewOnceSync",
  "viewSync",
  "legacyGroupChange",
  "resetSession"
]);
function shouldSaveProto(sendType) {
  if (sendType === "callingMessage") {
    return false;
  }
  if (sendType === "resendFromLog") {
    return false;
  }
  if (sendType === "retryRequest") {
    return false;
  }
  if (sendType === "typing") {
    return false;
  }
  return true;
}
function processError(error) {
  if (error instanceof import_Errors.OutgoingMessageError || error instanceof import_Errors.SendMessageNetworkError) {
    const conversation = window.ConversationController.getOrCreate(error.identifier, "private");
    if (error.code === 401 || error.code === 403) {
      if (conversation.get("sealedSender") === import_SealedSender.SEALED_SENDER.ENABLED || conversation.get("sealedSender") === import_SealedSender.SEALED_SENDER.UNRESTRICTED) {
        log.warn(`handleMessageSend: Got 401/403 for ${conversation.idForLogging()}, removing profile key`);
        conversation.setProfileKey(void 0);
      }
      if (conversation.get("sealedSender") === import_SealedSender.SEALED_SENDER.UNKNOWN) {
        log.warn(`handleMessageSend: Got 401/403 for ${conversation.idForLogging()}, setting sealedSender = DISABLED`);
        conversation.set("sealedSender", import_SealedSender.SEALED_SENDER.DISABLED);
        updateConversation(conversation.attributes);
      }
    }
    if (error.code === 404) {
      log.warn(`handleMessageSend: Got 404 for ${conversation.idForLogging()}, marking unregistered.`);
      conversation.setUnregistered();
    }
  }
  if (error instanceof import_Errors.UnregisteredUserError) {
    const conversation = window.ConversationController.getOrCreate(error.identifier, "private");
    log.warn(`handleMessageSend: Got 404 for ${conversation.idForLogging()}, marking unregistered.`);
    conversation.setUnregistered();
  }
}
async function handleMessageSend(promise, options) {
  try {
    const result = await promise;
    await maybeSaveToSendLog(result, options);
    await handleMessageSendResult(result.failoverIdentifiers, result.unidentifiedDeliveries);
    return result;
  } catch (err) {
    processError(err);
    if (err instanceof import_Errors.SendMessageProtoError) {
      await handleMessageSendResult(err.failoverIdentifiers, err.unidentifiedDeliveries);
      err.errors?.forEach(processError);
    }
    throw err;
  }
}
async function handleMessageSendResult(failoverIdentifiers, unidentifiedDeliveries) {
  await Promise.all((failoverIdentifiers || []).map(async (identifier) => {
    const conversation = window.ConversationController.get(identifier);
    if (conversation && conversation.get("sealedSender") !== import_SealedSender.SEALED_SENDER.DISABLED) {
      log.info(`Setting sealedSender to DISABLED for conversation ${conversation.idForLogging()}`);
      conversation.set({
        sealedSender: import_SealedSender.SEALED_SENDER.DISABLED
      });
      window.Signal.Data.updateConversation(conversation.attributes);
    }
  }));
  await Promise.all((unidentifiedDeliveries || []).map(async (identifier) => {
    const conversation = window.ConversationController.get(identifier);
    if (conversation && conversation.get("sealedSender") === import_SealedSender.SEALED_SENDER.UNKNOWN) {
      if (conversation.get("accessKey")) {
        log.info(`Setting sealedSender to ENABLED for conversation ${conversation.idForLogging()}`);
        conversation.set({
          sealedSender: import_SealedSender.SEALED_SENDER.ENABLED
        });
      } else {
        log.info(`Setting sealedSender to UNRESTRICTED for conversation ${conversation.idForLogging()}`);
        conversation.set({
          sealedSender: import_SealedSender.SEALED_SENDER.UNRESTRICTED
        });
      }
      window.Signal.Data.updateConversation(conversation.attributes);
    }
  }));
}
async function maybeSaveToSendLog(result, {
  messageIds,
  sendType
}) {
  const { contentHint, contentProto, recipients, timestamp, urgent } = result;
  if (!shouldSaveProto(sendType)) {
    return;
  }
  if (!(0, import_lodash.isNumber)(contentHint) || !contentProto || !recipients || !timestamp) {
    log.warn(`handleMessageSend: Missing necessary information to save to log for ${sendType} message ${timestamp}`);
    return;
  }
  const identifiers = Object.keys(recipients);
  if (identifiers.length === 0) {
    log.warn(`handleMessageSend: ${sendType} message ${timestamp} had no recipients`);
    return;
  }
  if (identifiers.length > 1) {
    return;
  }
  await insertSentProto({
    timestamp,
    proto: Buffer.from(contentProto),
    contentHint,
    urgent: (0, import_lodash.isBoolean)(urgent) ? urgent : true
  }, {
    messageIds,
    recipients
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handleMessageSend,
  sendTypesEnum,
  shouldSaveProto
});
//# sourceMappingURL=data:application/json;base64,
