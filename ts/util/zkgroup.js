var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var zkgroup_exports = {};
__export(zkgroup_exports, {
  createPNICredentialPresentation: () => createPNICredentialPresentation,
  createProfileKeyCredentialPresentation: () => createProfileKeyCredentialPresentation,
  decodeProfileKeyCredentialPresentation: () => decodeProfileKeyCredentialPresentation,
  decryptGroupBlob: () => decryptGroupBlob,
  decryptPniCredentialPresentation: () => decryptPniCredentialPresentation,
  decryptProfileKey: () => decryptProfileKey,
  decryptUuid: () => decryptUuid,
  deriveGroupID: () => deriveGroupID,
  deriveGroupPublicParams: () => deriveGroupPublicParams,
  deriveGroupSecretParams: () => deriveGroupSecretParams,
  deriveProfileKeyCommitment: () => deriveProfileKeyCommitment,
  deriveProfileKeyVersion: () => deriveProfileKeyVersion,
  encryptGroupBlob: () => encryptGroupBlob,
  encryptUuid: () => encryptUuid,
  generatePNICredentialRequest: () => generatePNICredentialRequest,
  generateProfileKeyCredentialRequest: () => generateProfileKeyCredentialRequest,
  getAuthCredentialPresentation: () => getAuthCredentialPresentation,
  getClientZkAuthOperations: () => getClientZkAuthOperations,
  getClientZkGroupCipher: () => getClientZkGroupCipher,
  getClientZkProfileOperations: () => getClientZkProfileOperations,
  handleProfileKeyCredential: () => handleProfileKeyCredential,
  handleProfileKeyPNICredential: () => handleProfileKeyPNICredential,
  verifyNotarySignature: () => verifyNotarySignature
});
module.exports = __toCommonJS(zkgroup_exports);
var import_zkgroup = require("@signalapp/libsignal-client/zkgroup");
var import_UUID = require("../types/UUID");
__reExport(zkgroup_exports, require("@signalapp/libsignal-client/zkgroup"), module.exports);
function decryptGroupBlob(clientZkGroupCipher, ciphertext) {
  return clientZkGroupCipher.decryptBlob(Buffer.from(ciphertext));
}
function decodeProfileKeyCredentialPresentation(presentationBuffer) {
  const presentation = new import_zkgroup.ProfileKeyCredentialPresentation(Buffer.from(presentationBuffer));
  const userId = presentation.getUuidCiphertext().serialize();
  const profileKey = presentation.getProfileKeyCiphertext().serialize();
  return {
    profileKey,
    userId
  };
}
function decryptPniCredentialPresentation(clientZkGroupCipher, presentationBuffer) {
  const presentation = new import_zkgroup.PniCredentialPresentation(Buffer.from(presentationBuffer));
  const pniCiphertext = presentation.getPniCiphertext();
  const aciCiphertext = presentation.getAciCiphertext();
  const aci = clientZkGroupCipher.decryptUuid(aciCiphertext);
  const pni = clientZkGroupCipher.decryptUuid(pniCiphertext);
  const profileKeyCiphertext = presentation.getProfileKeyCiphertext();
  const profileKey = clientZkGroupCipher.decryptProfileKey(profileKeyCiphertext, aci);
  return {
    profileKey: profileKey.serialize(),
    aci: import_UUID.UUID.cast(aci),
    pni: import_UUID.UUID.cast(pni)
  };
}
function decryptProfileKey(clientZkGroupCipher, profileKeyCiphertextBuffer, uuid) {
  const profileKeyCiphertext = new import_zkgroup.ProfileKeyCiphertext(Buffer.from(profileKeyCiphertextBuffer));
  const profileKey = clientZkGroupCipher.decryptProfileKey(profileKeyCiphertext, uuid);
  return profileKey.serialize();
}
function decryptUuid(clientZkGroupCipher, uuidCiphertextBuffer) {
  const uuidCiphertext = new import_zkgroup.UuidCiphertext(Buffer.from(uuidCiphertextBuffer));
  return clientZkGroupCipher.decryptUuid(uuidCiphertext);
}
function deriveProfileKeyVersion(profileKeyBase64, uuid) {
  const profileKeyArray = Buffer.from(profileKeyBase64, "base64");
  const profileKey = new import_zkgroup.ProfileKey(profileKeyArray);
  const profileKeyVersion = profileKey.getProfileKeyVersion(uuid);
  return profileKeyVersion.toString();
}
function deriveGroupPublicParams(groupSecretParamsBuffer) {
  const groupSecretParams = new import_zkgroup.GroupSecretParams(Buffer.from(groupSecretParamsBuffer));
  return groupSecretParams.getPublicParams().serialize();
}
function deriveGroupID(groupSecretParamsBuffer) {
  const groupSecretParams = new import_zkgroup.GroupSecretParams(Buffer.from(groupSecretParamsBuffer));
  return groupSecretParams.getPublicParams().getGroupIdentifier().serialize();
}
function deriveGroupSecretParams(masterKeyBuffer) {
  const masterKey = new import_zkgroup.GroupMasterKey(Buffer.from(masterKeyBuffer));
  const groupSecretParams = import_zkgroup.GroupSecretParams.deriveFromMasterKey(masterKey);
  return groupSecretParams.serialize();
}
function encryptGroupBlob(clientZkGroupCipher, plaintext) {
  return clientZkGroupCipher.encryptBlob(Buffer.from(plaintext));
}
function encryptUuid(clientZkGroupCipher, uuidPlaintext) {
  const uuidCiphertext = clientZkGroupCipher.encryptUuid(uuidPlaintext.toString());
  return uuidCiphertext.serialize();
}
function generateProfileKeyCredentialRequest(clientZkProfileCipher, uuid, profileKeyBase64) {
  const profileKeyArray = Buffer.from(profileKeyBase64, "base64");
  const profileKey = new import_zkgroup.ProfileKey(profileKeyArray);
  const context = clientZkProfileCipher.createProfileKeyCredentialRequestContext(uuid, profileKey);
  const request = context.getRequest();
  const requestArray = request.serialize();
  return {
    context,
    requestHex: requestArray.toString("hex")
  };
}
function generatePNICredentialRequest(clientZkProfileCipher, aci, pni, profileKeyBase64) {
  const profileKeyArray = Buffer.from(profileKeyBase64, "base64");
  const profileKey = new import_zkgroup.ProfileKey(profileKeyArray);
  const context = clientZkProfileCipher.createPniCredentialRequestContext(aci, pni, profileKey);
  const request = context.getRequest();
  const requestArray = request.serialize();
  return {
    context,
    requestHex: requestArray.toString("hex")
  };
}
function getAuthCredentialPresentation(clientZkAuthOperations, authCredentialBase64, groupSecretParamsBase64) {
  const authCredential = new import_zkgroup.AuthCredentialWithPni(Buffer.from(authCredentialBase64, "base64"));
  const secretParams = new import_zkgroup.GroupSecretParams(Buffer.from(groupSecretParamsBase64, "base64"));
  const presentation = clientZkAuthOperations.createAuthCredentialWithPniPresentation(secretParams, authCredential);
  return presentation.serialize();
}
function createProfileKeyCredentialPresentation(clientZkProfileCipher, profileKeyCredentialBase64, groupSecretParamsBase64) {
  const profileKeyCredentialArray = Buffer.from(profileKeyCredentialBase64, "base64");
  const profileKeyCredential = new import_zkgroup.ExpiringProfileKeyCredential(profileKeyCredentialArray);
  const secretParams = new import_zkgroup.GroupSecretParams(Buffer.from(groupSecretParamsBase64, "base64"));
  const presentation = clientZkProfileCipher.createExpiringProfileKeyCredentialPresentation(secretParams, profileKeyCredential);
  return presentation.serialize();
}
function createPNICredentialPresentation(clientZkProfileCipher, pniCredentialBase64, groupSecretParamsBase64) {
  const pniCredentialArray = Buffer.from(pniCredentialBase64, "base64");
  const pniCredential = new import_zkgroup.PniCredential(pniCredentialArray);
  const secretParams = new import_zkgroup.GroupSecretParams(Buffer.from(groupSecretParamsBase64, "base64"));
  const presentation = clientZkProfileCipher.createPniCredentialPresentation(secretParams, pniCredential);
  return presentation.serialize();
}
function getClientZkAuthOperations(serverPublicParamsBase64) {
  const serverPublicParams = new import_zkgroup.ServerPublicParams(Buffer.from(serverPublicParamsBase64, "base64"));
  return new import_zkgroup.ClientZkAuthOperations(serverPublicParams);
}
function getClientZkGroupCipher(groupSecretParamsBase64) {
  const serverPublicParams = new import_zkgroup.GroupSecretParams(Buffer.from(groupSecretParamsBase64, "base64"));
  return new import_zkgroup.ClientZkGroupCipher(serverPublicParams);
}
function getClientZkProfileOperations(serverPublicParamsBase64) {
  const serverPublicParams = new import_zkgroup.ServerPublicParams(Buffer.from(serverPublicParamsBase64, "base64"));
  return new import_zkgroup.ClientZkProfileOperations(serverPublicParams);
}
function handleProfileKeyCredential(clientZkProfileCipher, context, responseBase64) {
  const response = new import_zkgroup.ExpiringProfileKeyCredentialResponse(Buffer.from(responseBase64, "base64"));
  const profileKeyCredential = clientZkProfileCipher.receiveExpiringProfileKeyCredential(context, response);
  const credentialArray = profileKeyCredential.serialize();
  return {
    credential: credentialArray.toString("base64"),
    expiration: profileKeyCredential.getExpirationTime().getTime()
  };
}
function handleProfileKeyPNICredential(clientZkProfileCipher, context, responseBase64) {
  const response = new import_zkgroup.PniCredentialResponse(Buffer.from(responseBase64, "base64"));
  const pniCredential = clientZkProfileCipher.receivePniCredential(context, response);
  const credentialArray = pniCredential.serialize();
  return credentialArray.toString("base64");
}
function deriveProfileKeyCommitment(profileKeyBase64, uuid) {
  const profileKeyArray = Buffer.from(profileKeyBase64, "base64");
  const profileKey = new import_zkgroup.ProfileKey(profileKeyArray);
  return profileKey.getCommitment(uuid).contents.toString("base64");
}
function verifyNotarySignature(serverPublicParamsBase64, message, signature) {
  const serverPublicParams = new import_zkgroup.ServerPublicParams(Buffer.from(serverPublicParamsBase64, "base64"));
  const notarySignature = new import_zkgroup.NotarySignature(Buffer.from(signature));
  serverPublicParams.verifySignature(Buffer.from(message), notarySignature);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createPNICredentialPresentation,
  createProfileKeyCredentialPresentation,
  decodeProfileKeyCredentialPresentation,
  decryptGroupBlob,
  decryptPniCredentialPresentation,
  decryptProfileKey,
  decryptUuid,
  deriveGroupID,
  deriveGroupPublicParams,
  deriveGroupSecretParams,
  deriveProfileKeyCommitment,
  deriveProfileKeyVersion,
  encryptGroupBlob,
  encryptUuid,
  generatePNICredentialRequest,
  generateProfileKeyCredentialRequest,
  getAuthCredentialPresentation,
  getClientZkAuthOperations,
  getClientZkGroupCipher,
  getClientZkProfileOperations,
  handleProfileKeyCredential,
  handleProfileKeyPNICredential,
  verifyNotarySignature
});
//# sourceMappingURL=data:application/json;base64,
