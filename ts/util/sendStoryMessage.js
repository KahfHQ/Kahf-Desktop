var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var sendStoryMessage_exports = {};
__export(sendStoryMessage_exports, {
  sendStoryMessage: () => sendStoryMessage
});
module.exports = __toCommonJS(sendStoryMessage_exports);
var log = __toESM(require("../logging/log"));
var import_Client = __toESM(require("../sql/Client"));
var import_durations = require("./durations");
var import_Stories = require("../types/Stories");
var import_MessageReadStatus = require("../messages/MessageReadStatus");
var import_MessageSeenStatus = require("../MessageSeenStatus");
var import_MessageSendState = require("../messages/MessageSendState");
var import_UUID = require("../types/UUID");
var import_conversationJobQueue = require("../jobs/conversationJobQueue");
var import_formatJobForInsert = require("../jobs/formatJobForInsert");
var import_getRecipients = require("./getRecipients");
var import_getSignalConnections = require("./getSignalConnections");
var import_incrementMessageCounter = require("./incrementMessageCounter");
var import_whatTypeOfConversation = require("./whatTypeOfConversation");
var import_isNotNil = require("./isNotNil");
async function sendStoryMessage(listIds, conversationIds, attachment) {
  const { messaging } = window.textsecure;
  if (!messaging) {
    log.warn("stories.sendStoryMessage: messaging not available");
    return;
  }
  const distributionLists = (await Promise.all(listIds.map((listId) => import_Client.default.getStoryDistributionWithMembers(listId)))).filter(import_isNotNil.isNotNil);
  if (!distributionLists.length && !conversationIds.length) {
    log.warn("stories.sendStoryMessage: Dropping send. no conversations to send to and no distribution lists found for", listIds);
    return;
  }
  const ourConversation = window.ConversationController.getOurConversationOrThrow();
  const timestamp = Date.now();
  const sendStateByListId = /* @__PURE__ */ new Map();
  const recipientsAlreadySentTo = /* @__PURE__ */ new Map();
  distributionLists.sort((list) => list.allowsReplies ? -1 : 1).forEach((distributionList) => {
    const sendStateByConversationId = {};
    let distributionListMembers = [];
    if (distributionList.id === import_Stories.MY_STORIES_ID && distributionList.isBlockList) {
      const inBlockList = new Set(distributionList.members);
      distributionListMembers = (0, import_getSignalConnections.getSignalConnections)().reduce((acc, convo) => {
        const id = convo.get("uuid");
        if (!id) {
          return acc;
        }
        const uuid = import_UUID.UUID.cast(id);
        if (inBlockList.has(uuid)) {
          return acc;
        }
        acc.push(uuid);
        return acc;
      }, []);
    } else {
      distributionListMembers = distributionList.members;
    }
    distributionListMembers.forEach((destinationUuid) => {
      const conversation = window.ConversationController.get(destinationUuid);
      if (!conversation) {
        return;
      }
      sendStateByConversationId[conversation.id] = {
        isAllowedToReplyToStory: recipientsAlreadySentTo.get(destinationUuid) || distributionList.allowsReplies,
        isAlreadyIncludedInAnotherDistributionList: recipientsAlreadySentTo.has(destinationUuid),
        status: import_MessageSendState.SendStatus.Pending,
        updatedAt: timestamp
      };
      if (!recipientsAlreadySentTo.has(destinationUuid)) {
        recipientsAlreadySentTo.set(destinationUuid, distributionList.allowsReplies);
      }
    });
    sendStateByListId.set(distributionList.id, sendStateByConversationId);
  });
  const attachments = [attachment];
  const distributionListMessages = await Promise.all(distributionLists.map(async (distributionList) => {
    const sendStateByConversationId = sendStateByListId.get(distributionList.id);
    if (!sendStateByConversationId) {
      log.warn("stories.sendStoryMessage: No sendStateByConversationId for distribution list", distributionList.id);
    }
    return window.Signal.Migrations.upgradeMessageSchema({
      attachments,
      conversationId: ourConversation.id,
      expireTimer: import_durations.DAY / import_durations.SECOND,
      id: import_UUID.UUID.generate().toString(),
      readStatus: import_MessageReadStatus.ReadStatus.Read,
      received_at: (0, import_incrementMessageCounter.incrementMessageCounter)(),
      received_at_ms: timestamp,
      seenStatus: import_MessageSeenStatus.SeenStatus.NotApplicable,
      sendStateByConversationId,
      sent_at: timestamp,
      source: window.textsecure.storage.user.getNumber(),
      sourceUuid: window.textsecure.storage.user.getUuid()?.toString(),
      storyDistributionListId: distributionList.id,
      timestamp,
      type: "story"
    });
  }));
  const groupV2MessagesByConversationId = /* @__PURE__ */ new Map();
  await Promise.all(conversationIds.map(async (conversationId) => {
    const group = window.ConversationController.get(conversationId);
    if (!group) {
      log.warn("stories.sendStoryMessage: No group found for id", conversationId);
      return;
    }
    if (!(0, import_whatTypeOfConversation.isGroupV2)(group.attributes)) {
      log.warn("stories.sendStoryMessage: Conversation we tried to send to is not a groupV2", conversationId);
      return;
    }
    const myId = window.ConversationController.getOurConversationIdOrThrow();
    const sendState = {
      status: import_MessageSendState.SendStatus.Pending,
      updatedAt: timestamp
    };
    const sendStateByConversationId = (0, import_getRecipients.getRecipients)(group.attributes).reduce((acc, id) => {
      const conversation = window.ConversationController.get(id);
      if (!conversation) {
        return acc;
      }
      return {
        ...acc,
        [conversation.id]: sendState
      };
    }, {
      [myId]: sendState
    });
    const messageAttributes = await window.Signal.Migrations.upgradeMessageSchema({
      attachments,
      conversationId,
      expireTimer: import_durations.DAY / import_durations.SECOND,
      id: import_UUID.UUID.generate().toString(),
      readStatus: import_MessageReadStatus.ReadStatus.Read,
      received_at: (0, import_incrementMessageCounter.incrementMessageCounter)(),
      received_at_ms: timestamp,
      seenStatus: import_MessageSeenStatus.SeenStatus.NotApplicable,
      sendStateByConversationId,
      sent_at: timestamp,
      source: window.textsecure.storage.user.getNumber(),
      sourceUuid: window.textsecure.storage.user.getUuid()?.toString(),
      timestamp,
      type: "story"
    });
    groupV2MessagesByConversationId.set(conversationId, messageAttributes);
  }));
  await Promise.all(distributionListMessages.map((messageAttributes) => {
    const model = new window.Whisper.Message(messageAttributes);
    const message = window.MessageController.register(model.id, model);
    ourConversation.addSingleMessage(model, { isJustSent: true });
    log.info(`stories.sendStoryMessage: saving message ${message.id}`);
    return import_Client.default.saveMessage(message.attributes, {
      forceSave: true,
      ourUuid: window.textsecure.storage.user.getCheckedUuid().toString()
    });
  }));
  await import_conversationJobQueue.conversationJobQueue.add({
    type: import_conversationJobQueue.conversationQueueJobEnum.enum.Story,
    conversationId: ourConversation.id,
    messageIds: distributionListMessages.map((m) => m.id),
    timestamp
  }, async (jobToInsert) => {
    log.info(`stories.sendStoryMessage: saving job ${jobToInsert.id}`);
    await import_Client.default.insertJob((0, import_formatJobForInsert.formatJobForInsert)(jobToInsert));
  });
  await Promise.all(conversationIds.map((conversationId) => {
    const messageAttributes = groupV2MessagesByConversationId.get(conversationId);
    if (!messageAttributes) {
      log.warn("stories.sendStoryMessage: Trying to send a group story but it did not exist? This is unexpected. Not sending.", conversationId);
      return;
    }
    return import_conversationJobQueue.conversationJobQueue.add({
      type: import_conversationJobQueue.conversationQueueJobEnum.enum.Story,
      conversationId,
      messageIds: [messageAttributes.id],
      timestamp
    }, async (jobToInsert) => {
      const model = new window.Whisper.Message(messageAttributes);
      const message = window.MessageController.register(model.id, model);
      const conversation = message.getConversation();
      conversation?.addSingleMessage(model, { isJustSent: true });
      log.info(`stories.sendStoryMessage: saving message ${message.id}`);
      await import_Client.default.saveMessage(message.attributes, {
        forceSave: true,
        jobToInsert,
        ourUuid: window.textsecure.storage.user.getCheckedUuid().toString()
      });
    });
  }));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  sendStoryMessage
});
//# sourceMappingURL=data:application/json;base64,
