var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var showToast_exports = {};
__export(showToast_exports, {
  showToast: () => showToast
});
module.exports = __toCommonJS(showToast_exports);
var import_react = __toESM(require("react"));
var import_react_dom = require("react-dom");
function showToast(Toast, props = {}) {
  const node = document.getElementById("toast");
  function onClose() {
    if (!node) {
      return;
    }
    (0, import_react_dom.unmountComponentAtNode)(node);
  }
  (0, import_react_dom.render)(/* @__PURE__ */ import_react.default.createElement(Toast, {
    i18n: window.i18n,
    onClose,
    ...props
  }), node);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  showToast
});
//# sourceMappingURL=data:application/json;base64,
