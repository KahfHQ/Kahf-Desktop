var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var sessionTranslation_exports = {};
__export(sessionTranslation_exports, {
  sessionRecordToProtobuf: () => sessionRecordToProtobuf,
  sessionStructureToBytes: () => sessionStructureToBytes
});
module.exports = __toCommonJS(sessionTranslation_exports);
var import_lodash = require("lodash");
var import_compiled = require("../protobuf/compiled");
var Bytes = __toESM(require("../Bytes"));
var import_Crypto = require("../Crypto");
const { RecordStructure, SessionStructure } = import_compiled.signal.proto.storage;
const { Chain } = SessionStructure;
function sessionStructureToBytes(recordStructure) {
  return import_compiled.signal.proto.storage.RecordStructure.encode(recordStructure).finish();
}
function sessionRecordToProtobuf(record, ourData) {
  const proto = new RecordStructure();
  proto.previousSessions = [];
  const sessionGroup = record.sessions || {};
  const sessions = Object.values(sessionGroup);
  const first = sessions.find((session) => {
    return session?.indexInfo?.closed === -1;
  });
  if (first) {
    proto.currentSession = toProtobufSession(first, ourData);
  }
  sessions.sort((left, right) => {
    return (right?.indexInfo?.closed || 0) - (left?.indexInfo?.closed || 0);
  });
  const onlyClosed = sessions.filter((session) => session?.indexInfo?.closed !== -1);
  if (onlyClosed.length < sessions.length - 1) {
    throw new Error("toProtobuf: More than one open session!");
  }
  proto.previousSessions = [];
  onlyClosed.forEach((session) => {
    proto.previousSessions.push(toProtobufSession(session, ourData));
  });
  if (!proto.currentSession && proto.previousSessions.length === 0) {
    throw new Error("toProtobuf: Record had no sessions!");
  }
  return proto;
}
function toProtobufSession(session, ourData) {
  const proto = new SessionStructure();
  proto.aliceBaseKey = binaryToUint8Array(session, "indexInfo.baseKey", 33);
  proto.localIdentityPublic = ourData.identityKeyPublic;
  proto.localRegistrationId = ourData.registrationId;
  proto.previousCounter = getInteger(session, "currentRatchet.previousCounter") + 1;
  proto.remoteIdentityPublic = binaryToUint8Array(session, "indexInfo.remoteIdentityKey", 33);
  proto.remoteRegistrationId = getInteger(session, "registrationId");
  proto.rootKey = binaryToUint8Array(session, "currentRatchet.rootKey", 32);
  proto.sessionVersion = 3;
  if (session.pendingPreKey) {
    proto.pendingPreKey = new import_compiled.signal.proto.storage.SessionStructure.PendingPreKey();
    proto.pendingPreKey.baseKey = binaryToUint8Array(session, "pendingPreKey.baseKey", 33);
    proto.pendingPreKey.signedPreKeyId = getInteger(session, "pendingPreKey.signedKeyId");
    if (session.pendingPreKey.preKeyId !== void 0) {
      proto.pendingPreKey.preKeyId = getInteger(session, "pendingPreKey.preKeyId");
    }
  }
  const senderBaseKey = session.currentRatchet?.ephemeralKeyPair?.pubKey;
  if (!senderBaseKey) {
    throw new Error("toProtobufSession: No sender base key!");
  }
  const senderChain = session[senderBaseKey];
  if (!senderChain) {
    throw new Error("toProtobufSession: No matching chain found with senderBaseKey!");
  }
  if (senderChain.chainType !== 1) {
    throw new Error(`toProtobufSession: Expected sender chain type for senderChain, got ${senderChain.chainType}`);
  }
  const protoSenderChain = toProtobufChain(senderChain);
  protoSenderChain.senderRatchetKey = binaryToUint8Array(session, "currentRatchet.ephemeralKeyPair.pubKey", 33);
  protoSenderChain.senderRatchetKeyPrivate = binaryToUint8Array(session, "currentRatchet.ephemeralKeyPair.privKey", 32);
  proto.senderChain = protoSenderChain;
  proto.receiverChains = [];
  const firstReceiverChainBaseKey = session.currentRatchet?.lastRemoteEphemeralKey;
  if (!firstReceiverChainBaseKey) {
    throw new Error("toProtobufSession: No receiver base key!");
  }
  const firstReceiverChain = session[firstReceiverChainBaseKey];
  if (firstReceiverChain) {
    const protoFirstReceiverChain = toProtobufChain(firstReceiverChain);
    if (firstReceiverChain.chainType !== 2) {
      throw new Error(`toProtobufSession: Expected receiver chain type for firstReceiverChain, got ${firstReceiverChain.chainType}`);
    }
    protoFirstReceiverChain.senderRatchetKey = binaryToUint8Array(session, "currentRatchet.lastRemoteEphemeralKey", 33);
    proto.receiverChains.push(protoFirstReceiverChain);
  }
  const oldChains = (session.oldRatchetList || []).slice(0).sort((left, right) => (right.added || 0) - (left.added || 0));
  oldChains.forEach((oldRatchet) => {
    const baseKey = oldRatchet.ephemeralKey;
    if (!baseKey) {
      throw new Error("toProtobufSession: No base key for old receiver chain!");
    }
    const chain = session[baseKey];
    if (!chain) {
      throw new Error("toProtobufSession: No chain for old receiver chain base key!");
    }
    if (chain.chainType !== 2) {
      throw new Error(`toProtobufSession: Expected receiver chain type, got ${chain.chainType}`);
    }
    const protoChain = toProtobufChain(chain);
    protoChain.senderRatchetKey = binaryToUint8Array(oldRatchet, "ephemeralKey", 33);
    proto.receiverChains.push(protoChain);
  });
  return proto;
}
function toProtobufChain(chain) {
  const proto = new Chain();
  const protoChainKey = new Chain.ChainKey();
  protoChainKey.index = getInteger(chain, "chainKey.counter") + 1;
  if (chain.chainKey?.key !== void 0) {
    protoChainKey.key = binaryToUint8Array(chain, "chainKey.key", 32);
  }
  proto.chainKey = protoChainKey;
  const messageKeys = Object.entries(chain.messageKeys || {});
  proto.messageKeys = messageKeys.map((entry) => {
    const protoMessageKey = new SessionStructure.Chain.MessageKey();
    protoMessageKey.index = getInteger(entry, "0") + 1;
    const key = binaryToUint8Array(entry, "1", 32);
    const { cipherKey, macKey, iv } = translateMessageKey(key);
    protoMessageKey.cipherKey = cipherKey;
    protoMessageKey.macKey = macKey;
    protoMessageKey.iv = iv;
    return protoMessageKey;
  });
  return proto;
}
const WHISPER_MESSAGE_KEYS = "WhisperMessageKeys";
function translateMessageKey(key) {
  const input = key;
  const salt = new Uint8Array(32);
  const info = Bytes.fromString(WHISPER_MESSAGE_KEYS);
  const [cipherKey, macKey, ivContainer] = (0, import_Crypto.deriveSecrets)(input, salt, info);
  return {
    cipherKey,
    macKey,
    iv: ivContainer.slice(0, 16)
  };
}
function binaryToUint8Array(object, path, length) {
  const target = (0, import_lodash.get)(object, path);
  if (target === null || target === void 0) {
    throw new Error(`binaryToUint8Array: Falsey path ${path}`);
  }
  if (!(0, import_lodash.isString)(target)) {
    throw new Error(`binaryToUint8Array: String not found at path ${path}`);
  }
  const buffer = Bytes.fromBinary(target);
  if (length && buffer.byteLength !== length) {
    throw new Error(`binaryToUint8Array: Got unexpected length ${buffer.byteLength} instead of ${length} at path ${path}`);
  }
  return buffer;
}
function getInteger(object, path) {
  const target = (0, import_lodash.get)(object, path);
  if (target === null || target === void 0) {
    throw new Error(`getInteger: Falsey path ${path}`);
  }
  if ((0, import_lodash.isString)(target)) {
    const result = parseInt(target, 10);
    if (!(0, import_lodash.isFinite)(result)) {
      throw new Error(`getInteger: Value could not be parsed as number at ${path}: {target}`);
    }
    if (!(0, import_lodash.isInteger)(result)) {
      throw new Error(`getInteger: Parsed value not an integer at ${path}: {target}`);
    }
    return result;
  }
  if (!(0, import_lodash.isInteger)(target)) {
    throw new Error(`getInteger: Value not an integer at ${path}: {target}`);
  }
  return target;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  sessionRecordToProtobuf,
  sessionStructureToBytes
});
//# sourceMappingURL=data:application/json;base64,
