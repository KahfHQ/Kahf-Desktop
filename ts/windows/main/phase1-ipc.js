var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_electron = require("electron");
var semver = __toESM(require("semver"));
var import_lodash = require("lodash");
var import_parseIntWithFallback = require("../../util/parseIntWithFallback");
var import_UUID = require("../../types/UUID");
var import_Util = require("../../types/Util");
var import_environment = require("../../environment");
var import_context = require("../context");
var log = __toESM(require("../../logging/log"));
var import_assert = require("../../util/assert");
window.i18n = import_context.SignalContext.i18n;
const { config } = window.SignalContext;
window.GV2_ENABLE_SINGLE_CHANGE_PROCESSING = true;
window.GV2_ENABLE_CHANGE_PROCESSING = true;
window.GV2_ENABLE_STATE_PROCESSING = true;
window.GV2_ENABLE_PRE_JOIN_FETCH = true;
window.GV2_MIGRATION_DISABLE_ADD = false;
window.GV2_MIGRATION_DISABLE_INVITE = false;
window.RETRY_DELAY = false;
window.platform = process.platform;
window.getTitle = () => title;
window.getLocale = () => config.locale;
window.getEnvironment = import_environment.getEnvironment;
window.getAppInstance = () => config.appInstance;
window.getVersion = () => config.version;
window.getBuildCreation = () => (0, import_parseIntWithFallback.parseIntWithFallback)(config.buildCreation, 0);
window.getExpiration = () => {
  const sixtyDays = 60 * 86400 * 1e3;
  const remoteBuildExpiration = window.storage.get("remoteBuildExpiration");
  const { buildExpiration } = config;
  const localBuildExpiration = window.Events.getAutoDownloadUpdate() ? buildExpiration : buildExpiration - sixtyDays;
  if (remoteBuildExpiration) {
    return remoteBuildExpiration < localBuildExpiration ? remoteBuildExpiration : localBuildExpiration;
  }
  return localBuildExpiration;
};
window.Accessibility = {
  reducedMotionSetting: Boolean(config.reducedMotionSetting)
};
window.getHostName = () => config.hostname;
window.getServerTrustRoot = () => config.serverTrustRoot;
window.getServerPublicParams = () => config.serverPublicParams;
window.getSfuUrl = () => config.sfuUrl;
window.isBehindProxy = () => Boolean(config.proxyUrl);
let title = config.name;
if ((0, import_environment.getEnvironment)() !== import_environment.Environment.Production) {
  title += ` - ${(0, import_environment.getEnvironment)()}`;
}
if (config.appInstance) {
  title += ` - ${config.appInstance}`;
}
if (config.theme === "light") {
  window.initialTheme = import_Util.ThemeType.light;
} else if (config.theme === "dark") {
  window.initialTheme = import_Util.ThemeType.dark;
}
window.getAutoLaunch = () => {
  return import_electron.ipcRenderer.invoke("get-auto-launch");
};
window.setAutoLaunch = (value) => {
  return import_electron.ipcRenderer.invoke("set-auto-launch", value);
};
window.isBeforeVersion = (toCheck, baseVersion) => {
  try {
    return semver.lt(toCheck, baseVersion);
  } catch (error) {
    log.error(`isBeforeVersion error: toCheck: ${toCheck}, baseVersion: ${baseVersion}`, error && error.stack ? error.stack : error);
    return true;
  }
};
window.isAfterVersion = (toCheck, baseVersion) => {
  try {
    return semver.gt(toCheck, baseVersion);
  } catch (error) {
    log.error(`isBeforeVersion error: toCheck: ${toCheck}, baseVersion: ${baseVersion}`, error && error.stack ? error.stack : error);
    return true;
  }
};
window.setBadgeCount = (count) => import_electron.ipcRenderer.send("set-badge-count", count);
let preloadConnectTime = 0;
window.logAuthenticatedConnect = () => {
  if (preloadConnectTime === 0) {
    preloadConnectTime = Date.now();
  }
};
window.logAppLoadedEvent = ({ processedCount }) => import_electron.ipcRenderer.send("signal-app-loaded", {
  preloadTime: window.preloadEndTime - window.preloadStartTime,
  connectTime: preloadConnectTime - window.preloadEndTime,
  processedCount
});
window.open = () => null;
if (!config.enableCI && config.environment !== "test") {
  window.eval = global.eval = () => null;
}
window.drawAttention = () => {
  log.info("draw attention");
  import_electron.ipcRenderer.send("draw-attention");
};
window.showWindow = () => {
  log.info("show window");
  import_electron.ipcRenderer.send("show-window");
};
window.titleBarDoubleClick = () => {
  import_electron.ipcRenderer.send("title-bar-double-click");
};
window.setAutoHideMenuBar = (autoHide) => import_electron.ipcRenderer.send("set-auto-hide-menu-bar", autoHide);
window.setMenuBarVisibility = (visibility) => import_electron.ipcRenderer.send("set-menu-bar-visibility", visibility);
window.updateSystemTraySetting = (systemTraySetting) => {
  import_electron.ipcRenderer.send("update-system-tray-setting", systemTraySetting);
};
window.restart = () => {
  log.info("restart");
  import_electron.ipcRenderer.send("restart");
};
window.shutdown = () => {
  log.info("shutdown");
  import_electron.ipcRenderer.send("shutdown");
};
window.showDebugLog = () => {
  log.info("showDebugLog");
  import_electron.ipcRenderer.send("show-debug-log");
};
window.closeAbout = () => import_electron.ipcRenderer.send("close-about");
window.readyForUpdates = () => import_electron.ipcRenderer.send("ready-for-updates");
window.updateTrayIcon = (unreadCount) => import_electron.ipcRenderer.send("update-tray-icon", unreadCount);
import_electron.ipcRenderer.on("additional-log-data-request", async (event) => {
  const ourConversation = window.ConversationController.getOurConversation();
  const ourCapabilities = ourConversation ? ourConversation.get("capabilities") : void 0;
  const remoteConfig = window.storage.get("remoteConfig") || {};
  let statistics;
  try {
    statistics = await window.Signal.Data.getStatisticsForLogging();
  } catch (error) {
    statistics = {};
  }
  const ourUuid = window.textsecure.storage.user.getUuid();
  const ourPni = window.textsecure.storage.user.getUuid(import_UUID.UUIDKind.PNI);
  event.sender.send("additional-log-data-response", {
    capabilities: ourCapabilities || {},
    remoteConfig: (0, import_lodash.mapValues)(remoteConfig, ({ value, enabled }) => {
      const enableString = enabled ? "enabled" : "disabled";
      const valueString = value && value !== "TRUE" ? ` ${value}` : "";
      return `${enableString}${valueString}`;
    }),
    statistics,
    user: {
      deviceId: window.textsecure.storage.user.getDeviceId(),
      e164: window.textsecure.storage.user.getNumber(),
      uuid: ourUuid && ourUuid.toString(),
      pni: ourPni && ourPni.toString(),
      conversationId: ourConversation && ourConversation.id
    }
  });
});
import_electron.ipcRenderer.on("set-up-as-new-device", () => {
  window.Whisper.events.trigger("setupAsNewDevice");
});
import_electron.ipcRenderer.on("set-up-as-standalone", () => {
  window.Whisper.events.trigger("setupAsStandalone");
});
import_electron.ipcRenderer.on("challenge:response", (_event, response) => {
  window.Whisper.events.trigger("challengeResponse", response);
});
import_electron.ipcRenderer.on("power-channel:suspend", () => {
  window.Whisper.events.trigger("powerMonitorSuspend");
});
import_electron.ipcRenderer.on("power-channel:resume", () => {
  window.Whisper.events.trigger("powerMonitorResume");
});
import_electron.ipcRenderer.on("power-channel:lock-screen", () => {
  window.Whisper.events.trigger("powerMonitorLockScreen");
});
import_electron.ipcRenderer.on("window:set-window-stats", (_event, stats) => {
  if (!window.Whisper.events) {
    return;
  }
  window.Whisper.events.trigger("setWindowStats", stats);
});
import_electron.ipcRenderer.on("window:set-menu-options", (_event, options) => {
  if (!window.Whisper.events) {
    return;
  }
  window.Whisper.events.trigger("setMenuOptions", options);
});
window.sendChallengeRequest = (request) => import_electron.ipcRenderer.send("challenge:request", request);
{
  let isFullScreen = Boolean(config.isMainWindowFullScreen);
  let isMaximized = Boolean(config.isMainWindowMaximized);
  window.isFullScreen = () => isFullScreen;
  window.isMaximized = () => isMaximized;
  window.onFullScreenChange = import_lodash.noop;
  import_electron.ipcRenderer.on("window:set-window-stats", (_event, stats) => {
    isFullScreen = Boolean(stats.isFullScreen);
    isMaximized = Boolean(stats.isMaximized);
    window.onFullScreenChange(isFullScreen, isMaximized);
  });
}
window.showSettings = () => import_electron.ipcRenderer.send("show-settings");
window.showPermissionsPopup = (forCalling, forCamera) => import_electron.ipcRenderer.invoke("show-permissions-popup", forCalling, forCamera);
import_electron.ipcRenderer.on("show-keyboard-shortcuts", () => {
  window.Events.showKeyboardShortcuts();
});
import_electron.ipcRenderer.on("add-dark-overlay", () => {
  window.Events.addDarkOverlay();
});
import_electron.ipcRenderer.on("remove-dark-overlay", () => {
  window.Events.removeDarkOverlay();
});
window.getBuiltInImages = () => new Promise((resolve, reject) => {
  import_electron.ipcRenderer.once("get-success-built-in-images", (_event, error, value) => {
    if (error) {
      return reject(new Error(error));
    }
    return resolve(value);
  });
  import_electron.ipcRenderer.send("get-built-in-images");
});
import_electron.ipcRenderer.on("delete-all-data", async () => {
  const { deleteAllData } = window.Events;
  if (!deleteAllData) {
    return;
  }
  try {
    await deleteAllData();
  } catch (error) {
    log.error("delete-all-data: error", error && error.stack);
  }
});
import_electron.ipcRenderer.on("show-sticker-pack", (_event, info) => {
  const { packId, packKey } = info;
  const { showStickerPack } = window.Events;
  if (showStickerPack) {
    showStickerPack(packId, packKey);
  }
});
import_electron.ipcRenderer.on("show-group-via-link", (_event, info) => {
  const { hash } = info;
  const { showGroupViaLink } = window.Events;
  if (showGroupViaLink) {
    showGroupViaLink(hash);
  }
});
import_electron.ipcRenderer.on("show-conversation-via-signal.me", (_event, info) => {
  const { hash } = info;
  (0, import_assert.strictAssert)(typeof hash === "string", "Got an invalid hash over IPC");
  const { showConversationViaSignalDotMe } = window.Events;
  if (showConversationViaSignalDotMe) {
    showConversationViaSignalDotMe(hash);
  }
});
import_electron.ipcRenderer.on("unknown-sgnl-link", () => {
  const { unknownSignalLink } = window.Events;
  if (unknownSignalLink) {
    unknownSignalLink();
  }
});
import_electron.ipcRenderer.on("install-sticker-pack", (_event, info) => {
  const { packId, packKey } = info;
  const { installStickerPack } = window.Events;
  if (installStickerPack) {
    installStickerPack(packId, packKey);
  }
});
import_electron.ipcRenderer.on("get-ready-for-shutdown", async () => {
  const { shutdown } = window.Events || {};
  if (!shutdown) {
    log.error("preload shutdown handler: shutdown method not found");
    import_electron.ipcRenderer.send("now-ready-for-shutdown");
    return;
  }
  try {
    await shutdown();
    import_electron.ipcRenderer.send("now-ready-for-shutdown");
  } catch (error) {
    import_electron.ipcRenderer.send("now-ready-for-shutdown", error && error.stack ? error.stack : error);
  }
});
import_electron.ipcRenderer.on("show-release-notes", () => {
  const { showReleaseNotes } = window.Events;
  if (showReleaseNotes) {
    showReleaseNotes();
  }
});
window.addSetupMenuItems = () => import_electron.ipcRenderer.send("add-setup-menu-items");
window.removeSetupMenuItems = () => import_electron.ipcRenderer.send("remove-setup-menu-items");
//# sourceMappingURL=data:application/json;base64,
