var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var util_exports = {};
__export(util_exports, {
  addOutgoingReaction: () => addOutgoingReaction,
  getNewestPendingOutgoingReaction: () => getNewestPendingOutgoingReaction,
  getUnsentConversationIds: () => getUnsentConversationIds,
  isNewReactionReplacingPrevious: () => isNewReactionReplacingPrevious,
  markOutgoingReactionFailed: () => markOutgoingReactionFailed,
  markOutgoingReactionSent: () => markOutgoingReactionSent
});
module.exports = __toCommonJS(util_exports);
var import_lodash = require("lodash");
var import_areObjectEntriesEqual = require("../util/areObjectEntriesEqual");
var import_message = require("../state/selectors/message");
const isReactionEqual = /* @__PURE__ */ __name((a, b) => a === b || Boolean(a && b && (0, import_areObjectEntriesEqual.areObjectEntriesEqual)(a, b, ["emoji", "fromId", "timestamp"])), "isReactionEqual");
const isOutgoingReactionFullySent = /* @__PURE__ */ __name(({
  isSentByConversationId = {}
}) => !isSentByConversationId || Object.values(isSentByConversationId).every(import_lodash.identity), "isOutgoingReactionFullySent");
const isOutgoingReactionPending = (0, import_lodash.negate)(isOutgoingReactionFullySent);
const isOutgoingReactionCompletelyUnsent = /* @__PURE__ */ __name(({
  isSentByConversationId = {}
}) => {
  const sendStates = Object.values(isSentByConversationId);
  return sendStates.length > 0 && sendStates.every((state) => state === false);
}, "isOutgoingReactionCompletelyUnsent");
function addOutgoingReaction(oldReactions, newReaction, isStoryMessage = false) {
  if (isStoryMessage) {
    return [...oldReactions, newReaction];
  }
  const pendingOutgoingReactions = new Set(oldReactions.filter(isOutgoingReactionPending));
  return [
    ...oldReactions.filter((re) => !pendingOutgoingReactions.has(re)),
    newReaction
  ];
}
function getNewestPendingOutgoingReaction(reactions, ourConversationId) {
  const ourReactions = reactions.filter(({ fromId }) => fromId === ourConversationId).sort((a, b) => a.timestamp - b.timestamp);
  const newestFinishedReactionIndex = (0, import_lodash.findLastIndex)(ourReactions, (re) => re.emoji && isOutgoingReactionFullySent(re));
  const newestFinishedReaction = ourReactions[newestFinishedReactionIndex];
  const newestPendingReactionIndex = (0, import_lodash.findLastIndex)(ourReactions, isOutgoingReactionPending);
  const pendingReaction = newestPendingReactionIndex > newestFinishedReactionIndex ? ourReactions[newestPendingReactionIndex] : void 0;
  return pendingReaction ? {
    pendingReaction,
    emojiToRemove: newestFinishedReaction?.emoji
  } : {};
}
function* getUnsentConversationIds({
  isSentByConversationId = {}
}) {
  for (const [id, isSent] of Object.entries(isSentByConversationId)) {
    if (!isSent) {
      yield id;
    }
  }
}
function isNewReactionReplacingPrevious(reaction, newReaction, messageAttributes) {
  return !(0, import_message.isStory)(messageAttributes) && reaction.fromId === newReaction.fromId;
}
const markOutgoingReactionFailed = /* @__PURE__ */ __name((reactions, reaction) => isOutgoingReactionCompletelyUnsent(reaction) || !reaction.emoji ? reactions.filter((re) => !isReactionEqual(re, reaction)) : reactions.map((re) => isReactionEqual(re, reaction) ? (0, import_lodash.omit)(re, ["isSentByConversationId"]) : re), "markOutgoingReactionFailed");
const markOutgoingReactionSent = /* @__PURE__ */ __name((reactions, reaction, conversationIdsSentTo, messageAttributes) => {
  const result = [];
  const newIsSentByConversationId = {
    ...reaction.isSentByConversationId || {}
  };
  for (const id of conversationIdsSentTo) {
    if ((0, import_lodash.has)(newIsSentByConversationId, id)) {
      newIsSentByConversationId[id] = true;
    }
  }
  const isFullySent = Object.values(newIsSentByConversationId).every(import_lodash.identity);
  for (const re of reactions) {
    if (!isReactionEqual(re, reaction)) {
      const shouldKeep = !isFullySent ? true : !isNewReactionReplacingPrevious(re, reaction, messageAttributes) || re.timestamp > reaction.timestamp;
      if (shouldKeep) {
        result.push(re);
      }
      continue;
    }
    if (isFullySent) {
      if (re.emoji) {
        result.push((0, import_lodash.omit)(re, ["isSentByConversationId"]));
      }
    } else {
      result.push({
        ...re,
        isSentByConversationId: newIsSentByConversationId
      });
    }
  }
  return result;
}, "markOutgoingReactionSent");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addOutgoingReaction,
  getNewestPendingOutgoingReaction,
  getUnsentConversationIds,
  isNewReactionReplacingPrevious,
  markOutgoingReactionFailed,
  markOutgoingReactionSent
});
//# sourceMappingURL=data:application/json;base64,
