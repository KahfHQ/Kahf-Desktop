var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_chai = require("chai");
var sinon = __toESM(require("sinon"));
var import_electron = require("electron");
var path = __toESM(require("path"));
var import_durations = require("../../util/durations");
var import_SystemTrayService = require("../../../app/SystemTrayService");
describe("SystemTrayService", function thisNeeded() {
  this.timeout(import_durations.MINUTE);
  let sandbox;
  function newService(options) {
    const result = new import_SystemTrayService.SystemTrayService({
      messages: {
        hide: { message: "Hide" },
        quit: { message: "Quit" },
        show: { message: "Show" },
        signalDesktop: { message: "Signal" }
      },
      ...options
    });
    servicesCreated.add(result);
    return result;
  }
  const servicesCreated = /* @__PURE__ */ new Set();
  beforeEach(() => {
    sandbox = sinon.createSandbox();
  });
  afterEach(() => {
    sandbox.restore();
    servicesCreated.forEach((service) => {
      service._getTray()?.destroy();
    });
    servicesCreated.clear();
  });
  it("doesn't render a tray icon unless (1) we're enabled (2) there's a browser window", () => {
    const service = newService();
    import_chai.assert.isUndefined(service._getTray());
    service.setEnabled(true);
    import_chai.assert.isUndefined(service._getTray());
    service.setMainWindow(new import_electron.BrowserWindow({ show: false }));
    import_chai.assert.instanceOf(service._getTray(), import_electron.Tray);
    service.setEnabled(false);
    import_chai.assert.isUndefined(service._getTray());
  });
  it('renders a "Hide" button when the window is shown and a "Show" button when the window is hidden', () => {
    let fakeIsVisible = false;
    const browserWindow = new import_electron.BrowserWindow({ show: fakeIsVisible });
    sinon.stub(browserWindow, "isVisible").callsFake(() => fakeIsVisible);
    sinon.stub(browserWindow, "show").callsFake(() => {
      fakeIsVisible = true;
      browserWindow.emit("show");
    });
    sinon.stub(browserWindow, "hide").callsFake(() => {
      fakeIsVisible = false;
      browserWindow.emit("hide");
    });
    const service = newService();
    service.setEnabled(true);
    service.setMainWindow(browserWindow);
    const tray = service._getTray();
    if (!tray) {
      throw new Error("Test setup failed: expected a tray");
    }
    const setContextMenuSpy = sandbox.spy(tray, "setContextMenu");
    const getToggleMenuItem = /* @__PURE__ */ __name(() => setContextMenuSpy.lastCall?.firstArg?.getMenuItemById("toggleWindowVisibility"), "getToggleMenuItem");
    browserWindow.show();
    import_chai.assert.strictEqual(getToggleMenuItem()?.label, "Hide");
    getToggleMenuItem()?.click();
    import_chai.assert.strictEqual(getToggleMenuItem()?.label, "Show");
    getToggleMenuItem()?.click();
    import_chai.assert.strictEqual(getToggleMenuItem()?.label, "Hide");
  });
  it("destroys the tray when disabling", () => {
    const service = newService();
    service.setEnabled(true);
    service.setMainWindow(new import_electron.BrowserWindow({ show: false }));
    const tray = service._getTray();
    if (!tray) {
      throw new Error("Test setup failed: expected a tray");
    }
    import_chai.assert.isFalse(tray.isDestroyed());
    service.setEnabled(false);
    import_chai.assert.isTrue(tray.isDestroyed());
  });
  it("maintains the same Tray instance when switching browser window instances", () => {
    const service = newService();
    service.setEnabled(true);
    service.setMainWindow(new import_electron.BrowserWindow({ show: false }));
    const originalTray = service._getTray();
    service.setMainWindow(new import_electron.BrowserWindow({ show: false }));
    import_chai.assert.strictEqual(service._getTray(), originalTray);
  });
  it("removes browser window event listeners when changing browser window instances", () => {
    const firstBrowserWindow = new import_electron.BrowserWindow({ show: false });
    const showListenersAtStart = firstBrowserWindow.listenerCount("show");
    const hideListenersAtStart = firstBrowserWindow.listenerCount("hide");
    const service = newService();
    service.setEnabled(true);
    service.setMainWindow(firstBrowserWindow);
    import_chai.assert.strictEqual(firstBrowserWindow.listenerCount("show"), showListenersAtStart + 1);
    import_chai.assert.strictEqual(firstBrowserWindow.listenerCount("hide"), hideListenersAtStart + 1);
    service.setMainWindow(new import_electron.BrowserWindow({ show: false }));
    import_chai.assert.strictEqual(firstBrowserWindow.listenerCount("show"), showListenersAtStart);
    import_chai.assert.strictEqual(firstBrowserWindow.listenerCount("hide"), hideListenersAtStart);
  });
  it("removes browser window event listeners when removing browser window instances", () => {
    const browserWindow = new import_electron.BrowserWindow({ show: false });
    const showListenersAtStart = browserWindow.listenerCount("show");
    const hideListenersAtStart = browserWindow.listenerCount("hide");
    const service = newService();
    service.setEnabled(true);
    service.setMainWindow(browserWindow);
    import_chai.assert.strictEqual(browserWindow.listenerCount("show"), showListenersAtStart + 1);
    import_chai.assert.strictEqual(browserWindow.listenerCount("hide"), hideListenersAtStart + 1);
    service.setMainWindow(void 0);
    import_chai.assert.strictEqual(browserWindow.listenerCount("show"), showListenersAtStart);
    import_chai.assert.strictEqual(browserWindow.listenerCount("hide"), hideListenersAtStart);
  });
  it("updates the icon when the unread count changes", () => {
    const service = newService();
    service.setEnabled(true);
    service.setMainWindow(new import_electron.BrowserWindow({ show: false }));
    const tray = service._getTray();
    if (!tray) {
      throw new Error("Test setup failed: expected a tray");
    }
    const setImageSpy = sandbox.spy(tray, "setImage");
    const getImagePath = /* @__PURE__ */ __name(() => {
      const result = setImageSpy.lastCall?.firstArg;
      if (!result) {
        throw new Error("Expected tray.setImage to be called at least once");
      }
      return result;
    }, "getImagePath");
    for (let i = 9; i >= 1; i -= 1) {
      service.setUnreadCount(i);
      import_chai.assert.strictEqual(path.parse(getImagePath()).base, `${i}.png`);
    }
    for (let i = 10; i < 13; i += 1) {
      service.setUnreadCount(i);
      import_chai.assert.strictEqual(path.parse(getImagePath()).base, "10.png");
    }
    service.setUnreadCount(0);
    import_chai.assert.match(path.parse(getImagePath()).base, /^icon_\d+\.png$/);
  });
  it("uses a fallback image if the icon file cannot be found", () => {
    const service = newService();
    service.setEnabled(true);
    service.setMainWindow(new import_electron.BrowserWindow({ show: false }));
    const tray = service._getTray();
    if (!tray) {
      throw new Error("Test setup failed: expected a tray");
    }
    const setImageStub = sandbox.stub(tray, "setImage");
    setImageStub.withArgs(sinon.match.string).throws("Failed to load");
    service.setUnreadCount(4);
    const NativeImage = import_electron.nativeImage.createEmpty().constructor;
    sinon.assert.calledTwice(setImageStub);
    sinon.assert.calledWith(setImageStub, sinon.match.string);
    sinon.assert.calledWith(setImageStub, sinon.match.instanceOf(NativeImage));
  });
  it("should not create new Tray after markShouldQuit", () => {
    const createTrayInstance = sandbox.stub();
    const service = newService({ createTrayInstance });
    service.setMainWindow(new import_electron.BrowserWindow({ show: false }));
    service.markShouldQuit();
    service.setEnabled(true);
    sinon.assert.notCalled(createTrayInstance);
  });
});
//# sourceMappingURL=data:application/json;base64,
