var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_chai = require("chai");
var sinon = __toESM(require("sinon"));
var import_SystemTraySetting = require("../../types/SystemTraySetting");
var import_SystemTraySettingCache = require("../../../app/SystemTraySettingCache");
describe("SystemTraySettingCache", () => {
  let sandbox;
  let sqlCallStub;
  let configGetStub;
  let configSetStub;
  let sql;
  let config;
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    sqlCallStub = sandbox.stub().resolves();
    sql = { sqlCall: sqlCallStub };
    configGetStub = sandbox.stub().returns(void 0);
    configSetStub = sandbox.stub().returns(void 0);
    config = { get: configGetStub, set: configSetStub };
  });
  afterEach(() => {
    sandbox.restore();
  });
  it("returns MinimizeToAndStartInSystemTray if passed the --start-in-tray argument", async () => {
    const justOneArg = new import_SystemTraySettingCache.SystemTraySettingCache(sql, config, ["--start-in-tray"], "1.2.3");
    import_chai.assert.strictEqual(await justOneArg.get(), import_SystemTraySetting.SystemTraySetting.MinimizeToAndStartInSystemTray);
    const bothArgs = new import_SystemTraySettingCache.SystemTraySettingCache(sql, config, ["--start-in-tray", "--use-tray-icon"], "1.2.3");
    import_chai.assert.strictEqual(await bothArgs.get(), import_SystemTraySetting.SystemTraySetting.MinimizeToAndStartInSystemTray);
    sinon.assert.notCalled(sqlCallStub);
    sinon.assert.notCalled(configGetStub);
    sinon.assert.notCalled(configSetStub);
  });
  it("returns MinimizeToSystemTray if passed the --use-tray-icon argument", async () => {
    const cache = new import_SystemTraySettingCache.SystemTraySettingCache(sql, config, ["--use-tray-icon"], "1.2.3");
    import_chai.assert.strictEqual(await cache.get(), import_SystemTraySetting.SystemTraySetting.MinimizeToSystemTray);
    sinon.assert.notCalled(sqlCallStub);
    sinon.assert.notCalled(configGetStub);
    sinon.assert.notCalled(configSetStub);
  });
  it("returns DoNotUseSystemTray if system tray is supported but no preference is stored", async () => {
    sandbox.stub(process, "platform").value("win32");
    const cache = new import_SystemTraySettingCache.SystemTraySettingCache(sql, config, [], "1.2.3");
    import_chai.assert.strictEqual(await cache.get(), import_SystemTraySetting.SystemTraySetting.DoNotUseSystemTray);
    (0, import_chai.assert)(configGetStub.calledOnceWith("system-tray-setting"));
    (0, import_chai.assert)(configSetStub.calledOnceWith("system-tray-setting", import_SystemTraySetting.SystemTraySetting.DoNotUseSystemTray));
  });
  it("returns DoNotUseSystemTray if system tray is supported but the stored preference is invalid", async () => {
    sandbox.stub(process, "platform").value("win32");
    sqlCallStub.resolves({ value: "garbage" });
    const cache = new import_SystemTraySettingCache.SystemTraySettingCache(sql, config, [], "1.2.3");
    import_chai.assert.strictEqual(await cache.get(), import_SystemTraySetting.SystemTraySetting.DoNotUseSystemTray);
    (0, import_chai.assert)(configGetStub.calledOnceWith("system-tray-setting"));
    (0, import_chai.assert)(configSetStub.calledOnceWith("system-tray-setting", import_SystemTraySetting.SystemTraySetting.DoNotUseSystemTray));
  });
  it("returns the stored preference if system tray is supported and something is stored", async () => {
    sandbox.stub(process, "platform").value("win32");
    sqlCallStub.resolves({ value: "MinimizeToSystemTray" });
    const cache = new import_SystemTraySettingCache.SystemTraySettingCache(sql, config, [], "1.2.3");
    import_chai.assert.strictEqual(await cache.get(), import_SystemTraySetting.SystemTraySetting.MinimizeToSystemTray);
    (0, import_chai.assert)(configGetStub.calledOnceWith("system-tray-setting"));
    (0, import_chai.assert)(configSetStub.calledOnceWith("system-tray-setting", import_SystemTraySetting.SystemTraySetting.MinimizeToSystemTray));
  });
  it("returns the cached preference if system tray is supported and something is stored", async () => {
    sandbox.stub(process, "platform").value("win32");
    configGetStub.returns("MinimizeToSystemTray");
    const cache = new import_SystemTraySettingCache.SystemTraySettingCache(sql, config, [], "1.2.3");
    import_chai.assert.strictEqual(await cache.get(), import_SystemTraySetting.SystemTraySetting.MinimizeToSystemTray);
    (0, import_chai.assert)(configGetStub.calledOnceWith("system-tray-setting"));
    sinon.assert.notCalled(sqlCallStub);
  });
  it("only kicks off one request to the database if multiple sources ask at once", async () => {
    sandbox.stub(process, "platform").value("win32");
    const cache = new import_SystemTraySettingCache.SystemTraySettingCache(sql, config, [], "1.2.3");
    await Promise.all([cache.get(), cache.get(), cache.get()]);
    (0, import_chai.assert)(configGetStub.calledOnceWith("system-tray-setting"));
    sinon.assert.calledOnce(sqlCallStub);
  });
  it("returns DoNotUseSystemTray if system tray is unsupported and there are no CLI flags", async () => {
    sandbox.stub(process, "platform").value("darwin");
    const cache = new import_SystemTraySettingCache.SystemTraySettingCache(sql, config, [], "1.2.3");
    import_chai.assert.strictEqual(await cache.get(), import_SystemTraySetting.SystemTraySetting.DoNotUseSystemTray);
    sinon.assert.notCalled(configGetStub);
    sinon.assert.notCalled(configSetStub);
    sinon.assert.notCalled(sqlCallStub);
  });
});
//# sourceMappingURL=data:application/json;base64,
