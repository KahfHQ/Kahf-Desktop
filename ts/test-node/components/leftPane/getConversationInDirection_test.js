var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var import_chai = require("chai");
var import_LeftPaneHelper = require("../../../components/leftPane/LeftPaneHelper");
var import_getDefaultConversation = require("../../../test-both/helpers/getDefaultConversation");
var import_getConversationInDirection = require("../../../components/leftPane/getConversationInDirection");
describe("getConversationInDirection", () => {
  const fakeConversation = /* @__PURE__ */ __name((markedUnread = false) => (0, import_getDefaultConversation.getDefaultConversation)({ markedUnread }), "fakeConversation");
  const fakeConversations = [
    fakeConversation(),
    fakeConversation(true),
    fakeConversation(true),
    fakeConversation()
  ];
  describe("searching for any conversation", () => {
    const up = {
      direction: import_LeftPaneHelper.FindDirection.Up,
      unreadOnly: false
    };
    const down = {
      direction: import_LeftPaneHelper.FindDirection.Down,
      unreadOnly: false
    };
    it("returns undefined if there are no conversations", () => {
      import_chai.assert.isUndefined((0, import_getConversationInDirection.getConversationInDirection)([], up, void 0));
      import_chai.assert.isUndefined((0, import_getConversationInDirection.getConversationInDirection)([], down, void 0));
    });
    it("if no conversation is selected, returns the last conversation when going up", () => {
      import_chai.assert.deepEqual((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, up, void 0), { conversationId: fakeConversations[3].id });
    });
    it("if no conversation is selected, returns the first conversation when going down", () => {
      import_chai.assert.deepEqual((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, down, void 0), { conversationId: fakeConversations[0].id });
    });
    it("if the first conversation is selected, returns the last conversation when going up", () => {
      import_chai.assert.deepEqual((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, up, fakeConversations[0].id), { conversationId: fakeConversations[3].id });
    });
    it("if the last conversation is selected, returns the first conversation when going down", () => {
      import_chai.assert.deepEqual((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, down, fakeConversations[3].id), { conversationId: fakeConversations[0].id });
    });
    it("goes up one conversation in normal cases", () => {
      import_chai.assert.deepEqual((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, up, fakeConversations[2].id), { conversationId: fakeConversations[1].id });
    });
    it("goes down one conversation in normal cases", () => {
      import_chai.assert.deepEqual((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, down, fakeConversations[0].id), { conversationId: fakeConversations[1].id });
    });
  });
  describe("searching for unread conversations", () => {
    const up = {
      direction: import_LeftPaneHelper.FindDirection.Up,
      unreadOnly: true
    };
    const down = {
      direction: import_LeftPaneHelper.FindDirection.Down,
      unreadOnly: true
    };
    const noUnreads = [
      fakeConversation(),
      fakeConversation(),
      fakeConversation()
    ];
    it("returns undefined if there are no conversations", () => {
      import_chai.assert.isUndefined((0, import_getConversationInDirection.getConversationInDirection)([], up, void 0));
      import_chai.assert.isUndefined((0, import_getConversationInDirection.getConversationInDirection)([], down, void 0));
    });
    it("if no conversation is selected, finds the last unread conversation (if it exists) when searching up", () => {
      import_chai.assert.deepEqual((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, up, void 0), { conversationId: fakeConversations[2].id });
      import_chai.assert.isUndefined((0, import_getConversationInDirection.getConversationInDirection)(noUnreads, up, void 0));
    });
    it("if no conversation is selected, finds the first unread conversation (if it exists) when searching down", () => {
      import_chai.assert.deepEqual((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, down, void 0), { conversationId: fakeConversations[1].id });
      import_chai.assert.isUndefined((0, import_getConversationInDirection.getConversationInDirection)(noUnreads, down, void 0));
    });
    it("searches up for unread conversations, returning undefined if no conversation exists (doesn't wrap around)", () => {
      import_chai.assert.deepEqual((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, up, fakeConversations[3].id), { conversationId: fakeConversations[2].id });
      import_chai.assert.deepEqual((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, up, fakeConversations[2].id), { conversationId: fakeConversations[1].id });
      import_chai.assert.isUndefined((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, up, fakeConversations[1].id));
      import_chai.assert.isUndefined((0, import_getConversationInDirection.getConversationInDirection)(noUnreads, up, noUnreads[2].id));
    });
    it("searches down for unread conversations, returning undefined if no conversation exists (doesn't wrap around)", () => {
      import_chai.assert.deepEqual((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, down, fakeConversations[0].id), { conversationId: fakeConversations[1].id });
      import_chai.assert.deepEqual((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, down, fakeConversations[1].id), { conversationId: fakeConversations[2].id });
      import_chai.assert.isUndefined((0, import_getConversationInDirection.getConversationInDirection)(fakeConversations, down, fakeConversations[2].id));
      import_chai.assert.isUndefined((0, import_getConversationInDirection.getConversationInDirection)(noUnreads, down, noUnreads[1].id));
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
