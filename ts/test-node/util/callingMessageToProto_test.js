var import_chai = require("chai");
var import_ringrtc = require("ringrtc");
var import_protobuf = require("../../protobuf");
var import_callingMessageToProto = require("../../util/callingMessageToProto");
describe("callingMessageToProto", () => {
  describe("hangup field", () => {
    it("leaves the field unset if `hangup` is not provided", () => {
      const result = (0, import_callingMessageToProto.callingMessageToProto)(new import_ringrtc.CallingMessage());
      import_chai.assert.isUndefined(result.hangup);
    });
    it("attaches the type if provided", () => {
      const callingMessage = new import_ringrtc.CallingMessage();
      callingMessage.hangup = new import_ringrtc.HangupMessage();
      callingMessage.hangup.type = import_ringrtc.HangupType.Busy;
      const result = (0, import_callingMessageToProto.callingMessageToProto)(callingMessage);
      import_chai.assert.strictEqual(result.hangup?.type, 3);
    });
  });
  describe("opaque field", () => {
    it("leaves the field unset if neither `opaque` nor urgency are provided", () => {
      const result = (0, import_callingMessageToProto.callingMessageToProto)(new import_ringrtc.CallingMessage());
      import_chai.assert.isUndefined(result.opaque);
    });
    it("attaches opaque data", () => {
      const callingMessage = new import_ringrtc.CallingMessage();
      callingMessage.opaque = new import_ringrtc.OpaqueMessage();
      callingMessage.opaque.data = Buffer.from([1, 2, 3]);
      const result = (0, import_callingMessageToProto.callingMessageToProto)(callingMessage);
      import_chai.assert.deepEqual(result.opaque?.data, new Uint8Array([1, 2, 3]));
    });
    it("attaches urgency if provided", () => {
      const droppableResult = (0, import_callingMessageToProto.callingMessageToProto)(new import_ringrtc.CallingMessage(), import_ringrtc.CallMessageUrgency.Droppable);
      import_chai.assert.deepEqual(droppableResult.opaque?.urgency, import_protobuf.SignalService.CallingMessage.Opaque.Urgency.DROPPABLE);
      const urgentResult = (0, import_callingMessageToProto.callingMessageToProto)(new import_ringrtc.CallingMessage(), import_ringrtc.CallMessageUrgency.HandleImmediately);
      import_chai.assert.deepEqual(urgentResult.opaque?.urgency, import_protobuf.SignalService.CallingMessage.Opaque.Urgency.HANDLE_IMMEDIATELY);
    });
    it("attaches urgency and opaque data if both are provided", () => {
      const callingMessage = new import_ringrtc.CallingMessage();
      callingMessage.opaque = new import_ringrtc.OpaqueMessage();
      callingMessage.opaque.data = Buffer.from([1, 2, 3]);
      const result = (0, import_callingMessageToProto.callingMessageToProto)(callingMessage, import_ringrtc.CallMessageUrgency.HandleImmediately);
      import_chai.assert.deepEqual(result.opaque?.data, new Uint8Array([1, 2, 3]));
      import_chai.assert.deepEqual(result.opaque?.urgency, import_protobuf.SignalService.CallingMessage.Opaque.Urgency.HANDLE_IMMEDIATELY);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiY2FsbGluZ01lc3NhZ2VUb1Byb3RvX3Rlc3QudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vIENvcHlyaWdodCAyMDIxIFNpZ25hbCBNZXNzZW5nZXIsIExMQ1xuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFHUEwtMy4wLW9ubHlcblxuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQge1xuICBDYWxsTWVzc2FnZVVyZ2VuY3ksXG4gIENhbGxpbmdNZXNzYWdlLFxuICBIYW5ndXBNZXNzYWdlLFxuICBIYW5ndXBUeXBlLFxuICBPcGFxdWVNZXNzYWdlLFxufSBmcm9tICdyaW5ncnRjJztcbmltcG9ydCB7IFNpZ25hbFNlcnZpY2UgYXMgUHJvdG8gfSBmcm9tICcuLi8uLi9wcm90b2J1Zic7XG5cbmltcG9ydCB7IGNhbGxpbmdNZXNzYWdlVG9Qcm90byB9IGZyb20gJy4uLy4uL3V0aWwvY2FsbGluZ01lc3NhZ2VUb1Byb3RvJztcblxuZGVzY3JpYmUoJ2NhbGxpbmdNZXNzYWdlVG9Qcm90bycsICgpID0+IHtcbiAgLy8gTk9URTogVGhlc2UgdGVzdHMgYXJlIGluY29tcGxldGUuXG5cbiAgZGVzY3JpYmUoJ2hhbmd1cCBmaWVsZCcsICgpID0+IHtcbiAgICBpdCgnbGVhdmVzIHRoZSBmaWVsZCB1bnNldCBpZiBgaGFuZ3VwYCBpcyBub3QgcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBjYWxsaW5nTWVzc2FnZVRvUHJvdG8obmV3IENhbGxpbmdNZXNzYWdlKCkpO1xuICAgICAgYXNzZXJ0LmlzVW5kZWZpbmVkKHJlc3VsdC5oYW5ndXApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2F0dGFjaGVzIHRoZSB0eXBlIGlmIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FsbGluZ01lc3NhZ2UgPSBuZXcgQ2FsbGluZ01lc3NhZ2UoKTtcbiAgICAgIGNhbGxpbmdNZXNzYWdlLmhhbmd1cCA9IG5ldyBIYW5ndXBNZXNzYWdlKCk7XG4gICAgICBjYWxsaW5nTWVzc2FnZS5oYW5ndXAudHlwZSA9IEhhbmd1cFR5cGUuQnVzeTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gY2FsbGluZ01lc3NhZ2VUb1Byb3RvKGNhbGxpbmdNZXNzYWdlKTtcblxuICAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKHJlc3VsdC5oYW5ndXA/LnR5cGUsIDMpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnb3BhcXVlIGZpZWxkJywgKCkgPT4ge1xuICAgIGl0KCdsZWF2ZXMgdGhlIGZpZWxkIHVuc2V0IGlmIG5laXRoZXIgYG9wYXF1ZWAgbm9yIHVyZ2VuY3kgYXJlIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gY2FsbGluZ01lc3NhZ2VUb1Byb3RvKG5ldyBDYWxsaW5nTWVzc2FnZSgpKTtcbiAgICAgIGFzc2VydC5pc1VuZGVmaW5lZChyZXN1bHQub3BhcXVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdhdHRhY2hlcyBvcGFxdWUgZGF0YScsICgpID0+IHtcbiAgICAgIGNvbnN0IGNhbGxpbmdNZXNzYWdlID0gbmV3IENhbGxpbmdNZXNzYWdlKCk7XG4gICAgICBjYWxsaW5nTWVzc2FnZS5vcGFxdWUgPSBuZXcgT3BhcXVlTWVzc2FnZSgpO1xuICAgICAgY2FsbGluZ01lc3NhZ2Uub3BhcXVlLmRhdGEgPSBCdWZmZXIuZnJvbShbMSwgMiwgM10pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBjYWxsaW5nTWVzc2FnZVRvUHJvdG8oY2FsbGluZ01lc3NhZ2UpO1xuXG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKHJlc3VsdC5vcGFxdWU/LmRhdGEsIG5ldyBVaW50OEFycmF5KFsxLCAyLCAzXSkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2F0dGFjaGVzIHVyZ2VuY3kgaWYgcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBkcm9wcGFibGVSZXN1bHQgPSBjYWxsaW5nTWVzc2FnZVRvUHJvdG8oXG4gICAgICAgIG5ldyBDYWxsaW5nTWVzc2FnZSgpLFxuICAgICAgICBDYWxsTWVzc2FnZVVyZ2VuY3kuRHJvcHBhYmxlXG4gICAgICApO1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbChcbiAgICAgICAgZHJvcHBhYmxlUmVzdWx0Lm9wYXF1ZT8udXJnZW5jeSxcbiAgICAgICAgUHJvdG8uQ2FsbGluZ01lc3NhZ2UuT3BhcXVlLlVyZ2VuY3kuRFJPUFBBQkxFXG4gICAgICApO1xuXG4gICAgICBjb25zdCB1cmdlbnRSZXN1bHQgPSBjYWxsaW5nTWVzc2FnZVRvUHJvdG8oXG4gICAgICAgIG5ldyBDYWxsaW5nTWVzc2FnZSgpLFxuICAgICAgICBDYWxsTWVzc2FnZVVyZ2VuY3kuSGFuZGxlSW1tZWRpYXRlbHlcbiAgICAgICk7XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKFxuICAgICAgICB1cmdlbnRSZXN1bHQub3BhcXVlPy51cmdlbmN5LFxuICAgICAgICBQcm90by5DYWxsaW5nTWVzc2FnZS5PcGFxdWUuVXJnZW5jeS5IQU5ETEVfSU1NRURJQVRFTFlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnYXR0YWNoZXMgdXJnZW5jeSBhbmQgb3BhcXVlIGRhdGEgaWYgYm90aCBhcmUgcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjYWxsaW5nTWVzc2FnZSA9IG5ldyBDYWxsaW5nTWVzc2FnZSgpO1xuICAgICAgY2FsbGluZ01lc3NhZ2Uub3BhcXVlID0gbmV3IE9wYXF1ZU1lc3NhZ2UoKTtcbiAgICAgIGNhbGxpbmdNZXNzYWdlLm9wYXF1ZS5kYXRhID0gQnVmZmVyLmZyb20oWzEsIDIsIDNdKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gY2FsbGluZ01lc3NhZ2VUb1Byb3RvKFxuICAgICAgICBjYWxsaW5nTWVzc2FnZSxcbiAgICAgICAgQ2FsbE1lc3NhZ2VVcmdlbmN5LkhhbmRsZUltbWVkaWF0ZWx5XG4gICAgICApO1xuXG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKHJlc3VsdC5vcGFxdWU/LmRhdGEsIG5ldyBVaW50OEFycmF5KFsxLCAyLCAzXSkpO1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbChcbiAgICAgICAgcmVzdWx0Lm9wYXF1ZT8udXJnZW5jeSxcbiAgICAgICAgUHJvdG8uQ2FsbGluZ01lc3NhZ2UuT3BhcXVlLlVyZ2VuY3kuSEFORExFX0lNTUVESUFURUxZXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIkFBR0Esa0JBQXVCO0FBQ3ZCLHFCQU1PO0FBQ1Asc0JBQXVDO0FBRXZDLG1DQUFzQztBQUV0QyxTQUFTLHlCQUF5QixNQUFNO0FBR3RDLFdBQVMsZ0JBQWdCLE1BQU07QUFDN0IsT0FBRyxzREFBc0QsTUFBTTtBQUM3RCxZQUFNLFNBQVMsd0RBQXNCLElBQUksOEJBQWUsQ0FBQztBQUN6RCx5QkFBTyxZQUFZLE9BQU8sTUFBTTtBQUFBLElBQ2xDLENBQUM7QUFFRCxPQUFHLGlDQUFpQyxNQUFNO0FBQ3hDLFlBQU0saUJBQWlCLElBQUksOEJBQWU7QUFDMUMscUJBQWUsU0FBUyxJQUFJLDZCQUFjO0FBQzFDLHFCQUFlLE9BQU8sT0FBTywwQkFBVztBQUV4QyxZQUFNLFNBQVMsd0RBQXNCLGNBQWM7QUFFbkQseUJBQU8sWUFBWSxPQUFPLFFBQVEsTUFBTSxDQUFDO0FBQUEsSUFDM0MsQ0FBQztBQUFBLEVBQ0gsQ0FBQztBQUVELFdBQVMsZ0JBQWdCLE1BQU07QUFDN0IsT0FBRyx1RUFBdUUsTUFBTTtBQUM5RSxZQUFNLFNBQVMsd0RBQXNCLElBQUksOEJBQWUsQ0FBQztBQUN6RCx5QkFBTyxZQUFZLE9BQU8sTUFBTTtBQUFBLElBQ2xDLENBQUM7QUFFRCxPQUFHLHdCQUF3QixNQUFNO0FBQy9CLFlBQU0saUJBQWlCLElBQUksOEJBQWU7QUFDMUMscUJBQWUsU0FBUyxJQUFJLDZCQUFjO0FBQzFDLHFCQUFlLE9BQU8sT0FBTyxPQUFPLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBRWxELFlBQU0sU0FBUyx3REFBc0IsY0FBYztBQUVuRCx5QkFBTyxVQUFVLE9BQU8sUUFBUSxNQUFNLElBQUksV0FBVyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUFBLElBQ2pFLENBQUM7QUFFRCxPQUFHLGdDQUFnQyxNQUFNO0FBQ3ZDLFlBQU0sa0JBQWtCLHdEQUN0QixJQUFJLDhCQUFlLEdBQ25CLGtDQUFtQixTQUNyQjtBQUNBLHlCQUFPLFVBQ0wsZ0JBQWdCLFFBQVEsU0FDeEIsOEJBQU0sZUFBZSxPQUFPLFFBQVEsU0FDdEM7QUFFQSxZQUFNLGVBQWUsd0RBQ25CLElBQUksOEJBQWUsR0FDbkIsa0NBQW1CLGlCQUNyQjtBQUNBLHlCQUFPLFVBQ0wsYUFBYSxRQUFRLFNBQ3JCLDhCQUFNLGVBQWUsT0FBTyxRQUFRLGtCQUN0QztBQUFBLElBQ0YsQ0FBQztBQUVELE9BQUcseURBQXlELE1BQU07QUFDaEUsWUFBTSxpQkFBaUIsSUFBSSw4QkFBZTtBQUMxQyxxQkFBZSxTQUFTLElBQUksNkJBQWM7QUFDMUMscUJBQWUsT0FBTyxPQUFPLE9BQU8sS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFFbEQsWUFBTSxTQUFTLHdEQUNiLGdCQUNBLGtDQUFtQixpQkFDckI7QUFFQSx5QkFBTyxVQUFVLE9BQU8sUUFBUSxNQUFNLElBQUksV0FBVyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMvRCx5QkFBTyxVQUNMLE9BQU8sUUFBUSxTQUNmLDhCQUFNLGVBQWUsT0FBTyxRQUFRLGtCQUN0QztBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0gsQ0FBQztBQUNILENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
