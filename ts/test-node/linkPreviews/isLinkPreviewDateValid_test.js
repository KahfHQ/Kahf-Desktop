var import_chai = require("chai");
var import_isLinkPreviewDateValid = require("../../linkPreviews/isLinkPreviewDateValid");
describe("isLinkPreviewDateValid", () => {
  it("returns false for non-numbers", () => {
    import_chai.assert.isFalse((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(null));
    import_chai.assert.isFalse((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(void 0));
    import_chai.assert.isFalse((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(Date.now().toString()));
    import_chai.assert.isFalse((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(new Date()));
  });
  it("returns false for zero", () => {
    import_chai.assert.isFalse((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(0));
    import_chai.assert.isFalse((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(-0));
  });
  it("returns false for NaN", () => {
    import_chai.assert.isFalse((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(0 / 0));
  });
  it("returns false for any infinite value", () => {
    import_chai.assert.isFalse((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(Infinity));
    import_chai.assert.isFalse((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(-Infinity));
  });
  it("returns false for timestamps more than a day from now", () => {
    const twoDays = 2 * 24 * 60 * 60 * 1e3;
    import_chai.assert.isFalse((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(Date.now() + twoDays));
  });
  it("returns true for timestamps before tomorrow", () => {
    import_chai.assert.isTrue((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(Date.now()));
    import_chai.assert.isTrue((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(Date.now() + 123));
    import_chai.assert.isTrue((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(Date.now() - 123));
    import_chai.assert.isTrue((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(new Date(1995, 3, 20).valueOf()));
    import_chai.assert.isTrue((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(new Date(1970, 3, 20).valueOf()));
    import_chai.assert.isTrue((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(new Date(1969, 3, 20).valueOf()));
    import_chai.assert.isTrue((0, import_isLinkPreviewDateValid.isLinkPreviewDateValid)(1));
  });
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiaXNMaW5rUHJldmlld0RhdGVWYWxpZF90ZXN0LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBDb3B5cmlnaHQgMjAyMCBTaWduYWwgTWVzc2VuZ2VyLCBMTENcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBR1BMLTMuMC1vbmx5XG5cbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJ2NoYWknO1xuXG5pbXBvcnQgeyBpc0xpbmtQcmV2aWV3RGF0ZVZhbGlkIH0gZnJvbSAnLi4vLi4vbGlua1ByZXZpZXdzL2lzTGlua1ByZXZpZXdEYXRlVmFsaWQnO1xuXG5kZXNjcmliZSgnaXNMaW5rUHJldmlld0RhdGVWYWxpZCcsICgpID0+IHtcbiAgaXQoJ3JldHVybnMgZmFsc2UgZm9yIG5vbi1udW1iZXJzJywgKCkgPT4ge1xuICAgIGFzc2VydC5pc0ZhbHNlKGlzTGlua1ByZXZpZXdEYXRlVmFsaWQobnVsbCkpO1xuICAgIGFzc2VydC5pc0ZhbHNlKGlzTGlua1ByZXZpZXdEYXRlVmFsaWQodW5kZWZpbmVkKSk7XG4gICAgYXNzZXJ0LmlzRmFsc2UoaXNMaW5rUHJldmlld0RhdGVWYWxpZChEYXRlLm5vdygpLnRvU3RyaW5nKCkpKTtcbiAgICBhc3NlcnQuaXNGYWxzZShpc0xpbmtQcmV2aWV3RGF0ZVZhbGlkKG5ldyBEYXRlKCkpKTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgZmFsc2UgZm9yIHplcm8nLCAoKSA9PiB7XG4gICAgYXNzZXJ0LmlzRmFsc2UoaXNMaW5rUHJldmlld0RhdGVWYWxpZCgwKSk7XG4gICAgYXNzZXJ0LmlzRmFsc2UoaXNMaW5rUHJldmlld0RhdGVWYWxpZCgtMCkpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyBmYWxzZSBmb3IgTmFOJywgKCkgPT4ge1xuICAgIGFzc2VydC5pc0ZhbHNlKGlzTGlua1ByZXZpZXdEYXRlVmFsaWQoMCAvIDApKTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgZmFsc2UgZm9yIGFueSBpbmZpbml0ZSB2YWx1ZScsICgpID0+IHtcbiAgICBhc3NlcnQuaXNGYWxzZShpc0xpbmtQcmV2aWV3RGF0ZVZhbGlkKEluZmluaXR5KSk7XG4gICAgYXNzZXJ0LmlzRmFsc2UoaXNMaW5rUHJldmlld0RhdGVWYWxpZCgtSW5maW5pdHkpKTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgZmFsc2UgZm9yIHRpbWVzdGFtcHMgbW9yZSB0aGFuIGEgZGF5IGZyb20gbm93JywgKCkgPT4ge1xuICAgIGNvbnN0IHR3b0RheXMgPSAyICogMjQgKiA2MCAqIDYwICogMTAwMDtcbiAgICBhc3NlcnQuaXNGYWxzZShpc0xpbmtQcmV2aWV3RGF0ZVZhbGlkKERhdGUubm93KCkgKyB0d29EYXlzKSk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIHRydWUgZm9yIHRpbWVzdGFtcHMgYmVmb3JlIHRvbW9ycm93JywgKCkgPT4ge1xuICAgIGFzc2VydC5pc1RydWUoaXNMaW5rUHJldmlld0RhdGVWYWxpZChEYXRlLm5vdygpKSk7XG4gICAgYXNzZXJ0LmlzVHJ1ZShpc0xpbmtQcmV2aWV3RGF0ZVZhbGlkKERhdGUubm93KCkgKyAxMjMpKTtcbiAgICBhc3NlcnQuaXNUcnVlKGlzTGlua1ByZXZpZXdEYXRlVmFsaWQoRGF0ZS5ub3coKSAtIDEyMykpO1xuICAgIGFzc2VydC5pc1RydWUoaXNMaW5rUHJldmlld0RhdGVWYWxpZChuZXcgRGF0ZSgxOTk1LCAzLCAyMCkudmFsdWVPZigpKSk7XG4gICAgYXNzZXJ0LmlzVHJ1ZShpc0xpbmtQcmV2aWV3RGF0ZVZhbGlkKG5ldyBEYXRlKDE5NzAsIDMsIDIwKS52YWx1ZU9mKCkpKTtcbiAgICBhc3NlcnQuaXNUcnVlKGlzTGlua1ByZXZpZXdEYXRlVmFsaWQobmV3IERhdGUoMTk2OSwgMywgMjApLnZhbHVlT2YoKSkpO1xuICAgIGFzc2VydC5pc1RydWUoaXNMaW5rUHJldmlld0RhdGVWYWxpZCgxKSk7XG4gIH0pO1xufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiQUFHQSxrQkFBdUI7QUFFdkIsb0NBQXVDO0FBRXZDLFNBQVMsMEJBQTBCLE1BQU07QUFDdkMsS0FBRyxpQ0FBaUMsTUFBTTtBQUN4Qyx1QkFBTyxRQUFRLDBEQUF1QixJQUFJLENBQUM7QUFDM0MsdUJBQU8sUUFBUSwwREFBdUIsTUFBUyxDQUFDO0FBQ2hELHVCQUFPLFFBQVEsMERBQXVCLEtBQUssSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzVELHVCQUFPLFFBQVEsMERBQXVCLElBQUksS0FBSyxDQUFDLENBQUM7QUFBQSxFQUNuRCxDQUFDO0FBRUQsS0FBRywwQkFBMEIsTUFBTTtBQUNqQyx1QkFBTyxRQUFRLDBEQUF1QixDQUFDLENBQUM7QUFDeEMsdUJBQU8sUUFBUSwwREFBdUIsRUFBRSxDQUFDO0FBQUEsRUFDM0MsQ0FBQztBQUVELEtBQUcseUJBQXlCLE1BQU07QUFDaEMsdUJBQU8sUUFBUSwwREFBdUIsSUFBSSxDQUFDLENBQUM7QUFBQSxFQUM5QyxDQUFDO0FBRUQsS0FBRyx3Q0FBd0MsTUFBTTtBQUMvQyx1QkFBTyxRQUFRLDBEQUF1QixRQUFRLENBQUM7QUFDL0MsdUJBQU8sUUFBUSwwREFBdUIsU0FBUyxDQUFDO0FBQUEsRUFDbEQsQ0FBQztBQUVELEtBQUcseURBQXlELE1BQU07QUFDaEUsVUFBTSxVQUFVLElBQUksS0FBSyxLQUFLLEtBQUs7QUFDbkMsdUJBQU8sUUFBUSwwREFBdUIsS0FBSyxJQUFJLElBQUksT0FBTyxDQUFDO0FBQUEsRUFDN0QsQ0FBQztBQUVELEtBQUcsK0NBQStDLE1BQU07QUFDdEQsdUJBQU8sT0FBTywwREFBdUIsS0FBSyxJQUFJLENBQUMsQ0FBQztBQUNoRCx1QkFBTyxPQUFPLDBEQUF1QixLQUFLLElBQUksSUFBSSxHQUFHLENBQUM7QUFDdEQsdUJBQU8sT0FBTywwREFBdUIsS0FBSyxJQUFJLElBQUksR0FBRyxDQUFDO0FBQ3RELHVCQUFPLE9BQU8sMERBQXVCLElBQUksS0FBSyxNQUFNLEdBQUcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3JFLHVCQUFPLE9BQU8sMERBQXVCLElBQUksS0FBSyxNQUFNLEdBQUcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3JFLHVCQUFPLE9BQU8sMERBQXVCLElBQUksS0FBSyxNQUFNLEdBQUcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3JFLHVCQUFPLE9BQU8sMERBQXVCLENBQUMsQ0FBQztBQUFBLEVBQ3pDLENBQUM7QUFDSCxDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
