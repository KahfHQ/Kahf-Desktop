var import_chai = require("chai");
var import_SystemTraySetting = require("../../types/SystemTraySetting");
describe("system tray setting utilities", () => {
  describe("shouldMinimizeToSystemTray", () => {
    it("returns false if the system tray is disabled", () => {
      import_chai.assert.isFalse((0, import_SystemTraySetting.shouldMinimizeToSystemTray)(import_SystemTraySetting.SystemTraySetting.DoNotUseSystemTray));
    });
    it("returns true if the system tray is enabled", () => {
      import_chai.assert.isTrue((0, import_SystemTraySetting.shouldMinimizeToSystemTray)(import_SystemTraySetting.SystemTraySetting.MinimizeToSystemTray));
      import_chai.assert.isTrue((0, import_SystemTraySetting.shouldMinimizeToSystemTray)(import_SystemTraySetting.SystemTraySetting.MinimizeToAndStartInSystemTray));
    });
  });
  describe("parseSystemTraySetting", () => {
    it("parses valid strings into their enum values", () => {
      import_chai.assert.strictEqual((0, import_SystemTraySetting.parseSystemTraySetting)("DoNotUseSystemTray"), import_SystemTraySetting.SystemTraySetting.DoNotUseSystemTray);
      import_chai.assert.strictEqual((0, import_SystemTraySetting.parseSystemTraySetting)("MinimizeToSystemTray"), import_SystemTraySetting.SystemTraySetting.MinimizeToSystemTray);
      import_chai.assert.strictEqual((0, import_SystemTraySetting.parseSystemTraySetting)("MinimizeToAndStartInSystemTray"), import_SystemTraySetting.SystemTraySetting.MinimizeToAndStartInSystemTray);
    });
    it("parses invalid strings to DoNotUseSystemTray", () => {
      import_chai.assert.strictEqual((0, import_SystemTraySetting.parseSystemTraySetting)("garbage"), import_SystemTraySetting.SystemTraySetting.DoNotUseSystemTray);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiU3lzdGVtVHJheVNldHRpbmdfdGVzdC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gQ29weXJpZ2h0IDIwMjEgU2lnbmFsIE1lc3NlbmdlciwgTExDXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQUdQTC0zLjAtb25seVxuXG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICdjaGFpJztcblxuaW1wb3J0IHtcbiAgU3lzdGVtVHJheVNldHRpbmcsXG4gIHBhcnNlU3lzdGVtVHJheVNldHRpbmcsXG4gIHNob3VsZE1pbmltaXplVG9TeXN0ZW1UcmF5LFxufSBmcm9tICcuLi8uLi90eXBlcy9TeXN0ZW1UcmF5U2V0dGluZyc7XG5cbmRlc2NyaWJlKCdzeXN0ZW0gdHJheSBzZXR0aW5nIHV0aWxpdGllcycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ3Nob3VsZE1pbmltaXplVG9TeXN0ZW1UcmF5JywgKCkgPT4ge1xuICAgIGl0KCdyZXR1cm5zIGZhbHNlIGlmIHRoZSBzeXN0ZW0gdHJheSBpcyBkaXNhYmxlZCcsICgpID0+IHtcbiAgICAgIGFzc2VydC5pc0ZhbHNlKFxuICAgICAgICBzaG91bGRNaW5pbWl6ZVRvU3lzdGVtVHJheShTeXN0ZW1UcmF5U2V0dGluZy5Eb05vdFVzZVN5c3RlbVRyYXkpXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3JldHVybnMgdHJ1ZSBpZiB0aGUgc3lzdGVtIHRyYXkgaXMgZW5hYmxlZCcsICgpID0+IHtcbiAgICAgIGFzc2VydC5pc1RydWUoXG4gICAgICAgIHNob3VsZE1pbmltaXplVG9TeXN0ZW1UcmF5KFN5c3RlbVRyYXlTZXR0aW5nLk1pbmltaXplVG9TeXN0ZW1UcmF5KVxuICAgICAgKTtcbiAgICAgIGFzc2VydC5pc1RydWUoXG4gICAgICAgIHNob3VsZE1pbmltaXplVG9TeXN0ZW1UcmF5KFxuICAgICAgICAgIFN5c3RlbVRyYXlTZXR0aW5nLk1pbmltaXplVG9BbmRTdGFydEluU3lzdGVtVHJheVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncGFyc2VTeXN0ZW1UcmF5U2V0dGluZycsICgpID0+IHtcbiAgICBpdCgncGFyc2VzIHZhbGlkIHN0cmluZ3MgaW50byB0aGVpciBlbnVtIHZhbHVlcycsICgpID0+IHtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChcbiAgICAgICAgcGFyc2VTeXN0ZW1UcmF5U2V0dGluZygnRG9Ob3RVc2VTeXN0ZW1UcmF5JyksXG4gICAgICAgIFN5c3RlbVRyYXlTZXR0aW5nLkRvTm90VXNlU3lzdGVtVHJheVxuICAgICAgKTtcbiAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChcbiAgICAgICAgcGFyc2VTeXN0ZW1UcmF5U2V0dGluZygnTWluaW1pemVUb1N5c3RlbVRyYXknKSxcbiAgICAgICAgU3lzdGVtVHJheVNldHRpbmcuTWluaW1pemVUb1N5c3RlbVRyYXlcbiAgICAgICk7XG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoXG4gICAgICAgIHBhcnNlU3lzdGVtVHJheVNldHRpbmcoJ01pbmltaXplVG9BbmRTdGFydEluU3lzdGVtVHJheScpLFxuICAgICAgICBTeXN0ZW1UcmF5U2V0dGluZy5NaW5pbWl6ZVRvQW5kU3RhcnRJblN5c3RlbVRyYXlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgncGFyc2VzIGludmFsaWQgc3RyaW5ncyB0byBEb05vdFVzZVN5c3RlbVRyYXknLCAoKSA9PiB7XG4gICAgICBhc3NlcnQuc3RyaWN0RXF1YWwoXG4gICAgICAgIHBhcnNlU3lzdGVtVHJheVNldHRpbmcoJ2dhcmJhZ2UnKSxcbiAgICAgICAgU3lzdGVtVHJheVNldHRpbmcuRG9Ob3RVc2VTeXN0ZW1UcmF5XG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIkFBR0Esa0JBQXVCO0FBRXZCLCtCQUlPO0FBRVAsU0FBUyxpQ0FBaUMsTUFBTTtBQUM5QyxXQUFTLDhCQUE4QixNQUFNO0FBQzNDLE9BQUcsZ0RBQWdELE1BQU07QUFDdkQseUJBQU8sUUFDTCx5REFBMkIsMkNBQWtCLGtCQUFrQixDQUNqRTtBQUFBLElBQ0YsQ0FBQztBQUVELE9BQUcsOENBQThDLE1BQU07QUFDckQseUJBQU8sT0FDTCx5REFBMkIsMkNBQWtCLG9CQUFvQixDQUNuRTtBQUNBLHlCQUFPLE9BQ0wseURBQ0UsMkNBQWtCLDhCQUNwQixDQUNGO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSCxDQUFDO0FBRUQsV0FBUywwQkFBMEIsTUFBTTtBQUN2QyxPQUFHLCtDQUErQyxNQUFNO0FBQ3RELHlCQUFPLFlBQ0wscURBQXVCLG9CQUFvQixHQUMzQywyQ0FBa0Isa0JBQ3BCO0FBQ0EseUJBQU8sWUFDTCxxREFBdUIsc0JBQXNCLEdBQzdDLDJDQUFrQixvQkFDcEI7QUFDQSx5QkFBTyxZQUNMLHFEQUF1QixnQ0FBZ0MsR0FDdkQsMkNBQWtCLDhCQUNwQjtBQUFBLElBQ0YsQ0FBQztBQUVELE9BQUcsZ0RBQWdELE1BQU07QUFDdkQseUJBQU8sWUFDTCxxREFBdUIsU0FBUyxHQUNoQywyQ0FBa0Isa0JBQ3BCO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSCxDQUFDO0FBQ0gsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
