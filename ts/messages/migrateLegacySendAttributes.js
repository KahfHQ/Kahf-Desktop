var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var migrateLegacySendAttributes_exports = {};
__export(migrateLegacySendAttributes_exports, {
  migrateLegacySendAttributes: () => migrateLegacySendAttributes
});
module.exports = __toCommonJS(migrateLegacySendAttributes_exports);
var import_lodash = require("lodash");
var import_getOwn = require("../util/getOwn");
var import_iterables = require("../util/iterables");
var import_message = require("../state/selectors/message");
var import_MessageSendState = require("./MessageSendState");
function migrateLegacySendAttributes(message, getConversation, ourConversationId) {
  const shouldMigrate = (0, import_lodash.isEmpty)(message.sendStateByConversationId) && (0, import_message.isOutgoing)(message);
  if (!shouldMigrate) {
    return void 0;
  }
  const pendingSendState = {
    status: import_MessageSendState.SendStatus.Pending,
    updatedAt: message.sent_at
  };
  const sendStateByConversationId = (0, import_iterables.zipObject)(getConversationIdsFromLegacyAttribute(message, "recipients", getConversation), (0, import_iterables.repeat)(pendingSendState));
  const wasSentToSelf = Boolean((0, import_lodash.get)(message, "sent"));
  const actions = (0, import_iterables.concat)((0, import_iterables.map)(getConversationIdsFromErrors(message.errors, getConversation), (conversationId) => ({
    type: import_MessageSendState.SendActionType.Failed,
    conversationId
  })), (0, import_iterables.map)(getConversationIdsFromLegacyAttribute(message, "sent_to", getConversation), (conversationId) => ({
    type: import_MessageSendState.SendActionType.Sent,
    conversationId
  })), (0, import_iterables.map)(getConversationIdsFromLegacyAttribute(message, "delivered_to", getConversation), (conversationId) => ({
    type: import_MessageSendState.SendActionType.GotDeliveryReceipt,
    conversationId
  })), (0, import_iterables.map)(getConversationIdsFromLegacyAttribute(message, "read_by", getConversation), (conversationId) => ({
    type: import_MessageSendState.SendActionType.GotReadReceipt,
    conversationId
  })), [
    {
      type: wasSentToSelf ? import_MessageSendState.SendActionType.Sent : import_MessageSendState.SendActionType.Failed,
      conversationId: ourConversationId
    }
  ]);
  for (const { conversationId, type } of actions) {
    const oldSendState = (0, import_getOwn.getOwn)(sendStateByConversationId, conversationId) || pendingSendState;
    sendStateByConversationId[conversationId] = (0, import_MessageSendState.sendStateReducer)(oldSendState, {
      type,
      updatedAt: void 0
    });
  }
  return sendStateByConversationId;
}
function getConversationIdsFromErrors(errors, getConversation) {
  const result = [];
  (errors || []).forEach((error) => {
    const conversation = getConversation(error.identifier) || getConversation(error.number);
    if (conversation) {
      result.push(conversation.id);
    }
  });
  return result;
}
function getConversationIdsFromLegacyAttribute(message, attributeName, getConversation) {
  const rawValue = message[attributeName];
  const value = Array.isArray(rawValue) ? rawValue : [];
  const result = [];
  value.forEach((identifier) => {
    if (typeof identifier !== "string") {
      return;
    }
    const conversation = getConversation(identifier);
    if (conversation) {
      result.push(conversation.id);
    }
  });
  return result;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  migrateLegacySendAttributes
});
//# sourceMappingURL=data:application/json;base64,
